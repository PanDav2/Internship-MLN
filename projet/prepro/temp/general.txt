//Give me all cosmonauts. 
//[u'Give', u'me', u'all', u'cosmonauts', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(cosmonauts,4,4)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Cosmonauts,NNS)
PhraseDepTag(Cosmonauts,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Cosmonauts,dobj)
PhraseDepTag(Cosmonauts,All,det)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Astronaut')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Astronaut'))]

ResourceType(Astronaut,Class)
0.63 PriorMatchScore(Astronaut,Cosmonauts)


ResourceType(Astronaut,Class)
0.63 PriorMatchScore(Astronaut,Cosmonauts)

//PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Astronaut . { ?uri dbo:nationality res:Russia . } UNION { ?uri dbo:nationality res:Soviet_Union . } }


//In which country does the Nile start? 
//[u'In', u'which', u'country', u'does', u'the', u'Nile', u'start', u'?']
PhraseIndex(In,1,1)
PhraseIndex(which,2,2)
PhraseIndex(country,3,3)
PhraseIndex(does,4,4)
PhraseIndex(the,5,5)
PhraseIndex(Nile,6,6)
PhraseIndex(start,7,7)
PhrasePosTag(In,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(Country,NN)
PhrasePosTag(Does,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Nile,NNP)
PhrasePosTag(Start,VB)
PhraseDepTag(Start,Start,root)
PhraseDepTag(Country,In,case)
PhraseDepTag(Country,Which,det)
PhraseDepTag(Nile,The,det)
PhraseDepTag(Start,Country,nmod:in)
PhraseDepTag(Start,Does,aux)
PhraseDepTag(Start,Nile,nsubj)
//[(('http://dbpedia.org/resource/', 'Nile'), ('http://dbpedia.org/ontology/', 'sourceCountry'), SparqlVar('uri'))]

ResourceType(Dbr_Nile,Entity)
1.0 PriorMatchScore(Nile,Nile)


ResourceType(Dbo_Sourcecountry,Relation)
0.7 PriorMatchScore(Sourcecountry,Country)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Nile dbo:sourceCountry ?uri . }


PhraseIndex(When,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Movie,4,4)
PhraseIndex(Worst,5,5)
PhraseIndex(Case,6,6)
PhraseIndex(Scenario,7,7)
PhraseIndex(Going,8,8)
PhraseIndex(To,9,9)
PhraseIndex(Be,10,10)
PhraseIndex(In,11,11)
PhraseIndex(Cinemas,12,12)
PhraseIndex(In,13,13)
PhraseIndex(The,14,14)
PhraseIndex(Netherlands,15,15)

//[u'When', u'Is', u'The', u'Movie', u'Worst', u'Case', u'Scenario', u'Going', u'To', u'Be', u'In', u'Cinemas', u'In', u'The', u'Netherlands']
//When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?

//La ligne est isolée 
PhrasePosTag(When,WRB)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Movie,NN)
PhrasePosTag(Worst,JJS)
PhrasePosTag(Case,NN)
PhrasePosTag(Scenario,NN)
PhrasePosTag(Going,VBG)
PhrasePosTag(To,TO)
PhrasePosTag(Be,VB)
PhrasePosTag(In,IN)
PhrasePosTag(Cinemas,NNS)
PhrasePosTag(In,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Netherlands,NNP)
phraseDepTag(Netherlands,Going,root)
phraseDepTag(Movie,The,det)
phraseDepTag(Movie,Scenario,dep)
phraseDepTag(Scenario,Worst,amod)
phraseDepTag(Scenario,Case,compound)
phraseDepTag(Going,When,advmod)
phraseDepTag(Going,Is,aux)
phraseDepTag(Going,Movie,nsubj)
phraseDepTag(Going,Cinemas,xcomp)
phraseDepTag(Cinemas,To,mark)
phraseDepTag(Cinemas,Be,cop)
phraseDepTag(Cinemas,In,case)
phraseDepTag(Cinemas,Netherlands,nmod:in)
phraseDepTag(Netherlands,In,case)
phraseDepTag(Netherlands,The,det)
PhraseIndex(Which,1,1)
PhraseIndex(German,2,2)
PhraseIndex(Cities,3,3)
PhraseIndex(Have,4,4)
PhraseIndex(More,5,5)
PhraseIndex(Than,6,6)
PhraseIndex(250000,7,7)
PhraseIndex(Inhabitants,8,8)

//[u'Which', u'German', u'Cities', u'Have', u'More', u'Than', u'250000', u'Inhabitants']
//Which German cities have more than 250000 inhabitants?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(German,JJ)
PhrasePosTag(Cities,NNS)
PhrasePosTag(Have,VBP)
PhrasePosTag(More,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(250000,CD)
PhrasePosTag(Inhabitants,NNS)
phraseDepTag(Inhabitants,Have,root)
phraseDepTag(Cities,Which,det)
phraseDepTag(Cities,German,amod)
phraseDepTag(Have,Cities,nsubj)
phraseDepTag(Have,Inhabitants,dobj)
phraseDepTag(More,Than,mwe)
phraseDepTag(250000,More,advmod)
phraseDepTag(Inhabitants,250000,nummod)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Germany')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('population')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Germany')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('population'))]

ResourceType(Dbo_Country,Relation)

ResourceType(Dbr_Germany,Entity)
0.92 PriorMatchScore(Germany,German)


ResourceType(Dbo_Populationtotal,Relation)

ResourceType(Dbo_Country,Relation)

ResourceType(Dbr_Germany,Entity)
0.92 PriorMatchScore(Germany,German)


ResourceType(Dbo_Populationtotal,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { { ?uri rdf:type dbo:City . } UNION { ?uri rdf:type dbo:Town . } ?uri dbo:country res:Germany . ?uri dbo:populationTotal ?population . FILTER ( ?population > 250000 ) }


//Who was John F. Kennedy's vice president? 
//[u'Who', u'was', u'John', u'F.', u'Kennedy', u"'s", u'vice', u'president', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(was,2,2)
PhraseIndex(John,3,3)
PhraseIndex(F.,4,4)
PhraseIndex(Kennedy,5,5)
PhraseIndex('s,6,6)
PhraseIndex(vice,7,7)
PhraseIndex(president,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(Was,VBD)
PhrasePosTag(John,NNP)
PhrasePosTag(F.,NNP)
PhrasePosTag(Kennedy,NNP)
PhrasePosTag('S,POS)
PhrasePosTag(Vice,NN)
PhrasePosTag(President,NN)
PhraseDepTag(President,Who,root)
PhraseDepTag(Who,Was,cop)
PhraseDepTag(Who,President,nsubj)
PhraseDepTag(Kennedy,John,compound)
PhraseDepTag(Kennedy,F.,compound)
PhraseDepTag(Kennedy,'S,case)
PhraseDepTag(President,Kennedy,nmod:poss)
PhraseDepTag(President,Vice,compound)
//[(('http://dbpedia.org/resource/', 'John_F._Kennedy'), ('http://dbpedia.org/ontology/', 'vicePresident'), SparqlVar('uri'))]

ResourceType(Dbr_John_F._Kennedy,Entity)
0.63 PriorMatchScore(John_F._Kennedy,Kennedy)


ResourceType(Dbo_Vicepresident,Relation)
0.81 PriorMatchScore(Vicepresident,President)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:vicePresident ?uri . }


//Who is the mayor of Berlin? 
//[u'Who', u'is', u'the', u'mayor', u'of', u'Berlin', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(mayor,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Berlin,6,6)
PhrasePosTag(Who,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Mayor,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Berlin,NNP)
PhraseDepTag(Berlin,Who,root)
PhraseDepTag(Who,Is,cop)
PhraseDepTag(Who,Mayor,nsubj)
PhraseDepTag(Mayor,The,det)
PhraseDepTag(Mayor,Berlin,nmod:of)
PhraseDepTag(Berlin,Of,case)
//[(('http://dbpedia.org/resource/', 'Berlin'), ('http://dbpedia.org/ontology/', 'leader'), SparqlVar('uri'))]

ResourceType(Dbr_Berlin,Entity)
1.0 PriorMatchScore(Berlin,Berlin)


ResourceType(Dbo_Leader,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Berlin dbo:leader ?uri . }


PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Students,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Free,6,6)
PhraseIndex(University,7,7)
PhraseIndex(In,8,8)
PhraseIndex(Amsterdam,9,9)
PhraseIndex(Have,10,10)

//[u'How', u'Many', u'Students', u'Does', u'The', u'Free', u'University', u'In', u'Amsterdam', u'Have']
//How many students does the Free University in Amsterdam have?

//La ligne est isolée 
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Students,NNS)
PhrasePosTag(Does,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Free,NNP)
PhrasePosTag(University,NNP)
PhrasePosTag(In,IN)
PhrasePosTag(Amsterdam,NNP)
PhrasePosTag(Have,VB)
phraseDepTag(Have,Have,root)
phraseDepTag(Many,How,advmod)
phraseDepTag(Students,Many,amod)
phraseDepTag(University,The,det)
phraseDepTag(University,Free,compound)
phraseDepTag(University,Amsterdam,nmod:in)
phraseDepTag(Amsterdam,In,case)
phraseDepTag(Have,Students,dobj)
phraseDepTag(Have,Does,aux)
phraseDepTag(Have,University,nsubj)
//[(('http://dbpedia.org/resource/', 'Vrije_Universiteit'), ('http://dbpedia.org/ontology/', 'numberOfStudents'), SparqlVar('num'))]

ResourceType(Dbr_Vrije_Universiteit,Entity)
0.64 PriorMatchScore(Vrije_Universiteit,University)


ResourceType(Dbo_Numberofstudents,Relation)
0.66 PriorMatchScore(Numberofstudents,Students)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Vrije_Universiteit dbo:numberOfStudents ?num . }


//What is the second highest mountain on Earth? 
//[u'What', u'is', u'the', u'second', u'highest', u'mountain', u'on', u'Earth', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(second,4,4)
PhraseIndex(highest,5,5)
PhraseIndex(mountain,6,6)
PhraseIndex(on,7,7)
PhraseIndex(Earth,8,8)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Second,JJ)
PhrasePosTag(Highest,JJS)
PhrasePosTag(Mountain,NN)
PhrasePosTag(On,IN)
PhrasePosTag(Earth,NNP)
PhraseDepTag(Earth,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Mountain,nsubj)
PhraseDepTag(What,Earth,dep)
PhraseDepTag(Mountain,The,det)
PhraseDepTag(Mountain,Second,amod)
PhraseDepTag(Mountain,Highest,amod)
PhraseDepTag(Earth,On,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation'))]

ResourceType(Mountain,Class)
1.0 PriorMatchScore(Mountain,Mountain)


ResourceType(Dbo_Elevation,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain . ?uri dbo:elevation ?elevation . } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Professional,4,4)
PhraseIndex(Skateboarders,5,5)
PhraseIndex(From,6,6)
PhraseIndex(Sweden,7,7)

//[u'Give', u'Me', u'All', u'Professional', u'Skateboarders', u'From', u'Sweden']
//Give me all professional skateboarders from Sweden.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Professional,JJ)
PhrasePosTag(Skateboarders,NNS)
PhrasePosTag(From,IN)
PhrasePosTag(Sweden,NNP)
phraseDepTag(Sweden,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Skateboarders,dobj)
phraseDepTag(Skateboarders,All,det)
phraseDepTag(Skateboarders,Professional,amod)
phraseDepTag(Skateboarders,Sweden,nmod:from)
phraseDepTag(Sweden,From,case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Skateboarding')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Skateboarding'))]

ResourceType(Dbo_Occupation,Relation)

ResourceType(Dbr_Skateboarding,Entity)
0.76 PriorMatchScore(Skateboarding,Skateboarders)


ResourceType(Dbo_Occupation,Relation)

ResourceType(Dbr_Skateboarding,Entity)
0.76 PriorMatchScore(Skateboarding,Skateboarders)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Skateboarding . { ?uri dbo:birthPlace res:Sweden . } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country res:Sweden . } }


//When was Alberta admitted as province? 
//[u'When', u'was', u'Alberta', u'admitted', u'as', u'province', u'?']
PhraseIndex(When,1,1)
PhraseIndex(was,2,2)
PhraseIndex(Alberta,3,3)
PhraseIndex(admitted,4,4)
PhraseIndex(as,5,5)
PhraseIndex(province,6,6)
PhrasePosTag(When,WRB)
PhrasePosTag(Was,VBD)
PhrasePosTag(Alberta,NNP)
PhrasePosTag(Admitted,VBD)
PhrasePosTag(As,IN)
PhrasePosTag(Province,NN)
PhraseDepTag(Province,Was,root)
PhraseDepTag(Was,When,advmod)
PhraseDepTag(Was,Alberta,nsubj)
PhraseDepTag(Alberta,Admitted,acl:relcl)
PhraseDepTag(Admitted,Province,nmod:as)
PhraseDepTag(Province,As,case)
//[(('http://dbpedia.org/resource/', 'Alberta'), ('http://dbpedia.org/property/', 'admittancedate'), SparqlVar('date'))]

ResourceType(Dbr_Alberta,Entity)
1.0 PriorMatchScore(Alberta,Alberta)


ResourceType(Admittancedate,Class)
0.63 PriorMatchScore(Admittancedate,Admitted)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Alberta dbp:admittancedate ?date . }


PhraseIndex(To,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Countries,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Himalayan,6,6)
PhraseIndex(Mountain,7,7)
PhraseIndex(System,8,8)
PhraseIndex(Extend,9,9)

//[u'To', u'Which', u'Countries', u'Does', u'The', u'Himalayan', u'Mountain', u'System', u'Extend']
//To which countries does the Himalayan mountain system extend?

//La ligne est isolée 
PhrasePosTag(To,TO)
PhrasePosTag(Which,WDT)
PhrasePosTag(Countries,NNS)
PhrasePosTag(Does,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Himalayan,JJ)
PhrasePosTag(Mountain,NN)
PhrasePosTag(System,NN)
PhrasePosTag(Extend,VB)
phraseDepTag(Extend,Extend,root)
phraseDepTag(Countries,To,case)
phraseDepTag(Countries,Which,det)
phraseDepTag(System,The,det)
phraseDepTag(System,Himalayan,amod)
phraseDepTag(System,Mountain,compound)
phraseDepTag(Extend,Countries,nmod:to)
phraseDepTag(Extend,Does,aux)
phraseDepTag(Extend,System,nsubj)
//[(('http://dbpedia.org/resource/', 'Himalayas'), ('http://dbpedia.org/property/', 'country'), SparqlVar('uri'))]

ResourceType(Dbr_Himalayas,Entity)
0.88 PriorMatchScore(Himalayas,Himalayan)


ResourceType(Country,Class)
0.62 PriorMatchScore(Country,Countries)

0.53 PriorMatchScore(Country,Mountain)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Himalayas dbp:country ?uri . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(A,3,3)
PhraseIndex(List,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(All,6,6)
PhraseIndex(Bandleaders,7,7)
PhraseIndex(That,8,8)
PhraseIndex(Play,9,9)
PhraseIndex(Trumpet,10,10)

//[u'Give', u'Me', u'A', u'List', u'Of', u'All', u'Bandleaders', u'That', u'Play', u'Trumpet']
//Give me a list of all bandleaders that play trumpet.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(A,DT)
PhrasePosTag(List,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(All,DT)
PhrasePosTag(Bandleaders,NNS)
PhrasePosTag(That,WDT)
PhrasePosTag(Play,VBP)
PhrasePosTag(Trumpet,NN)
phraseDepTag(Trumpet,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,List,dobj)
phraseDepTag(List,A,det)
phraseDepTag(List,Bandleaders,nmod:of)
phraseDepTag(Bandleaders,Of,case)
phraseDepTag(Bandleaders,All,det)
phraseDepTag(Bandleaders,Play,acl:relcl)
phraseDepTag(Play,That,nsubj)
phraseDepTag(Play,Trumpet,dobj)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Bandleader')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'instrument'), ('http://dbpedia.org/resource/', 'Trumpet'))]

ResourceType(Dbo_Occupation,Relation)

ResourceType(Dbr_Bandleader,Entity)
0.95 PriorMatchScore(Bandleader,Bandleaders)


ResourceType(Dbo_Instrument,Relation)
0.58 PriorMatchScore(Instrument,Trumpet)


ResourceType(Dbr_Trumpet,Entity)
1.0 PriorMatchScore(Trumpet,Trumpet)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader . ?uri dbo:instrument res:Trumpet . }


//Which countries have more than ten caves? 
//[u'Which', u'countries', u'have', u'more', u'than', u'ten', u'caves', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(countries,2,2)
PhraseIndex(have,3,3)
PhraseIndex(more,4,4)
PhraseIndex(than,5,5)
PhraseIndex(ten,6,6)
PhraseIndex(caves,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Countries,NNS)
PhrasePosTag(Have,VBP)
PhrasePosTag(More,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(Ten,CD)
PhrasePosTag(Caves,NNS)
PhraseDepTag(Caves,Have,root)
PhraseDepTag(Countries,Which,det)
PhraseDepTag(Have,Countries,nsubj)
PhraseDepTag(Have,Caves,dobj)
PhraseDepTag(More,Than,mwe)
PhraseDepTag(Ten,More,advmod)
PhraseDepTag(Caves,Ten,nummod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('cave'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('cave'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave'))]

ResourceType(Country,Class)
0.75 PriorMatchScore(Country,Countries)


ResourceType(Cave,Class)
0.75 PriorMatchScore(Cave,Have)

0.88 PriorMatchScore(Cave,Caves)


ResourceType(Country,Class)
0.75 PriorMatchScore(Country,Countries)


ResourceType(Cave,Class)
0.75 PriorMatchScore(Cave,Have)

0.88 PriorMatchScore(Cave,Caves)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country . ?cave rdf:type dbo:Cave . { ?cave dbo:location ?uri . } UNION { ?cave dbo:location ?loc . ?loc dbo:country ?uri . } } GROUP BY ?uri HAVING(COUNT(?cave) > 10)


PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Total,4,4)
PhraseIndex(Amount,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Men,7,7)
PhraseIndex(And,8,8)
PhraseIndex(Women,9,9)
PhraseIndex(Serving,10,10)
PhraseIndex(In,11,11)
PhraseIndex(The,12,12)
PhraseIndex(Fdny,13,13)

//[u'What', u'Is', u'The', u'Total', u'Amount', u'Of', u'Men', u'And', u'Women', u'Serving', u'In', u'The', u'Fdny']
//What is the total amount of men and women serving in the FDNY?

//La ligne est isolée 
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Total,JJ)
PhrasePosTag(Amount,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Men,NNS)
PhrasePosTag(And,CC)
PhrasePosTag(Women,NNS)
PhrasePosTag(Serving,VBG)
PhrasePosTag(In,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Fdny,NNP)
phraseDepTag(Fdny,Serving,root)
phraseDepTag(Amount,The,det)
phraseDepTag(Amount,Total,amod)
phraseDepTag(Amount,Men,nmod:of)
phraseDepTag(Amount,Women,nmod:of)
phraseDepTag(Men,Of,case)
phraseDepTag(Men,And,cc)
phraseDepTag(Men,Women,conj:and)
phraseDepTag(Serving,What,dobj)
phraseDepTag(Serving,Is,aux)
phraseDepTag(Serving,Amount,nsubj)
phraseDepTag(Serving,Fdny,nmod:in)
phraseDepTag(Fdny,In,case)
//[(('http://dbpedia.org/resource/', 'New_York_City_Fire_Department'), ('http://dbpedia.org/property/', 'strength'), SparqlVar('num'))]

ResourceType(Dbr_New_York_City_Fire_Department,Entity)

ResourceType(Strength,Class)
//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:New_York_City_Fire_Department dbp:strength ?num . }


//Who produces Orangina? 
//[u'Who', u'produces', u'Orangina', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(produces,2,2)
PhraseIndex(Orangina,3,3)
PhrasePosTag(Who,WP)
PhrasePosTag(Produces,VBZ)
PhrasePosTag(Orangina,NNP)
PhraseDepTag(Orangina,Produces,root)
PhraseDepTag(Produces,Who,nsubj)
PhraseDepTag(Produces,Orangina,dobj)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'product'), ('http://dbpedia.org/resource/', 'Orangina'))]

ResourceType(Dbo_Product,Relation)
0.66 PriorMatchScore(Product,Produces)


ResourceType(Dbr_Orangina,Entity)
1.0 PriorMatchScore(Orangina,Orangina)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:product res:Orangina . }


PhraseIndex(Who,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Formula,4,4)
PhraseIndex(1,5,5)
PhraseIndex(Race,6,6)
PhraseIndex(Driver,7,7)
PhraseIndex(With,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Most,10,10)
PhraseIndex(Races,11,11)

//[u'Who', u'Is', u'The', u'Formula', u'1', u'Race', u'Driver', u'With', u'The', u'Most', u'Races']
//Who is the Formula 1 race driver with the most races?

//La ligne est isolée 
PhrasePosTag(Who,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Formula,NN)
PhrasePosTag(1,CD)
PhrasePosTag(Race,NN)
PhrasePosTag(Driver,NN)
PhrasePosTag(With,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Most,RBS)
PhrasePosTag(Races,NNS)
phraseDepTag(Races,Who,root)
phraseDepTag(Who,Is,cop)
phraseDepTag(Who,Driver,nsubj)
phraseDepTag(Driver,The,det)
phraseDepTag(Driver,Formula,compound)
phraseDepTag(Driver,1,nummod)
phraseDepTag(Driver,Race,compound)
phraseDepTag(Driver,The,nmod:with)
phraseDepTag(The,With,case)
phraseDepTag(The,Most,advmod)
phraseDepTag(The,Races,dep)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'FormulaOneRacer')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'races'), SparqlVar('x'))]

ResourceType(FormulaOneRacer,Class)
0.63 PriorMatchScore(FormulaOneRacer,Formula)


ResourceType(Dbo_Races,Relation)
0.66 PriorMatchScore(Races,Race)

0.8 PriorMatchScore(Races,Races)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:FormulaOneRacer . ?uri dbo:races ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(World,4,4)
PhraseIndex(Heritage,5,5)
PhraseIndex(Sites,6,6)
PhraseIndex(Designated,7,7)
PhraseIndex(Within,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Past,10,10)
PhraseIndex(Two,11,11)
PhraseIndex(Years,12,12)

//[u'Give', u'Me', u'All', u'World', u'Heritage', u'Sites', u'Designated', u'Within', u'The', u'Past', u'Two', u'Years']
//Give me all world heritage sites designated within the past two years.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(World,NN)
PhrasePosTag(Heritage,NN)
PhrasePosTag(Sites,NNS)
PhrasePosTag(Designated,VBN)
PhrasePosTag(Within,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Past,JJ)
PhrasePosTag(Two,CD)
PhrasePosTag(Years,NNS)
phraseDepTag(Years,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Sites,dobj)
phraseDepTag(Sites,All,det)
phraseDepTag(Sites,World,compound)
phraseDepTag(Sites,Heritage,compound)
phraseDepTag(Sites,Designated,acl)
phraseDepTag(Designated,Years,nmod:within)
phraseDepTag(Years,Within,case)
phraseDepTag(Years,The,det)
phraseDepTag(Years,Past,amod)
phraseDepTag(Years,Two,nummod)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'team'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'league'), ('http://dbpedia.org/resource/', 'Premier_League')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthDate'), SparqlVar('y'))]

ResourceType(Dbo_Team,Relation)

ResourceType(Dbo_League,Relation)
0.57 PriorMatchScore(League,Heritage)


ResourceType(Dbr_Premier_League,Entity)

ResourceType(Dbo_Birthdate,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:team ?x . ?x dbo:league res:Premier_League . ?uri dbo:birthDate ?y . } ORDER BY DESC(?y) OFFSET 0 LIMIT 1


//Give me all members of Prodigy. 
//[u'Give', u'me', u'all', u'members', u'of', u'Prodigy', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(members,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Prodigy,6,6)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Members,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(Prodigy,NNP)
PhraseDepTag(Prodigy,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Members,dobj)
PhraseDepTag(Members,All,det)
PhraseDepTag(Members,Prodigy,nmod:of)
PhraseDepTag(Prodigy,Of,case)
//[(('http://dbpedia.org/resource/', 'The_Prodigy'), ('http://dbpedia.org/ontology/', 'bandMember'), SparqlVar('uri'))]

ResourceType(Dbr_The_Prodigy,Entity)
0.77 PriorMatchScore(The_Prodigy,Prodigy)


ResourceType(Dbo_Bandmember,Relation)
0.70 PriorMatchScore(Bandmember,Members)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Prodigy dbo:bandMember ?uri . }


//What is the longest river? 
//[u'What', u'is', u'the', u'longest', u'river', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(longest,4,4)
PhraseIndex(river,5,5)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Longest,JJS)
PhrasePosTag(River,NN)
PhraseDepTag(River,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,River,nsubj)
PhraseDepTag(River,The,det)
PhraseDepTag(River,Longest,amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'River')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'River'))]

ResourceType(River,Class)
1.0 PriorMatchScore(River,River)


ResourceType(River,Class)
1.0 PriorMatchScore(River,River)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:River . { ?uri dbo:length ?l . } UNION { ?uri dbp:length ?l . } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1


PhraseIndex(Does,1,1)
PhraseIndex(Breaking,2,2)
PhraseIndex(Bad,3,3)
PhraseIndex(Have,4,4)
PhraseIndex(More,5,5)
PhraseIndex(Episodes,6,6)
PhraseIndex(Than,7,7)
PhraseIndex(Game,8,8)
PhraseIndex(Of,9,9)
PhraseIndex(Thrones,10,10)

//[u'Does', u'Breaking', u'Bad', u'Have', u'More', u'Episodes', u'Than', u'Game', u'Of', u'Thrones']
//Does Breaking Bad have more episodes than Game of Thrones?

//La ligne est isolée 
PhrasePosTag(Does,VBZ)
PhrasePosTag(Breaking,VBG)
PhrasePosTag(Bad,JJ)
PhrasePosTag(Have,VBP)
PhrasePosTag(More,JJR)
PhrasePosTag(Episodes,NNS)
PhrasePosTag(Than,IN)
PhrasePosTag(Game,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Thrones,NNPS)
phraseDepTag(Thrones,Have,root)
phraseDepTag(Does,Breaking,xcomp)
phraseDepTag(Breaking,Bad,xcomp)
phraseDepTag(Have,Does,csubj)
phraseDepTag(Have,Episodes,dobj)
phraseDepTag(Have,Game,nmod:than)
phraseDepTag(Episodes,More,amod)
phraseDepTag(Game,Than,case)
phraseDepTag(Game,Thrones,nmod:of)
phraseDepTag(Thrones,Of,case)
//[(('http://dbpedia.org/resource/', 'Breaking_Bad'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Game_of_Thrones'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('y')), (('http://dbpedia.org/resource/', 'Breaking_Bad'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Game_of_Thrones'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('y'))]

ResourceType(Dbr_Breaking_Bad,Entity)
0.8 PriorMatchScore(Breaking_Bad,Breaking)


ResourceType(Dbo_Numberofepisodes,Relation)
0.66 PriorMatchScore(Numberofepisodes,Episodes)


ResourceType(Dbr_Game_Of_Thrones,Entity)
0.63 PriorMatchScore(Game_Of_Thrones,Thrones)


ResourceType(Dbo_Numberofepisodes,Relation)
0.66 PriorMatchScore(Numberofepisodes,Episodes)


ResourceType(Dbr_Breaking_Bad,Entity)
0.8 PriorMatchScore(Breaking_Bad,Breaking)


ResourceType(Dbo_Numberofepisodes,Relation)
0.66 PriorMatchScore(Numberofepisodes,Episodes)


ResourceType(Dbr_Game_Of_Thrones,Entity)
0.63 PriorMatchScore(Game_Of_Thrones,Thrones)


ResourceType(Dbo_Numberofepisodes,Relation)
0.66 PriorMatchScore(Numberofepisodes,Episodes)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Breaking_Bad dbo:numberOfEpisodes ?x . res:Game_of_Thrones dbo:numberOfEpisodes ?y . FILTER (?y > ?x) }


//Give me all cars that are produced in Germany. 
//[u'Give', u'me', u'all', u'cars', u'that', u'are', u'produced', u'in', u'Germany', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(cars,4,4)
PhraseIndex(that,5,5)
PhraseIndex(are,6,6)
PhraseIndex(produced,7,7)
PhraseIndex(in,8,8)
PhraseIndex(Germany,9,9)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Cars,NNS)
PhrasePosTag(That,WDT)
PhrasePosTag(Are,VBP)
PhrasePosTag(Produced,VBN)
PhrasePosTag(In,IN)
PhrasePosTag(Germany,NNP)
PhraseDepTag(Germany,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Cars,dobj)
PhraseDepTag(Cars,All,det)
PhraseDepTag(Cars,Produced,acl:relcl)
PhraseDepTag(Produced,That,nsubjpass)
PhraseDepTag(Produced,Are,auxpass)
PhraseDepTag(Produced,Germany,nmod:in)
PhraseDepTag(Germany,In,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Automobile')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Automobile'))]

ResourceType(Automobile,Class)

ResourceType(Automobile,Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Automobile . { ?uri dbo:assembly res:Germany . } UNION { ?uri dbp:assembly res:Germany . } UNION { { ?uri dbo:manufacturer ?x . } UNION { ?uri dbp:manufacturer ?x . } { ?x dbo:locationCountry res:Germany . } UNION { ?x dbo:location res:Germany . } } }


PhraseIndex(What,1,1)
PhraseIndex(Were,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Main,4,4)
PhraseIndex(Discoveries,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(The,7,7)
PhraseIndex(Mars,8,8)
PhraseIndex(Rover,9,9)
PhraseIndex(Curiosity,10,10)

//[u'What', u'Were', u'The', u'Main', u'Discoveries', u'Of', u'The', u'Mars', u'Rover', u'Curiosity']
//What were the main discoveries of the Mars rover Curiosity?

//La ligne est isolée 
PhrasePosTag(What,WP)
PhrasePosTag(Were,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Main,JJ)
PhrasePosTag(Discoveries,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Mars,NNP)
PhrasePosTag(Rover,NN)
PhrasePosTag(Curiosity,NN)
phraseDepTag(Curiosity,What,root)
phraseDepTag(What,Were,cop)
phraseDepTag(What,Discoveries,nsubj)
phraseDepTag(Discoveries,The,det)
phraseDepTag(Discoveries,Main,amod)
phraseDepTag(Discoveries,Curiosity,nmod:of)
phraseDepTag(Curiosity,Of,case)
phraseDepTag(Curiosity,The,det)
phraseDepTag(Curiosity,Mars,compound)
phraseDepTag(Curiosity,Rover,compound)
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(People,4,4)
PhraseIndex(That,5,5)
PhraseIndex(Were,6,6)
PhraseIndex(Born,7,7)
PhraseIndex(In,8,8)
PhraseIndex(Vienna,9,9)
PhraseIndex(And,10,10)
PhraseIndex(Died,11,11)
PhraseIndex(In,12,12)
PhraseIndex(Berlin,13,13)

//[u'Give', u'Me', u'All', u'People', u'That', u'Were', u'Born', u'In', u'Vienna', u'And', u'Died', u'In', u'Berlin']
//Give me all people that were born in Vienna and died in Berlin.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(People,NNS)
PhrasePosTag(That,WDT)
PhrasePosTag(Were,VBD)
PhrasePosTag(Born,VBN)
PhrasePosTag(In,IN)
PhrasePosTag(Vienna,NNP)
PhrasePosTag(And,CC)
PhrasePosTag(Died,VBD)
PhrasePosTag(In,IN)
PhrasePosTag(Berlin,NNP)
phraseDepTag(Berlin,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,People,dobj)
phraseDepTag(Give,And,cc)
phraseDepTag(Give,Died,conj:and)
phraseDepTag(People,All,det)
phraseDepTag(People,Born,acl:relcl)
phraseDepTag(Born,That,nsubjpass)
phraseDepTag(Born,Were,auxpass)
phraseDepTag(Born,Vienna,nmod:in)
phraseDepTag(Vienna,In,case)
phraseDepTag(Died,Berlin,nmod:in)
phraseDepTag(Berlin,In,case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), ('http://dbpedia.org/resource/', 'Vienna')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'deathPlace'), ('http://dbpedia.org/resource/', 'Berlin'))]

ResourceType(Dbo_Birthplace,Relation)

ResourceType(Dbr_Vienna,Entity)
1.0 PriorMatchScore(Vienna,Vienna)


ResourceType(Dbo_Deathplace,Relation)

ResourceType(Dbr_Berlin,Entity)
0.6 PriorMatchScore(Berlin,Born)

1.0 PriorMatchScore(Berlin,Berlin)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:birthPlace res:Vienna . ?uri dbo:deathPlace res:Berlin . }


//Is proinsulin a protein? 
//[u'Is', u'proinsulin', u'a', u'protein', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(proinsulin,2,2)
PhraseIndex(a,3,3)
PhraseIndex(protein,4,4)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Proinsulin,NN)
PhrasePosTag(A,DT)
PhrasePosTag(Protein,NN)
PhraseDepTag(Protein,Protein,root)
PhraseDepTag(Protein,Is,cop)
PhraseDepTag(Protein,Proinsulin,nsubj)
PhraseDepTag(Protein,A,det)
//[(('http://dbpedia.org/resource/', 'Proinsulin'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Protein'))]

ResourceType(Protein,Class)
0.58 PriorMatchScore(Protein,Proinsulin)

1.0 PriorMatchScore(Protein,Protein)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Proinsulin rdf:type dbo:Protein . }


//How tall is Michael Jordan? 
//[u'How', u'tall', u'is', u'Michael', u'Jordan', u'?']
PhraseIndex(How,1,1)
PhraseIndex(tall,2,2)
PhraseIndex(is,3,3)
PhraseIndex(Michael,4,4)
PhraseIndex(Jordan,5,5)
PhrasePosTag(How,WRB)
PhrasePosTag(Tall,JJ)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Michael,NNP)
PhrasePosTag(Jordan,NNP)
PhraseDepTag(Jordan,Is,root)
PhraseDepTag(Tall,How,advmod)
PhraseDepTag(Is,Tall,dep)
PhraseDepTag(Is,Jordan,nsubj)
PhraseDepTag(Jordan,Michael,compound)
//[(('http://dbpedia.org/resource/', 'Michael_Jordan'), ('http://dbpedia.org/ontology/', 'height'), SparqlVar('num'))]

ResourceType(Dbr_Michael_Jordan,Entity)
0.66 PriorMatchScore(Michael_Jordan,Michael)

0.6 PriorMatchScore(Michael_Jordan,Jordan)


ResourceType(Dbo_Height,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num . }


//What is the capital of Canada? 
//[u'What', u'is', u'the', u'capital', u'of', u'Canada', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(capital,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Canada,6,6)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Capital,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Canada,NNP)
PhraseDepTag(Canada,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Capital,nsubj)
PhraseDepTag(Capital,The,det)
PhraseDepTag(Capital,Canada,nmod:of)
PhraseDepTag(Canada,Of,case)
//[(('http://dbpedia.org/resource/', 'Canada'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('uri'))]

ResourceType(Dbr_Canada,Entity)
1.0 PriorMatchScore(Canada,Canada)


ResourceType(Dbo_Capital,Relation)
0.85 PriorMatchScore(Capital,Capital)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri . }


//Who is the governor of Wyoming? 
//[u'Who', u'is', u'the', u'governor', u'of', u'Wyoming', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(governor,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Wyoming,6,6)
PhrasePosTag(Who,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Governor,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Wyoming,NNP)
PhraseDepTag(Wyoming,Who,root)
PhraseDepTag(Who,Is,cop)
PhraseDepTag(Who,Governor,nsubj)
PhraseDepTag(Governor,The,det)
PhraseDepTag(Governor,Wyoming,nmod:of)
PhraseDepTag(Wyoming,Of,case)
//[(('http://dbpedia.org/resource/', 'Wyoming'), ('http://dbpedia.org/property/', 'governor'), SparqlVar('uri'))]

ResourceType(Dbr_Wyoming,Entity)
1.0 PriorMatchScore(Wyoming,Wyoming)


ResourceType(Governor,Class)
0.87 PriorMatchScore(Governor,Governor)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Wyoming dbp:governor ?uri . }


PhraseIndex(Do,1,1)
PhraseIndex(Prince,2,2)
PhraseIndex(Harry,3,3)
PhraseIndex(And,4,4)
PhraseIndex(Prince,5,5)
PhraseIndex(William,6,6)
PhraseIndex(Have,7,7)
PhraseIndex(The,8,8)
PhraseIndex(Same,9,9)
PhraseIndex(Mother,10,10)

//[u'Do', u'Prince', u'Harry', u'And', u'Prince', u'William', u'Have', u'The', u'Same', u'Mother']
//Do Prince Harry and Prince William have the same mother?

//La ligne est isolée 
PhrasePosTag(Do,VB)
PhrasePosTag(Prince,NNP)
PhrasePosTag(Harry,NNP)
PhrasePosTag(And,CC)
PhrasePosTag(Prince,NNP)
PhrasePosTag(William,NNP)
PhrasePosTag(Have,VBP)
PhrasePosTag(The,DT)
PhrasePosTag(Same,JJ)
PhrasePosTag(Mother,NN)
phraseDepTag(Mother,Do,root)
phraseDepTag(Do,Have,ccomp)
phraseDepTag(Harry,Prince,compound)
phraseDepTag(Harry,And,cc)
phraseDepTag(Harry,William,conj:and)
phraseDepTag(William,Prince,compound)
phraseDepTag(Have,Harry,nsubj)
phraseDepTag(Have,William,nsubj)
phraseDepTag(Have,Mother,dobj)
phraseDepTag(Mother,The,det)
//[('<http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('x')), ('<http://dbpedia.org/resource/Prince_Harry_of_Wales>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('y')), ('<http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('x')), ('<http://dbpedia.org/resource/Prince_Harry_of_Wales>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('y'))]

ResourceType(Mother,Class)
0.83 PriorMatchScore(Mother,Mother)


ResourceType(Mother,Class)
0.83 PriorMatchScore(Mother,Mother)


ResourceType(Mother,Class)
0.83 PriorMatchScore(Mother,Mother)


ResourceType(Mother,Class)
0.83 PriorMatchScore(Mother,Mother)

//PREFIX dbp: <http://dbpedia.org/property/> ASK WHERE { <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> dbp:mother ?x . <http://dbpedia.org/resource/Prince_Harry_of_Wales> dbp:mother ?y . FILTER (?x = ?y) }


//Who was the father of Queen Elizabeth II? 
//[u'Who', u'was', u'the', u'father', u'of', u'Queen', u'Elizabeth', u'II', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(was,2,2)
PhraseIndex(the,3,3)
PhraseIndex(father,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Queen,6,6)
PhraseIndex(Elizabeth,7,7)
PhraseIndex(II,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(Was,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Father,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Queen,NNP)
PhrasePosTag(Elizabeth,NNP)
PhrasePosTag(Ii,NNP)
PhraseDepTag(Ii,Who,root)
PhraseDepTag(Who,Was,cop)
PhraseDepTag(Who,Father,nsubj)
PhraseDepTag(Father,The,det)
PhraseDepTag(Father,Ii,nmod:of)
PhraseDepTag(Ii,Of,case)
PhraseDepTag(Ii,Queen,compound)
PhraseDepTag(Ii,Elizabeth,compound)
//[(('http://dbpedia.org/resource/', 'Elizabeth_II'), ('http://dbpedia.org/property/', 'father'), SparqlVar('uri'))]

ResourceType(Dbr_Elizabeth_Ii,Entity)
0.85 PriorMatchScore(Elizabeth_Ii,Elizabeth)


ResourceType(Father,Class)
0.83 PriorMatchScore(Father,Father)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Elizabeth_II dbp:father ?uri . }


//Which U.S. state has been admitted latest? 
//[u'Which', u'U.S.', u'state', u'has', u'been', u'admitted', u'latest', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(U.S.,2,2)
PhraseIndex(state,3,3)
PhraseIndex(has,4,4)
PhraseIndex(been,5,5)
PhraseIndex(admitted,6,6)
PhraseIndex(latest,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(State,NN)
PhrasePosTag(Has,VBZ)
PhrasePosTag(Been,VBN)
PhrasePosTag(Admitted,VBN)
PhrasePosTag(Latest,JJS)
PhraseDepTag(Latest,Admitted,root)
PhraseDepTag(State,Which,det)
PhraseDepTag(State,U.S.,compound)
PhraseDepTag(Admitted,State,nsubjpass)
PhraseDepTag(Admitted,Has,aux)
PhraseDepTag(Admitted,Been,auxpass)
PhraseDepTag(Admitted,Latest,xcomp)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'admittancedate'), SparqlVar('x'))]

ResourceType(StatesOfTheUnitedStates,Class)

ResourceType(Admittancedate,Class)
0.63 PriorMatchScore(Admittancedate,Admitted)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:admittancedate ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1


//How many languages are spoken in Turkmenistan? 
//[u'How', u'many', u'languages', u'are', u'spoken', u'in', u'Turkmenistan', u'?']
PhraseIndex(How,1,1)
PhraseIndex(many,2,2)
PhraseIndex(languages,3,3)
PhraseIndex(are,4,4)
PhraseIndex(spoken,5,5)
PhraseIndex(in,6,6)
PhraseIndex(Turkmenistan,7,7)
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Languages,NNS)
PhrasePosTag(Are,VBP)
PhrasePosTag(Spoken,VBN)
PhrasePosTag(In,IN)
PhrasePosTag(Turkmenistan,NNP)
PhraseDepTag(Turkmenistan,Spoken,root)
PhraseDepTag(Many,How,advmod)
PhraseDepTag(Languages,Many,amod)
PhraseDepTag(Spoken,Languages,nsubjpass)
PhraseDepTag(Spoken,Are,auxpass)
PhraseDepTag(Spoken,Turkmenistan,nmod:in)
PhraseDepTag(Turkmenistan,In,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'governor'), ('http://dbpedia.org/resource/', 'Sean_Parnell'))]

ResourceType(StatesOfTheUnitedStates,Class)

ResourceType(Governor,Class)

ResourceType(Dbr_Sean_Parnell,Entity)
//PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:governor res:Sean_Parnell . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Movies,4,4)
PhraseIndex(Directed,5,5)
PhraseIndex(By,6,6)
PhraseIndex(Francis,7,7)
PhraseIndex(Ford,8,8)
PhraseIndex(Coppola,9,9)

//[u'Give', u'Me', u'All', u'Movies', u'Directed', u'By', u'Francis', u'Ford', u'Coppola']
//Give me all movies directed by Francis Ford Coppola.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Movies,NNS)
PhrasePosTag(Directed,VBN)
PhrasePosTag(By,IN)
PhrasePosTag(Francis,NNP)
PhrasePosTag(Ford,NNP)
PhrasePosTag(Coppola,NNP)
phraseDepTag(Coppola,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Movies,dobj)
phraseDepTag(Movies,All,det)
phraseDepTag(Movies,Directed,acl)
phraseDepTag(Directed,Coppola,nmod:by)
phraseDepTag(Coppola,By,case)
phraseDepTag(Coppola,Francis,compound)
phraseDepTag(Coppola,Ford,compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Francis_Ford_Coppola'))]

ResourceType(Film,Class)

ResourceType(Dbo_Director,Relation)
0.62 PriorMatchScore(Director,Directed)


ResourceType(Dbr_Francis_Ford_Coppola,Entity)
0.51 PriorMatchScore(Francis_Ford_Coppola,Francis)

0.51 PriorMatchScore(Francis_Ford_Coppola,Coppola)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:director res:Francis_Ford_Coppola . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Actors,4,4)
PhraseIndex(Starring,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Movies,7,7)
PhraseIndex(Directed,8,8)
PhraseIndex(By,9,9)
PhraseIndex(William,10,10)
PhraseIndex(Shatner,11,11)

//[u'Give', u'Me', u'All', u'Actors', u'Starring', u'In', u'Movies', u'Directed', u'By', u'William', u'Shatner']
//Give me all actors starring in movies directed by William Shatner.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Actors,NNS)
PhrasePosTag(Starring,VBG)
PhrasePosTag(In,IN)
PhrasePosTag(Movies,NNS)
PhrasePosTag(Directed,VBN)
PhrasePosTag(By,IN)
PhrasePosTag(William,NNP)
PhrasePosTag(Shatner,NNP)
phraseDepTag(Shatner,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Actors,dobj)
phraseDepTag(Actors,All,det)
phraseDepTag(Actors,Starring,acl)
phraseDepTag(Starring,Movies,nmod:in)
phraseDepTag(Movies,In,case)
phraseDepTag(Movies,Directed,acl)
phraseDepTag(Directed,Shatner,nmod:by)
phraseDepTag(Shatner,By,case)
phraseDepTag(Shatner,William,compound)
//[(SparqlVar('x'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'William_Shatner')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'starring'), SparqlVar('uri'))]

ResourceType(Dbo_Director,Relation)
0.57 PriorMatchScore(Director,Actors)

0.62 PriorMatchScore(Director,Directed)


ResourceType(Dbr_William_Shatner,Entity)
0.63 PriorMatchScore(William_Shatner,William)

0.63 PriorMatchScore(William_Shatner,Shatner)


ResourceType(Dbo_Starring,Relation)
0.87 PriorMatchScore(Starring,Starring)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner . ?x dbo:starring ?uri . }


//Are tree frogs a type of amphibian? 
//[u'Are', u'tree', u'frogs', u'a', u'type', u'of', u'amphibian', u'?']
PhraseIndex(Are,1,1)
PhraseIndex(tree,2,2)
PhraseIndex(frogs,3,3)
PhraseIndex(a,4,4)
PhraseIndex(type,5,5)
PhraseIndex(of,6,6)
PhraseIndex(amphibian,7,7)
PhrasePosTag(Are,VBP)
PhrasePosTag(Tree,NN)
PhrasePosTag(Frogs,NNS)
PhrasePosTag(A,DT)
PhrasePosTag(Type,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Amphibian,NN)
PhraseDepTag(Amphibian,Are,root)
PhraseDepTag(Are,Frogs,nsubj)
PhraseDepTag(Are,Type,nmod)
PhraseDepTag(Frogs,Tree,compound)
PhraseDepTag(Type,A,det)
PhraseDepTag(Type,Amphibian,nmod:of)
PhraseDepTag(Amphibian,Of,case)
//[(('http://dbpedia.org/resource/', 'Hylidae'), ('http://dbpedia.org/ontology/', 'class'), ('http://dbpedia.org/resource/', 'Amphibian'))]

ResourceType(Dbr_Hylidae,Entity)

ResourceType(Dbo_Class,Relation)

ResourceType(Dbr_Amphibian,Entity)
1.0 PriorMatchScore(Amphibian,Amphibian)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Hylidae dbo:class res:Amphibian . }


//What is the birth name of Angela Merkel? 
//[u'What', u'is', u'the', u'birth', u'name', u'of', u'Angela', u'Merkel', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(birth,4,4)
PhraseIndex(name,5,5)
PhraseIndex(of,6,6)
PhraseIndex(Angela,7,7)
PhraseIndex(Merkel,8,8)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Birth,NN)
PhrasePosTag(Name,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Angela,NNP)
PhrasePosTag(Merkel,NNP)
PhraseDepTag(Merkel,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Name,nsubj)
PhraseDepTag(Name,The,det)
PhraseDepTag(Name,Birth,compound)
PhraseDepTag(Name,Merkel,nmod:of)
PhraseDepTag(Merkel,Of,case)
PhraseDepTag(Merkel,Angela,compound)
//[(('http://dbpedia.org/resource/', 'Angela_Merkel'), ('http://dbpedia.org/property/', 'birthName'), SparqlVar('string'))]

ResourceType(Dbr_Angela_Merkel,Entity)
0.63 PriorMatchScore(Angela_Merkel,Angela)

0.63 PriorMatchScore(Angela_Merkel,Merkel)


ResourceType(Birthname,Class)
0.57 PriorMatchScore(Birthname,Birth)

0.61 PriorMatchScore(Birthname,Name)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Angela_Merkel dbp:birthName ?string . }


//Give me all Methodist politicians. 
//[u'Give', u'me', u'all', u'Methodist', u'politicians', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(Methodist,4,4)
PhraseIndex(politicians,5,5)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Methodist,JJ)
PhrasePosTag(Politicians,NNS)
PhraseDepTag(Politicians,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Politicians,dobj)
PhraseDepTag(Politicians,All,det)
PhraseDepTag(Politicians,Methodist,amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Politician')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'religion'), ('http://dbpedia.org/resource/', 'Methodism'))]

ResourceType(Politician,Class)
0.95 PriorMatchScore(Politician,Politicians)


ResourceType(Dbo_Religion,Relation)

ResourceType(Dbr_Methodism,Entity)
0.88 PriorMatchScore(Methodism,Methodist)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Politician . ?uri dbo:religion res:Methodism . }


//How often did Jane Fonda marry? 
//[u'How', u'often', u'did', u'Jane', u'Fonda', u'marry', u'?']
PhraseIndex(How,1,1)
PhraseIndex(often,2,2)
PhraseIndex(did,3,3)
PhraseIndex(Jane,4,4)
PhraseIndex(Fonda,5,5)
PhraseIndex(marry,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(Often,RB)
PhrasePosTag(Did,VBD)
PhrasePosTag(Jane,NNP)
PhrasePosTag(Fonda,NNP)
PhrasePosTag(Marry,VB)
PhraseDepTag(Marry,Marry,root)
PhraseDepTag(Often,How,advmod)
PhraseDepTag(Fonda,Jane,compound)
PhraseDepTag(Marry,Often,advmod)
PhraseDepTag(Marry,Did,aux)
PhraseDepTag(Marry,Fonda,nsubj)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'type'), ('http://dbpedia.org/resource/', 'Nonprofit_organization')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'type'), ('http://dbpedia.org/resource/', 'Nonprofit_organization'))]

ResourceType(Dbo_Type,Relation)

ResourceType(Dbr_Nonprofit_Organization,Entity)

ResourceType(Dbo_Type,Relation)

ResourceType(Dbr_Nonprofit_Organization,Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:type res:Nonprofit_organization . { ?uri dbo:locationCountry res:Australia . } UNION { ?uri dbo:location ?x . ?x dbo:country res:Australia . } }


PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Military,3,3)
PhraseIndex(Conflicts,4,4)
PhraseIndex(Did,5,5)
PhraseIndex(Lawrence,6,6)
PhraseIndex(Of,7,7)
PhraseIndex(Arabia,8,8)
PhraseIndex(Participate,9,9)

//[u'In', u'Which', u'Military', u'Conflicts', u'Did', u'Lawrence', u'Of', u'Arabia', u'Participate']
//In which military conflicts did Lawrence of Arabia participate?

//La ligne est isolée 
PhrasePosTag(In,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(Military,JJ)
PhrasePosTag(Conflicts,NNS)
PhrasePosTag(Did,VBD)
PhrasePosTag(Lawrence,NNP)
PhrasePosTag(Of,IN)
PhrasePosTag(Arabia,NNP)
PhrasePosTag(Participate,VB)
phraseDepTag(Participate,Participate,root)
phraseDepTag(Conflicts,In,case)
phraseDepTag(Conflicts,Which,det)
phraseDepTag(Conflicts,Military,amod)
phraseDepTag(Lawrence,Arabia,nmod:of)
phraseDepTag(Arabia,Of,case)
phraseDepTag(Participate,Conflicts,nmod:in)
phraseDepTag(Participate,Did,aux)
phraseDepTag(Participate,Lawrence,nsubj)
//[(('http://dbpedia.org/resource/', 'T._E._Lawrence'), ('http://dbpedia.org/ontology/', 'battle'), SparqlVar('uri'))]

ResourceType(Dbr_T._E._Lawrence,Entity)
0.72 PriorMatchScore(T._E._Lawrence,Lawrence)


ResourceType(Dbo_Battle,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:T._E._Lawrence dbo:battle ?uri . }


//Who developed Minecraft? 
//[u'Who', u'developed', u'Minecraft', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(developed,2,2)
PhraseIndex(Minecraft,3,3)
PhrasePosTag(Who,WP)
PhrasePosTag(Developed,VBD)
PhrasePosTag(Minecraft,NNP)
PhraseDepTag(Minecraft,Developed,root)
PhraseDepTag(Developed,Who,nsubj)
PhraseDepTag(Developed,Minecraft,dobj)
//[(('http://dbpedia.org/resource/', 'Minecraft'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('uri'))]

ResourceType(Dbr_Minecraft,Entity)
1.0 PriorMatchScore(Minecraft,Minecraft)


ResourceType(Dbo_Developer,Relation)
0.77 PriorMatchScore(Developer,Developed)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Minecraft dbo:developer ?uri . }


//What is the melting point of copper? 
//[u'What', u'is', u'the', u'melting', u'point', u'of', u'copper', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(melting,4,4)
PhraseIndex(point,5,5)
PhraseIndex(of,6,6)
PhraseIndex(copper,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Melting,JJ)
PhrasePosTag(Point,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Copper,NN)
PhraseDepTag(Copper,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Point,nsubj)
PhraseDepTag(Point,The,det)
PhraseDepTag(Point,Melting,amod)
PhraseDepTag(Point,Copper,nmod:of)
PhraseDepTag(Copper,Of,case)
//Give me all sister cities of Brno. 
//[u'Give', u'me', u'all', u'sister', u'cities', u'of', u'Brno', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(sister,4,4)
PhraseIndex(cities,5,5)
PhraseIndex(of,6,6)
PhraseIndex(Brno,7,7)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Sister,NN)
PhrasePosTag(Cities,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(Brno,NNP)
PhraseDepTag(Brno,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Cities,dobj)
PhraseDepTag(Cities,All,det)
PhraseDepTag(Cities,Sister,compound)
PhraseDepTag(Cities,Brno,nmod:of)
PhraseDepTag(Brno,Of,case)
//How many inhabitants does Maribor have? 
//[u'How', u'many', u'inhabitants', u'does', u'Maribor', u'have', u'?']
PhraseIndex(How,1,1)
PhraseIndex(many,2,2)
PhraseIndex(inhabitants,3,3)
PhraseIndex(does,4,4)
PhraseIndex(Maribor,5,5)
PhraseIndex(have,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Inhabitants,NNS)
PhrasePosTag(Does,VBZ)
PhrasePosTag(Maribor,NNP)
PhrasePosTag(Have,VB)
PhraseDepTag(Have,Have,root)
PhraseDepTag(Many,How,advmod)
PhraseDepTag(Inhabitants,Many,amod)
PhraseDepTag(Have,Inhabitants,dobj)
PhraseDepTag(Have,Does,aux)
PhraseDepTag(Have,Maribor,nsubj)
//[(('http://dbpedia.org/resource/', 'Maribor'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('num'))]

ResourceType(Dbr_Maribor,Entity)
1.0 PriorMatchScore(Maribor,Maribor)


ResourceType(Dbo_Populationtotal,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Maribor dbo:populationTotal ?num . }


//Give me all companies in Munich. 
//[u'Give', u'me', u'all', u'companies', u'in', u'Munich', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(companies,4,4)
PhraseIndex(in,5,5)
PhraseIndex(Munich,6,6)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Companies,NNS)
PhrasePosTag(In,IN)
PhrasePosTag(Munich,NNP)
PhraseDepTag(Munich,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Companies,dobj)
PhraseDepTag(Companies,All,det)
PhraseDepTag(Companies,Munich,nmod:in)
PhraseDepTag(Munich,In,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company'))]

ResourceType(Company,Class)
0.75 PriorMatchScore(Company,Companies)


ResourceType(Company,Class)
0.75 PriorMatchScore(Company,Companies)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company . { ?uri dbo:location res:Munich . } UNION { ?uri dbo:headquarter res:Munich . } UNION { ?uri dbo:locationCity res:Munich . } }


//How tall is Claudia Schiffer? 
//[u'How', u'tall', u'is', u'Claudia', u'Schiffer', u'?']
PhraseIndex(How,1,1)
PhraseIndex(tall,2,2)
PhraseIndex(is,3,3)
PhraseIndex(Claudia,4,4)
PhraseIndex(Schiffer,5,5)
PhrasePosTag(How,WRB)
PhrasePosTag(Tall,JJ)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Claudia,NNP)
PhrasePosTag(Schiffer,NNP)
PhraseDepTag(Schiffer,Is,root)
PhraseDepTag(Tall,How,advmod)
PhraseDepTag(Is,Tall,dep)
PhraseDepTag(Is,Schiffer,nsubj)
PhraseDepTag(Schiffer,Claudia,compound)
//[(('http://dbpedia.org/resource/', 'Claudia_Schiffer'), ('http://dbpedia.org/ontology/', 'height'), SparqlVar('height'))]

ResourceType(Dbr_Claudia_Schiffer,Entity)
0.60 PriorMatchScore(Claudia_Schiffer,Claudia)

0.66 PriorMatchScore(Claudia_Schiffer,Schiffer)


ResourceType(Dbo_Height,Relation)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height . }


//List all games by GMT. 
//[u'List', u'all', u'games', u'by', u'GMT', u'.']
PhraseIndex(List,1,1)
PhraseIndex(all,2,2)
PhraseIndex(games,3,3)
PhraseIndex(by,4,4)
PhraseIndex(GMT,5,5)
PhrasePosTag(List,VB)
PhrasePosTag(All,DT)
PhrasePosTag(Games,NNS)
PhrasePosTag(By,IN)
PhrasePosTag(Gmt,NNP)
PhraseDepTag(Gmt,List,root)
PhraseDepTag(List,Games,dobj)
PhraseDepTag(List,Gmt,nmod:by)
PhraseDepTag(Games,All,det)
PhraseDepTag(Gmt,By,case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'publisher'), ('http://dbpedia.org/resource/', 'GMT_Games'))]

ResourceType(Dbo_Publisher,Relation)

ResourceType(Dbr_Gmt_Games,Entity)
0.71 PriorMatchScore(Gmt_Games,Games)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:publisher res:GMT_Games . }


//Who founded Intel? 
//[u'Who', u'founded', u'Intel', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(founded,2,2)
PhraseIndex(Intel,3,3)
PhrasePosTag(Who,WP)
PhrasePosTag(Founded,VBD)
PhrasePosTag(Intel,NNP)
PhraseDepTag(Intel,Founded,root)
PhraseDepTag(Founded,Who,nsubj)
PhraseDepTag(Founded,Intel,dobj)
//[(('http://dbpedia.org/resource/', 'Intel'), ('http://dbpedia.org/ontology/', 'foundedBy'), SparqlVar('uri'))]

ResourceType(Dbr_Intel,Entity)
1.0 PriorMatchScore(Intel,Intel)


ResourceType(Dbo_Foundedby,Relation)
0.75 PriorMatchScore(Foundedby,Founded)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Intel dbo:foundedBy ?uri . }


//Who is the husband of Amanda Palmer? 
//[u'Who', u'is', u'the', u'husband', u'of', u'Amanda', u'Palmer', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(husband,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Amanda,6,6)
PhraseIndex(Palmer,7,7)
PhrasePosTag(Who,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Husband,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Amanda,NNP)
PhrasePosTag(Palmer,NNP)
PhraseDepTag(Palmer,Who,root)
PhraseDepTag(Who,Is,cop)
PhraseDepTag(Who,Husband,nsubj)
PhraseDepTag(Husband,The,det)
PhraseDepTag(Husband,Palmer,nmod:of)
PhraseDepTag(Palmer,Of,case)
PhraseDepTag(Palmer,Amanda,compound)
//[(('http://dbpedia.org/resource/', 'Amanda_Palmer'), ('http://dbpedia.org/property/', 'spouse'), SparqlVar('uri'))]

ResourceType(Dbr_Amanda_Palmer,Entity)
0.63 PriorMatchScore(Amanda_Palmer,Amanda)

0.63 PriorMatchScore(Amanda_Palmer,Palmer)


ResourceType(Spouse,Class)
//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Amanda_Palmer dbp:spouse ?uri . }


//Give me all breeds of the German Shepherd dog. 
//[u'Give', u'me', u'all', u'breeds', u'of', u'the', u'German', u'Shepherd', u'dog', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(breeds,4,4)
PhraseIndex(of,5,5)
PhraseIndex(the,6,6)
PhraseIndex(German,7,7)
PhraseIndex(Shepherd,8,8)
PhraseIndex(dog,9,9)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Breeds,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(German,JJ)
PhrasePosTag(Shepherd,NNP)
PhrasePosTag(Dog,NN)
PhraseDepTag(Dog,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Breeds,dobj)
PhraseDepTag(Breeds,All,det)
PhraseDepTag(Breeds,Dog,nmod:of)
PhraseDepTag(Dog,Of,case)
PhraseDepTag(Dog,The,det)
PhraseDepTag(Dog,German,amod)
PhraseDepTag(Dog,Shepherd,compound)
//[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'breed'), ('http://dbpedia.org/resource/', 'German_Shepherd'))]

ResourceType(Breed,Class)
0.72 PriorMatchScore(Breed,Breeds)


ResourceType(Dbr_German_Shepherd,Entity)
0.57 PriorMatchScore(German_Shepherd,German)

0.69 PriorMatchScore(German_Shepherd,Shepherd)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbp:breed res:German_Shepherd . }


//Which cities does the Weser flow through? 
//[u'Which', u'cities', u'does', u'the', u'Weser', u'flow', u'through', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(cities,2,2)
PhraseIndex(does,3,3)
PhraseIndex(the,4,4)
PhraseIndex(Weser,5,5)
PhraseIndex(flow,6,6)
PhraseIndex(through,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Cities,NNS)
PhrasePosTag(Does,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Weser,NNP)
PhrasePosTag(Flow,NN)
PhrasePosTag(Through,IN)
PhraseDepTag(Through,Does,root)
PhraseDepTag(Cities,Which,det)
PhraseDepTag(Cities,Through,case)
PhraseDepTag(Does,Cities,nmod:through)
PhraseDepTag(Does,Flow,dobj)
PhraseDepTag(Flow,The,det)
PhraseDepTag(Flow,Weser,compound)
//[(('http://dbpedia.org/resource/', 'Weser'), ('http://dbpedia.org/ontology/', 'city'), SparqlVar('uri'))]

ResourceType(Dbr_Weser,Entity)
1.0 PriorMatchScore(Weser,Weser)


ResourceType(Dbo_City,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Weser dbo:city ?uri . }


//Which countries are connected by the Rhine? 
//[u'Which', u'countries', u'are', u'connected', u'by', u'the', u'Rhine', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(countries,2,2)
PhraseIndex(are,3,3)
PhraseIndex(connected,4,4)
PhraseIndex(by,5,5)
PhraseIndex(the,6,6)
PhraseIndex(Rhine,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Countries,NNS)
PhrasePosTag(Are,VBP)
PhrasePosTag(Connected,VBN)
PhrasePosTag(By,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Rhine,NNP)
PhraseDepTag(Rhine,Connected,root)
PhraseDepTag(Countries,Which,det)
PhraseDepTag(Connected,Countries,nsubjpass)
PhraseDepTag(Connected,Are,auxpass)
PhraseDepTag(Connected,Rhine,nmod:agent)
PhraseDepTag(Rhine,By,case)
PhraseDepTag(Rhine,The,det)
//[(('http://dbpedia.org/resource/', 'Rhine'), ('http://dbpedia.org/property/', 'country'), SparqlVar('string')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('uri'), ('http://www.w3.org/2000/01/rdf-schema#', 'label'), SparqlVar('string'))]

ResourceType(Dbr_Rhine,Entity)
1.0 PriorMatchScore(Rhine,Rhine)


ResourceType(Country,Class)
0.62 PriorMatchScore(Country,Countries)


ResourceType(Country,Class)
0.75 PriorMatchScore(Country,Countries)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Rhine dbp:country ?string . ?uri rdf:type dbo:Country . ?uri rdfs:label ?string . }


//Which professional surfers were born in Australia? 
//[u'Which', u'professional', u'surfers', u'were', u'born', u'in', u'Australia', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(professional,2,2)
PhraseIndex(surfers,3,3)
PhraseIndex(were,4,4)
PhraseIndex(born,5,5)
PhraseIndex(in,6,6)
PhraseIndex(Australia,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Professional,JJ)
PhrasePosTag(Surfers,NNS)
PhrasePosTag(Were,VBD)
PhrasePosTag(Born,VBN)
PhrasePosTag(In,IN)
PhrasePosTag(Australia,NNP)
PhraseDepTag(Australia,Born,root)
PhraseDepTag(Surfers,Which,det)
PhraseDepTag(Surfers,Professional,amod)
PhraseDepTag(Born,Surfers,nsubjpass)
PhraseDepTag(Born,Were,auxpass)
PhraseDepTag(Born,Australia,nmod:in)
PhraseDepTag(Australia,In,case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Surfing')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), ('http://dbpedia.org/resource/', 'Australia'))]

ResourceType(Dbo_Occupation,Relation)

ResourceType(Dbr_Surfing,Entity)
0.57 PriorMatchScore(Surfing,Surfers)


ResourceType(Dbo_Birthplace,Relation)

ResourceType(Dbr_Australia,Entity)
1.0 PriorMatchScore(Australia,Australia)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Surfing . ?uri dbo:birthPlace res:Australia . }


//What is the average temperature on Hawaii? 
//[u'What', u'is', u'the', u'average', u'temperature', u'on', u'Hawaii', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(average,4,4)
PhraseIndex(temperature,5,5)
PhraseIndex(on,6,6)
PhraseIndex(Hawaii,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Average,JJ)
PhrasePosTag(Temperature,NN)
PhrasePosTag(On,IN)
PhrasePosTag(Hawaii,NNP)
PhraseDepTag(Hawaii,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Temperature,nsubj)
PhraseDepTag(Temperature,The,det)
PhraseDepTag(Temperature,Average,amod)
PhraseDepTag(Temperature,Hawaii,nmod:on)
PhraseDepTag(Hawaii,On,case)
//In which UK city are the headquarters of the MI6? 
//[u'In', u'which', u'UK', u'city', u'are', u'the', u'headquarters', u'of', u'the', u'MI6', u'?']
PhraseIndex(In,1,1)
PhraseIndex(which,2,2)
PhraseIndex(UK,3,3)
PhraseIndex(city,4,4)
PhraseIndex(are,5,5)
PhraseIndex(the,6,6)
PhraseIndex(headquarters,7,7)
PhraseIndex(of,8,8)
PhraseIndex(the,9,9)
PhraseIndex(MI6,10,10)
PhrasePosTag(In,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(Uk,NNP)
PhrasePosTag(City,NN)
PhrasePosTag(Are,VBP)
PhrasePosTag(The,DT)
PhrasePosTag(Headquarters,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Mi6,NN)
PhraseDepTag(Mi6,Are,root)
PhraseDepTag(City,In,case)
PhraseDepTag(City,Which,det)
PhraseDepTag(City,Uk,compound)
PhraseDepTag(Are,City,nmod:in)
PhraseDepTag(Are,Headquarters,nsubj)
PhraseDepTag(Headquarters,The,det)
PhraseDepTag(Headquarters,Mi6,nmod:of)
PhraseDepTag(Mi6,Of,case)
PhraseDepTag(Mi6,The,det)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City')), (('http://dbpedia.org/resource/', 'Secret_Intelligence_Service'), ('http://dbpedia.org/ontology/', 'headquarter'), SparqlVar('uri'))]

ResourceType(City,Class)
1.0 PriorMatchScore(City,City)


ResourceType(Dbr_Secret_Intelligence_Service,Entity)

ResourceType(Dbo_Headquarter,Relation)
0.86 PriorMatchScore(Headquarter,Headquarters)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City . res:Secret_Intelligence_Service dbo:headquarter ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(Other,2,2)
PhraseIndex(Weapons,3,3)
PhraseIndex(Did,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Designer,6,6)
PhraseIndex(Of,7,7)
PhraseIndex(The,8,8)
PhraseIndex(Uzi,9,9)
PhraseIndex(Develop,10,10)

//[u'Which', u'Other', u'Weapons', u'Did', u'The', u'Designer', u'Of', u'The', u'Uzi', u'Develop']
//Which other weapons did the designer of the Uzi develop?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Other,JJ)
PhrasePosTag(Weapons,NNS)
PhrasePosTag(Did,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Designer,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Uzi,NNP)
PhrasePosTag(Develop,VB)
phraseDepTag(Develop,Develop,root)
phraseDepTag(Weapons,Which,det)
phraseDepTag(Weapons,Other,amod)
phraseDepTag(Designer,The,det)
phraseDepTag(Designer,Uzi,nmod:of)
phraseDepTag(Uzi,Of,case)
phraseDepTag(Uzi,The,det)
phraseDepTag(Develop,Weapons,dobj)
phraseDepTag(Develop,Did,aux)
phraseDepTag(Develop,Designer,nsubj)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Weapon')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Uzi'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Weapon')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Uzi'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x'))]

ResourceType(Weapon,Class)
0.92 PriorMatchScore(Weapon,Weapons)


ResourceType(Designer,Class)
0.87 PriorMatchScore(Designer,Designer)


ResourceType(Dbr_Uzi,Entity)
1.0 PriorMatchScore(Uzi,Uzi)


ResourceType(Designer,Class)
0.87 PriorMatchScore(Designer,Designer)


ResourceType(Weapon,Class)
0.92 PriorMatchScore(Weapon,Weapons)


ResourceType(Designer,Class)
0.87 PriorMatchScore(Designer,Designer)


ResourceType(Dbr_Uzi,Entity)
1.0 PriorMatchScore(Uzi,Uzi)


ResourceType(Designer,Class)
0.87 PriorMatchScore(Designer,Designer)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon . ?uri dbp:designer ?x . res:Uzi dbp:designer ?x . FILTER (?uri != res:Uzi) }


//Who created Goofy? 
//[u'Who', u'created', u'Goofy', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(created,2,2)
PhraseIndex(Goofy,3,3)
PhrasePosTag(Who,WP)
PhrasePosTag(Created,VBD)
PhrasePosTag(Goofy,NNP)
PhraseDepTag(Goofy,Created,root)
PhraseDepTag(Created,Who,nsubj)
PhraseDepTag(Created,Goofy,dobj)
//[(('http://dbpedia.org/resource/', 'Goofy'), ('http://dbpedia.org/ontology/', 'creator'), SparqlVar('uri'))]

ResourceType(Dbr_Goofy,Entity)
1.0 PriorMatchScore(Goofy,Goofy)


ResourceType(Dbo_Creator,Relation)
0.57 PriorMatchScore(Creator,Created)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Goofy dbo:creator ?uri . }


PhraseIndex(Was,1,1)
PhraseIndex(The,2,2)
PhraseIndex(Cuban,3,3)
PhraseIndex(Missile,4,4)
PhraseIndex(Crisis,5,5)
PhraseIndex(Earlier,6,6)
PhraseIndex(Than,7,7)
PhraseIndex(The,8,8)
PhraseIndex(Bay,9,9)
PhraseIndex(Of,10,10)
PhraseIndex(Pigs,11,11)
PhraseIndex(Invasion,12,12)

//[u'Was', u'The', u'Cuban', u'Missile', u'Crisis', u'Earlier', u'Than', u'The', u'Bay', u'Of', u'Pigs', u'Invasion']
//Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?

//La ligne est isolée 
PhrasePosTag(Was,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Cuban,JJ)
PhrasePosTag(Missile,NNP)
PhrasePosTag(Crisis,NNP)
PhrasePosTag(Earlier,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Bay,NNP)
PhrasePosTag(Of,IN)
PhrasePosTag(Pigs,NNP)
PhrasePosTag(Invasion,NNP)
phraseDepTag(Invasion,Earlier,root)
phraseDepTag(Crisis,The,det)
phraseDepTag(Crisis,Cuban,amod)
phraseDepTag(Crisis,Missile,compound)
phraseDepTag(Earlier,Was,cop)
phraseDepTag(Earlier,Crisis,nsubj)
phraseDepTag(Earlier,Bay,nmod:than)
phraseDepTag(Bay,Than,case)
phraseDepTag(Bay,The,det)
phraseDepTag(Bay,Invasion,nmod:of)
phraseDepTag(Invasion,Of,case)
phraseDepTag(Invasion,Pigs,compound)
//[(('http://dbpedia.org/resource/', 'Cuban_missile_crisis'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Bay_of_Pigs_Invasion'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('y')), (('http://dbpedia.org/resource/', 'Cuban_missile_crisis'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Bay_of_Pigs_Invasion'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('y'))]

ResourceType(Dbr_Cuban_Missile_Crisis,Entity)

ResourceType(Dbo_Date,Relation)

ResourceType(Dbr_Bay_Of_Pigs_Invasion,Entity)
0.57 PriorMatchScore(Bay_Of_Pigs_Invasion,Invasion)


ResourceType(Dbo_Date,Relation)

ResourceType(Dbr_Cuban_Missile_Crisis,Entity)

ResourceType(Dbo_Date,Relation)

ResourceType(Dbr_Bay_Of_Pigs_Invasion,Entity)
0.57 PriorMatchScore(Bay_Of_Pigs_Invasion,Invasion)


ResourceType(Dbo_Date,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Cuban_missile_crisis dbo:date ?x . res:Bay_of_Pigs_Invasion dbo:date ?y . FILTER (?x < ?y) }


//Give me all islands that belong to Japan. 
//[u'Give', u'me', u'all', u'islands', u'that', u'belong', u'to', u'Japan', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(islands,4,4)
PhraseIndex(that,5,5)
PhraseIndex(belong,6,6)
PhraseIndex(to,7,7)
PhraseIndex(Japan,8,8)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Islands,NNS)
PhrasePosTag(That,WDT)
PhrasePosTag(Belong,VBP)
PhrasePosTag(To,TO)
PhrasePosTag(Japan,NNP)
PhraseDepTag(Japan,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Islands,dobj)
PhraseDepTag(Islands,All,det)
PhraseDepTag(Islands,Belong,acl:relcl)
PhraseDepTag(Belong,That,nsubj)
PhraseDepTag(Belong,Japan,nmod:to)
PhraseDepTag(Japan,To,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Island')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Japan'))]

ResourceType(Island,Class)
0.92 PriorMatchScore(Island,Islands)


ResourceType(Dbo_Country,Relation)

ResourceType(Dbr_Japan,Entity)
1.0 PriorMatchScore(Japan,Japan)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Island . ?uri dbo:country res:Japan . }


//Who invented the zipper? 
//[u'Who', u'invented', u'the', u'zipper', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(invented,2,2)
PhraseIndex(the,3,3)
PhraseIndex(zipper,4,4)
PhrasePosTag(Who,WP)
PhrasePosTag(Invented,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Zipper,NN)
PhraseDepTag(Zipper,Invented,root)
PhraseDepTag(Invented,Who,nsubj)
PhraseDepTag(Invented,Zipper,dobj)
PhraseDepTag(Zipper,The,det)
//What is the ruling party in Lisbon? 
//[u'What', u'is', u'the', u'ruling', u'party', u'in', u'Lisbon', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(ruling,4,4)
PhraseIndex(party,5,5)
PhraseIndex(in,6,6)
PhraseIndex(Lisbon,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Ruling,VBG)
PhrasePosTag(Party,NN)
PhrasePosTag(In,IN)
PhrasePosTag(Lisbon,NNP)
PhraseDepTag(Lisbon,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Party,nsubj)
PhraseDepTag(Party,The,det)
PhraseDepTag(Party,Ruling,amod)
PhraseDepTag(Party,Lisbon,nmod:in)
PhraseDepTag(Lisbon,In,case)
//[(('http://dbpedia.org/resource/', 'Lisbon'), ('http://dbpedia.org/property/', 'leaderParty'), SparqlVar('uri'))]

ResourceType(Dbr_Lisbon,Entity)
1.0 PriorMatchScore(Lisbon,Lisbon)


ResourceType(Leaderparty,Class)
0.62 PriorMatchScore(Leaderparty,Party)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Lisbon dbp:leaderParty ?uri . }


//What are the nicknames of San Francisco? 
//[u'What', u'are', u'the', u'nicknames', u'of', u'San', u'Francisco', u'?']
PhraseIndex(What,1,1)
PhraseIndex(are,2,2)
PhraseIndex(the,3,3)
PhraseIndex(nicknames,4,4)
PhraseIndex(of,5,5)
PhraseIndex(San,6,6)
PhraseIndex(Francisco,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(Are,VBP)
PhrasePosTag(The,DT)
PhrasePosTag(Nicknames,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(San,NNP)
PhrasePosTag(Francisco,NNP)
PhraseDepTag(Francisco,What,root)
PhraseDepTag(What,Are,cop)
PhraseDepTag(What,Nicknames,nsubj)
PhraseDepTag(Nicknames,The,det)
PhraseDepTag(Nicknames,Francisco,nmod:of)
PhraseDepTag(Francisco,Of,case)
PhraseDepTag(Francisco,San,compound)
//[(('http://dbpedia.org/resource/', 'San_Francisco'), ('http://dbpedia.org/property/', 'nickname'), SparqlVar('string'))]

ResourceType(Dbr_San_Francisco,Entity)
0.81 PriorMatchScore(San_Francisco,Francisco)


ResourceType(Nickname,Class)
0.82 PriorMatchScore(Nickname,Nicknames)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:San_Francisco dbp:nickname ?string . }


//Which Greek goddesses dwelt on Mount Olympus? 
//[u'Which', u'Greek', u'goddesses', u'dwelt', u'on', u'Mount', u'Olympus', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Greek,2,2)
PhraseIndex(goddesses,3,3)
PhraseIndex(dwelt,4,4)
PhraseIndex(on,5,5)
PhraseIndex(Mount,6,6)
PhraseIndex(Olympus,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Greek,JJ)
PhrasePosTag(Goddesses,NNS)
PhrasePosTag(Dwelt,VBP)
PhrasePosTag(On,IN)
PhrasePosTag(Mount,NNP)
PhrasePosTag(Olympus,NNP)
PhraseDepTag(Olympus,Dwelt,root)
PhraseDepTag(Goddesses,Which,det)
PhraseDepTag(Goddesses,Greek,amod)
PhraseDepTag(Dwelt,Goddesses,nsubj)
PhraseDepTag(Dwelt,Olympus,nmod:on)
PhraseDepTag(Olympus,On,case)
PhraseDepTag(Olympus,Mount,compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'GreekGoddesses')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'abode'), ('http://dbpedia.org/resource/', 'Mount_Olympus'))]

ResourceType(GreekGoddesses,Class)
0.52 PriorMatchScore(GreekGoddesses,Greek)

0.78 PriorMatchScore(GreekGoddesses,Goddesses)


ResourceType(Abode,Class)

ResourceType(Dbr_Mount_Olympus,Entity)
0.55 PriorMatchScore(Mount_Olympus,Mount)

0.7 PriorMatchScore(Mount_Olympus,Olympus)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:GreekGoddesses . ?uri dbp:abode res:Mount_Olympus . }


//When were the Hells Angels founded? 
//[u'When', u'were', u'the', u'Hells', u'Angels', u'founded', u'?']
PhraseIndex(When,1,1)
PhraseIndex(were,2,2)
PhraseIndex(the,3,3)
PhraseIndex(Hells,4,4)
PhraseIndex(Angels,5,5)
PhraseIndex(founded,6,6)
PhrasePosTag(When,WRB)
PhrasePosTag(Were,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Hells,NNP)
PhrasePosTag(Angels,NNPS)
PhrasePosTag(Founded,VBN)
PhraseDepTag(Founded,Founded,root)
PhraseDepTag(Angels,The,det)
PhraseDepTag(Angels,Hells,compound)
PhraseDepTag(Founded,When,advmod)
PhraseDepTag(Founded,Were,auxpass)
PhraseDepTag(Founded,Angels,nsubjpass)
//[(('http://dbpedia.org/resource/', 'Hells_Angels'), ('http://dbpedia.org/property/', 'founded'), SparqlVar('date'))]

ResourceType(Dbr_Hells_Angels,Entity)
0.58 PriorMatchScore(Hells_Angels,Hells)

0.66 PriorMatchScore(Hells_Angels,Angels)


ResourceType(Founded,Class)
0.85 PriorMatchScore(Founded,Founded)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Hells_Angels dbp:founded ?date . }


//Give me all Apollo 14 astronauts. 
//[u'Give', u'me', u'all', u'Apollo', u'14', u'astronauts', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(Apollo,4,4)
PhraseIndex(14,5,5)
PhraseIndex(astronauts,6,6)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Apollo,NNP)
PhrasePosTag(14,CD)
PhrasePosTag(Astronauts,NNS)
PhraseDepTag(Astronauts,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Astronauts,dobj)
PhraseDepTag(Astronauts,All,det)
PhraseDepTag(Astronauts,Apollo,compound)
PhraseDepTag(Astronauts,14,nummod)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'mission'), ('http://dbpedia.org/resource/', 'Apollo_14'))]

ResourceType(Dbo_Mission,Relation)

ResourceType(Dbr_Apollo_14,Entity)
0.8 PriorMatchScore(Apollo_14,Apollo)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 . }


//What is the time zone of Salt Lake City? 
//[u'What', u'is', u'the', u'time', u'zone', u'of', u'Salt', u'Lake', u'City', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(time,4,4)
PhraseIndex(zone,5,5)
PhraseIndex(of,6,6)
PhraseIndex(Salt,7,7)
PhraseIndex(Lake,8,8)
PhraseIndex(City,9,9)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Time,NN)
PhrasePosTag(Zone,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Salt,NNP)
PhrasePosTag(Lake,NNP)
PhrasePosTag(City,NNP)
PhraseDepTag(City,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Zone,nsubj)
PhraseDepTag(Zone,The,det)
PhraseDepTag(Zone,Time,compound)
PhraseDepTag(Zone,City,nmod:of)
PhraseDepTag(City,Of,case)
PhraseDepTag(City,Salt,compound)
PhraseDepTag(City,Lake,compound)
//[(('http://dbpedia.org/resource/', 'Salt_Lake_City'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('uri'))]

ResourceType(Dbr_Salt_Lake_City,Entity)

ResourceType(Timezone,Class)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Salt_Lake_City dbp:timezone ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(U.S.,2,2)
PhraseIndex(States,3,3)
PhraseIndex(Are,4,4)
PhraseIndex(In,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Same,7,7)
PhraseIndex(Time,8,8)
PhraseIndex(Zone,9,9)
PhraseIndex(As,10,10)
PhraseIndex(Utah,11,11)

//[u'Which', u'U.S.', u'States', u'Are', u'In', u'The', u'Same', u'Time', u'Zone', u'As', u'Utah']
//Which U.S. states are in the same time zone as Utah?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(States,NNS)
PhrasePosTag(Are,VBP)
PhrasePosTag(In,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Same,JJ)
PhrasePosTag(Time,NN)
PhrasePosTag(Zone,NN)
PhrasePosTag(As,IN)
PhrasePosTag(Utah,NNP)
phraseDepTag(Utah,Are,root)
phraseDepTag(States,Which,det)
phraseDepTag(States,U.S.,compound)
phraseDepTag(Are,States,nsubj)
phraseDepTag(Are,Zone,nmod:in)
phraseDepTag(Zone,In,case)
phraseDepTag(Zone,The,det)
phraseDepTag(Zone,Same,amod)
phraseDepTag(Zone,Time,compound)
phraseDepTag(Zone,Utah,nmod:as)
phraseDepTag(Utah,As,case)
//[(('http://dbpedia.org/resource/', 'Utah'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Utah'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x'))]

ResourceType(Dbr_Utah,Entity)
1.0 PriorMatchScore(Utah,Utah)


ResourceType(Timezone,Class)

ResourceType(StatesOfTheUnitedStates,Class)

ResourceType(Timezone,Class)

ResourceType(Dbr_Utah,Entity)
1.0 PriorMatchScore(Utah,Utah)


ResourceType(Timezone,Class)

ResourceType(StatesOfTheUnitedStates,Class)

ResourceType(Timezone,Class)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:timezone ?x . FILTER (?uri != res:Utah) }


//Give me the capitals of all countries in Africa. 
//[u'Give', u'me', u'the', u'capitals', u'of', u'all', u'countries', u'in', u'Africa', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(the,3,3)
PhraseIndex(capitals,4,4)
PhraseIndex(of,5,5)
PhraseIndex(all,6,6)
PhraseIndex(countries,7,7)
PhraseIndex(in,8,8)
PhraseIndex(Africa,9,9)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(The,DT)
PhrasePosTag(Capitals,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(All,DT)
PhrasePosTag(Countries,NNS)
PhrasePosTag(In,IN)
PhrasePosTag(Africa,NNP)
PhraseDepTag(Africa,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Capitals,dobj)
PhraseDepTag(Capitals,The,det)
PhraseDepTag(Capitals,Countries,nmod:of)
PhraseDepTag(Countries,Of,case)
PhraseDepTag(Countries,All,det)
PhraseDepTag(Countries,Africa,nmod:in)
PhraseDepTag(Africa,In,case)
//[(SparqlVar('states'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'AfricanCountries')), (SparqlVar('states'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('uri'))]

ResourceType(AfricanCountries,Class)
0.72 PriorMatchScore(AfricanCountries,Countries)

0.54 PriorMatchScore(AfricanCountries,Africa)


ResourceType(Dbo_Capital,Relation)
0.8 PriorMatchScore(Capital,Capitals)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?states rdf:type yago:AfricanCountries . ?states dbo:capital ?uri . }


//Give me a list of all lakes in Denmark. 
//[u'Give', u'me', u'a', u'list', u'of', u'all', u'lakes', u'in', u'Denmark', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(a,3,3)
PhraseIndex(list,4,4)
PhraseIndex(of,5,5)
PhraseIndex(all,6,6)
PhraseIndex(lakes,7,7)
PhraseIndex(in,8,8)
PhraseIndex(Denmark,9,9)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(A,DT)
PhrasePosTag(List,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(All,DT)
PhrasePosTag(Lakes,NNS)
PhrasePosTag(In,IN)
PhrasePosTag(Denmark,NNP)
PhraseDepTag(Denmark,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,List,dobj)
PhraseDepTag(List,A,det)
PhraseDepTag(List,Lakes,nmod:of)
PhraseDepTag(Lakes,Of,case)
PhraseDepTag(Lakes,All,det)
PhraseDepTag(Lakes,Denmark,nmod:in)
PhraseDepTag(Denmark,In,case)
//[]
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { { ?uri rdf:type dbo:Lake . ?uri dbo:country res:Denmark . } UNION { ?uri rdf:type yago:LakesOfDenmark . } }


//How many space missions have there been? 
//[u'How', u'many', u'space', u'missions', u'have', u'there', u'been', u'?']
PhraseIndex(How,1,1)
PhraseIndex(many,2,2)
PhraseIndex(space,3,3)
PhraseIndex(missions,4,4)
PhraseIndex(have,5,5)
PhraseIndex(there,6,6)
PhraseIndex(been,7,7)
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Space,NN)
PhrasePosTag(Missions,NNS)
PhrasePosTag(Have,VBP)
PhrasePosTag(There,RB)
PhrasePosTag(Been,VBN)
PhraseDepTag(Been,Been,root)
PhraseDepTag(Many,How,advmod)
PhraseDepTag(Missions,Many,amod)
PhraseDepTag(Missions,Space,compound)
PhraseDepTag(Been,Missions,nsubj)
PhraseDepTag(Been,Have,aux)
PhraseDepTag(Been,There,advmod)
//[(('http://dbpedia.org/resource/', 'Aristotle'), ('http://dbpedia.org/ontology/', 'influencedBy'), ('http://dbpedia.org/resource/', 'Socrates'))]

ResourceType(Dbr_Aristotle,Entity)

ResourceType(Dbo_Influencedby,Relation)

ResourceType(Dbr_Socrates,Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Aristotle dbo:influencedBy res:Socrates . }


//Give me all Danish films. 
//[u'Give', u'me', u'all', u'Danish', u'films', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(Danish,4,4)
PhraseIndex(films,5,5)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Danish,JJ)
PhrasePosTag(Films,NNS)
PhraseDepTag(Films,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Films,dobj)
PhraseDepTag(Films,All,det)
PhraseDepTag(Films,Danish,amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Denmark'))]

ResourceType(Film,Class)
0.88 PriorMatchScore(Film,Films)


ResourceType(Dbo_Country,Relation)

ResourceType(Dbr_Denmark,Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:country res:Denmark . }


//Give me all launch pads operated by NASA. 
//[u'Give', u'me', u'all', u'launch', u'pads', u'operated', u'by', u'NASA', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(launch,4,4)
PhraseIndex(pads,5,5)
PhraseIndex(operated,6,6)
PhraseIndex(by,7,7)
PhraseIndex(NASA,8,8)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Launch,NN)
PhrasePosTag(Pads,NNS)
PhrasePosTag(Operated,VBN)
PhrasePosTag(By,IN)
PhrasePosTag(Nasa,NNP)
PhraseDepTag(Nasa,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Pads,dobj)
PhraseDepTag(Pads,All,det)
PhraseDepTag(Pads,Launch,compound)
PhraseDepTag(Pads,Operated,acl)
PhraseDepTag(Operated,Nasa,nmod:by)
PhraseDepTag(Nasa,By,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'LaunchPad')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'operator'), ('http://dbpedia.org/resource/', 'NASA'))]

ResourceType(LaunchPad,Class)
0.8 PriorMatchScore(LaunchPad,Launch)


ResourceType(Dbo_Operator,Relation)
0.62 PriorMatchScore(Operator,Operated)


ResourceType(Dbr_Nasa,Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:LaunchPad . ?uri dbo:operator res:NASA . }


//Which instruments does Cat Stevens play? 
//[u'Which', u'instruments', u'does', u'Cat', u'Stevens', u'play', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(instruments,2,2)
PhraseIndex(does,3,3)
PhraseIndex(Cat,4,4)
PhraseIndex(Stevens,5,5)
PhraseIndex(play,6,6)
PhrasePosTag(Which,WDT)
PhrasePosTag(Instruments,NNS)
PhrasePosTag(Does,VBZ)
PhrasePosTag(Cat,NNP)
PhrasePosTag(Stevens,NNP)
PhrasePosTag(Play,VB)
PhraseDepTag(Play,Play,root)
PhraseDepTag(Instruments,Which,det)
PhraseDepTag(Stevens,Cat,compound)
PhraseDepTag(Play,Instruments,dobj)
PhraseDepTag(Play,Does,aux)
PhraseDepTag(Play,Stevens,nsubj)
//[(('http://dbpedia.org/resource/', 'Cat_Stevens'), ('http://dbpedia.org/ontology/', 'instrument'), SparqlVar('uri'))]

ResourceType(Dbr_Cat_Stevens,Entity)
0.77 PriorMatchScore(Cat_Stevens,Stevens)


ResourceType(Dbo_Instrument,Relation)
0.85 PriorMatchScore(Instrument,Instruments)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cat_Stevens dbo:instrument ?uri . }


//Which ships were called after Benjamin Franklin? 
//[u'Which', u'ships', u'were', u'called', u'after', u'Benjamin', u'Franklin', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(ships,2,2)
PhraseIndex(were,3,3)
PhraseIndex(called,4,4)
PhraseIndex(after,5,5)
PhraseIndex(Benjamin,6,6)
PhraseIndex(Franklin,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Ships,NNS)
PhrasePosTag(Were,VBD)
PhrasePosTag(Called,VBN)
PhrasePosTag(After,IN)
PhrasePosTag(Benjamin,NNP)
PhrasePosTag(Franklin,NNP)
PhraseDepTag(Franklin,Called,root)
PhraseDepTag(Ships,Which,det)
PhraseDepTag(Called,Ships,nsubjpass)
PhraseDepTag(Called,Were,auxpass)
PhraseDepTag(Called,Franklin,nmod:after)
PhraseDepTag(Franklin,After,case)
PhraseDepTag(Franklin,Benjamin,compound)
//[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'shipNamesake'), ('http://dbpedia.org/resource/', 'Benjamin_Franklin'))]

ResourceType(Shipnamesake,Class)

ResourceType(Dbr_Benjamin_Franklin,Entity)
0.64 PriorMatchScore(Benjamin_Franklin,Benjamin)

0.64 PriorMatchScore(Benjamin_Franklin,Franklin)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri dbp:shipNamesake res:Benjamin_Franklin . }


//Who are the parents of the wife of Juan Carlos I? 
//[u'Who', u'are', u'the', u'parents', u'of', u'the', u'wife', u'of', u'Juan', u'Carlos', u'I', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(are,2,2)
PhraseIndex(the,3,3)
PhraseIndex(parents,4,4)
PhraseIndex(of,5,5)
PhraseIndex(the,6,6)
PhraseIndex(wife,7,7)
PhraseIndex(of,8,8)
PhraseIndex(Juan,9,9)
PhraseIndex(Carlos,10,10)
PhraseIndex(I,11,11)
PhrasePosTag(Who,WP)
PhrasePosTag(Are,VBP)
PhrasePosTag(The,DT)
PhrasePosTag(Parents,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Wife,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Juan,NNP)
PhrasePosTag(Carlos,NNP)
PhrasePosTag(I,PRP)
PhraseDepTag(I,Who,root)
PhraseDepTag(Who,Are,cop)
PhraseDepTag(Who,Parents,nsubj)
PhraseDepTag(Who,I,nsubj)
PhraseDepTag(Parents,The,det)
PhraseDepTag(Parents,Wife,nmod:of)
PhraseDepTag(Wife,Of,case)
PhraseDepTag(Wife,The,det)
PhraseDepTag(Wife,Carlos,nmod:of)
PhraseDepTag(Carlos,Of,case)
PhraseDepTag(Carlos,Juan,compound)
//[(('http://dbpedia.org/resource/', 'Juan_Carlos_I_of_Spain'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'parent'), SparqlVar('uri'))]

ResourceType(Dbr_Juan_Carlos_I_Of_Spain,Entity)

ResourceType(Dbo_Spouse,Relation)

ResourceType(Dbo_Parent,Relation)
0.76 PriorMatchScore(Parent,Parents)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Juan_Carlos_I_of_Spain dbo:spouse ?x . ?x dbo:parent ?uri . }


//How many employees does Google have? 
//[u'How', u'many', u'employees', u'does', u'Google', u'have', u'?']
PhraseIndex(How,1,1)
PhraseIndex(many,2,2)
PhraseIndex(employees,3,3)
PhraseIndex(does,4,4)
PhraseIndex(Google,5,5)
PhraseIndex(have,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Employees,NNS)
PhrasePosTag(Does,VBZ)
PhrasePosTag(Google,NNP)
PhrasePosTag(Have,VB)
PhraseDepTag(Have,Have,root)
PhraseDepTag(Many,How,advmod)
PhraseDepTag(Employees,Many,amod)
PhraseDepTag(Have,Employees,dobj)
PhraseDepTag(Have,Does,aux)
PhraseDepTag(Have,Google,nsubj)
//[(('http://dbpedia.org/resource/', 'Google'), ('http://dbpedia.org/ontology/', 'numberOfEmployees'), SparqlVar('num'))]

ResourceType(Dbr_Google,Entity)
1.0 PriorMatchScore(Google,Google)


ResourceType(Dbo_Numberofemployees,Relation)
0.69 PriorMatchScore(Numberofemployees,Employees)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?num WHERE { res:Google dbo:numberOfEmployees ?num . }


//Did Tesla win a nobel prize in physics? 
//[u'Did', u'Tesla', u'win', u'a', u'nobel', u'prize', u'in', u'physics', u'?']
PhraseIndex(Did,1,1)
PhraseIndex(Tesla,2,2)
PhraseIndex(win,3,3)
PhraseIndex(a,4,4)
PhraseIndex(nobel,5,5)
PhraseIndex(prize,6,6)
PhraseIndex(in,7,7)
PhraseIndex(physics,8,8)
PhrasePosTag(Did,VBD)
PhrasePosTag(Tesla,NNP)
PhrasePosTag(Win,VB)
PhrasePosTag(A,DT)
PhrasePosTag(Nobel,JJ)
PhrasePosTag(Prize,NN)
PhrasePosTag(In,IN)
PhrasePosTag(Physics,NNS)
PhraseDepTag(Physics,Win,root)
PhraseDepTag(Win,Did,aux)
PhraseDepTag(Win,Tesla,nsubj)
PhraseDepTag(Win,Prize,dobj)
PhraseDepTag(Win,Physics,nmod:in)
PhraseDepTag(Prize,A,det)
PhraseDepTag(Prize,Nobel,amod)
PhraseDepTag(Physics,In,case)
//[(('http://dbpedia.org/resource/', 'Nikola_Tesla'), ('http://dbpedia.org/ontology/', 'award'), ('http://dbpedia.org/resource/', 'Nobel_Prize_in_Physics'))]

ResourceType(Dbr_Nikola_Tesla,Entity)
0.58 PriorMatchScore(Nikola_Tesla,Tesla)


ResourceType(Dbo_Award,Relation)

ResourceType(Dbr_Nobel_Prize_In_Physics,Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Nikola_Tesla dbo:award res:Nobel_Prize_in_Physics . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Cities,4,4)
PhraseIndex(In,5,5)
PhraseIndex(New,6,6)
PhraseIndex(Jersey,7,7)
PhraseIndex(With,8,8)
PhraseIndex(More,9,9)
PhraseIndex(Than,10,10)
PhraseIndex(100000,11,11)
PhraseIndex(Inhabitants,12,12)

//[u'Give', u'Me', u'All', u'Cities', u'In', u'New', u'Jersey', u'With', u'More', u'Than', u'100000', u'Inhabitants']
//Give me all cities in New Jersey with more than 100000 inhabitants.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Cities,NNS)
PhrasePosTag(In,IN)
PhrasePosTag(New,NNP)
PhrasePosTag(Jersey,NNP)
PhrasePosTag(With,IN)
PhrasePosTag(More,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(100000,CD)
PhrasePosTag(Inhabitants,NNS)
phraseDepTag(Inhabitants,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Cities,dobj)
phraseDepTag(Cities,All,det)
phraseDepTag(Cities,Jersey,nmod:in)
phraseDepTag(Jersey,In,case)
phraseDepTag(Jersey,New,compound)
phraseDepTag(Jersey,Inhabitants,nmod:with)
phraseDepTag(More,Than,mwe)
phraseDepTag(100000,More,advmod)
phraseDepTag(Inhabitants,With,case)
phraseDepTag(Inhabitants,100000,nummod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'isPartOf'), ('http://dbpedia.org/resource/', 'New_Jersey')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('inhabitants')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'isPartOf'), ('http://dbpedia.org/resource/', 'New_Jersey')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('inhabitants'))]

ResourceType(City,Class)
0.6 PriorMatchScore(City,Cities)


ResourceType(Dbo_Ispartof,Relation)

ResourceType(Dbr_New_Jersey,Entity)
0.75 PriorMatchScore(New_Jersey,Jersey)


ResourceType(Dbo_Populationtotal,Relation)

ResourceType(City,Class)
0.6 PriorMatchScore(City,Cities)


ResourceType(Dbo_Ispartof,Relation)

ResourceType(Dbr_New_Jersey,Entity)
0.75 PriorMatchScore(New_Jersey,Jersey)


ResourceType(Dbo_Populationtotal,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City . ?uri dbo:isPartOf res:New_Jersey . ?uri dbo:populationTotal ?inhabitants . FILTER (?inhabitants > 100000) . }


//Is Michelle Obama the wife of Barack Obama? 
//[u'Is', u'Michelle', u'Obama', u'the', u'wife', u'of', u'Barack', u'Obama', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(Michelle,2,2)
PhraseIndex(Obama,3,3)
PhraseIndex(the,4,4)
PhraseIndex(wife,5,5)
PhraseIndex(of,6,6)
PhraseIndex(Barack,7,7)
PhraseIndex(Obama,8,8)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Michelle,NNP)
PhrasePosTag(Obama,NNP)
PhrasePosTag(The,DT)
PhrasePosTag(Wife,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Barack,NNP)
PhrasePosTag(Obama,NNP)
PhraseDepTag(Obama,Wife,root)
PhraseDepTag(Obama,Michelle,compound)
PhraseDepTag(Wife,Is,cop)
PhraseDepTag(Wife,Obama,nsubj)
PhraseDepTag(Wife,The,det)
PhraseDepTag(Wife,Obama,nmod:of)
PhraseDepTag(Obama,Of,case)
PhraseDepTag(Obama,Barack,compound)
//[(('http://dbpedia.org/resource/', 'Barack_Obama'), ('http://dbpedia.org/ontology/', 'spouse'), ('http://dbpedia.org/resource/', 'Michelle_Obama'))]

ResourceType(Dbr_Barack_Obama,Entity)
0.58 PriorMatchScore(Barack_Obama,Obama)

0.66 PriorMatchScore(Barack_Obama,Barack)

0.58 PriorMatchScore(Barack_Obama,Obama)


ResourceType(Dbo_Spouse,Relation)

ResourceType(Dbr_Michelle_Obama,Entity)
0.72 PriorMatchScore(Michelle_Obama,Michelle)

0.52 PriorMatchScore(Michelle_Obama,Obama)

0.52 PriorMatchScore(Michelle_Obama,Obama)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Barack_Obama dbo:spouse res:Michelle_Obama . }


//When was the Statue of Liberty built? 
//[u'When', u'was', u'the', u'Statue', u'of', u'Liberty', u'built', u'?']
PhraseIndex(When,1,1)
PhraseIndex(was,2,2)
PhraseIndex(the,3,3)
PhraseIndex(Statue,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Liberty,6,6)
PhraseIndex(built,7,7)
PhrasePosTag(When,WRB)
PhrasePosTag(Was,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Statue,NNP)
PhrasePosTag(Of,IN)
PhrasePosTag(Liberty,NNP)
PhrasePosTag(Built,VBN)
PhraseDepTag(Built,Built,root)
PhraseDepTag(Statue,The,det)
PhraseDepTag(Statue,Liberty,nmod:of)
PhraseDepTag(Liberty,Of,case)
PhraseDepTag(Built,When,advmod)
PhraseDepTag(Built,Was,auxpass)
PhraseDepTag(Built,Statue,nsubjpass)
//[(('http://dbpedia.org/resource/', 'Statue_of_Liberty'), ('http://dbpedia.org/property/', 'beginningDate'), SparqlVar('date'))]

ResourceType(Dbr_Statue_Of_Liberty,Entity)
0.52 PriorMatchScore(Statue_Of_Liberty,Statue)

0.58 PriorMatchScore(Statue_Of_Liberty,Liberty)


ResourceType(Beginningdate,Class)
//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Statue_of_Liberty dbp:beginningDate ?date . }


//In which U.S. state is Fort Knox located? 
//[u'In', u'which', u'U.S.', u'state', u'is', u'Fort', u'Knox', u'located', u'?']
PhraseIndex(In,1,1)
PhraseIndex(which,2,2)
PhraseIndex(U.S.,3,3)
PhraseIndex(state,4,4)
PhraseIndex(is,5,5)
PhraseIndex(Fort,6,6)
PhraseIndex(Knox,7,7)
PhraseIndex(located,8,8)
PhrasePosTag(In,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(State,NN)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Fort,NNP)
PhrasePosTag(Knox,NNP)
PhrasePosTag(Located,JJ)
PhraseDepTag(Located,Located,root)
PhraseDepTag(State,In,case)
PhraseDepTag(State,Which,det)
PhraseDepTag(State,U.S.,compound)
PhraseDepTag(Knox,Fort,compound)
PhraseDepTag(Located,State,nmod:in)
PhraseDepTag(Located,Is,cop)
PhraseDepTag(Located,Knox,nsubj)
//[(('http://dbpedia.org/resource/', 'Fort_Knox'), ('http://dbpedia.org/property/', 'location'), SparqlVar('uri')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'United_States'))]

ResourceType(Dbr_Fort_Knox,Entity)
0.61 PriorMatchScore(Fort_Knox,Fort)

0.61 PriorMatchScore(Fort_Knox,Knox)


ResourceType(Location,Class)
0.53 PriorMatchScore(Location,Located)


ResourceType(Dbo_Country,Relation)

ResourceType(Dbr_United_States,Entity)
0.55 PriorMatchScore(United_States,State)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Fort_Knox dbp:location ?uri . ?uri dbo:country res:United_States . }


//How many children did Benjamin Franklin have? 
//[u'How', u'many', u'children', u'did', u'Benjamin', u'Franklin', u'have', u'?']
PhraseIndex(How,1,1)
PhraseIndex(many,2,2)
PhraseIndex(children,3,3)
PhraseIndex(did,4,4)
PhraseIndex(Benjamin,5,5)
PhraseIndex(Franklin,6,6)
PhraseIndex(have,7,7)
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Children,NNS)
PhrasePosTag(Did,VBD)
PhrasePosTag(Benjamin,NNP)
PhrasePosTag(Franklin,NNP)
PhrasePosTag(Have,VB)
PhraseDepTag(Have,Have,root)
PhraseDepTag(Many,How,advmod)
PhraseDepTag(Children,Many,amod)
PhraseDepTag(Franklin,Benjamin,compound)
PhraseDepTag(Have,Children,dobj)
PhraseDepTag(Have,Did,aux)
PhraseDepTag(Have,Franklin,nsubj)
//[(('http://dbpedia.org/resource/', 'Michael_Jackson'), ('http://dbpedia.org/ontology/', 'deathDate'), SparqlVar('date'))]

ResourceType(Dbr_Michael_Jackson,Entity)

ResourceType(Dbo_Deathdate,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Michael_Jackson dbo:deathDate ?date . }


PhraseIndex(Which,1,1)
PhraseIndex(Chess,2,2)
PhraseIndex(Players,3,3)
PhraseIndex(Died,4,4)
PhraseIndex(In,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Same,7,7)
PhraseIndex(Place,8,8)
PhraseIndex(They,9,9)
PhraseIndex(Were,10,10)
PhraseIndex(Born,11,11)
PhraseIndex(In,12,12)

//[u'Which', u'Chess', u'Players', u'Died', u'In', u'The', u'Same', u'Place', u'They', u'Were', u'Born', u'In']
//Which Chess players died in the same place they were born in?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Chess,NN)
PhrasePosTag(Players,NNS)
PhrasePosTag(Died,VBD)
PhrasePosTag(In,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Same,JJ)
PhrasePosTag(Place,NN)
PhrasePosTag(They,PRP)
PhrasePosTag(Were,VBD)
PhrasePosTag(Born,VBN)
PhrasePosTag(In,IN)
phraseDepTag(In,Born,root)
phraseDepTag(Players,Chess,compound)
phraseDepTag(Died,Which,dobj)
phraseDepTag(Died,Players,nsubj)
phraseDepTag(Died,Place,nmod:in)
phraseDepTag(Place,In,case)
phraseDepTag(Place,The,det)
phraseDepTag(Place,Same,amod)
phraseDepTag(Born,Died,advcl)
phraseDepTag(Born,They,nsubjpass)
phraseDepTag(Born,Were,auxpass)
phraseDepTag(Born,In,nmod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'ChessPlayer')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), SparqlVar('x')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'deathPlace'), SparqlVar('y')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'ChessPlayer')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), SparqlVar('x')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'deathPlace'), SparqlVar('y'))]

ResourceType(ChessPlayer,Class)
0.62 PriorMatchScore(ChessPlayer,Chess)

0.66 PriorMatchScore(ChessPlayer,Players)


ResourceType(Dbo_Birthplace,Relation)
0.66 PriorMatchScore(Birthplace,Place)


ResourceType(Dbo_Deathplace,Relation)
0.66 PriorMatchScore(Deathplace,Place)


ResourceType(ChessPlayer,Class)
0.62 PriorMatchScore(ChessPlayer,Chess)

0.66 PriorMatchScore(ChessPlayer,Players)


ResourceType(Dbo_Birthplace,Relation)
0.66 PriorMatchScore(Birthplace,Place)


ResourceType(Dbo_Deathplace,Relation)
0.66 PriorMatchScore(Deathplace,Place)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:ChessPlayer . ?uri dbo:birthPlace ?x . ?uri dbo:deathPlace ?y . FILTER (?x = ?y) . }


//List the children of Margaret Thatcher. 
//[u'List', u'the', u'children', u'of', u'Margaret', u'Thatcher', u'.']
PhraseIndex(List,1,1)
PhraseIndex(the,2,2)
PhraseIndex(children,3,3)
PhraseIndex(of,4,4)
PhraseIndex(Margaret,5,5)
PhraseIndex(Thatcher,6,6)
PhrasePosTag(List,VB)
PhrasePosTag(The,DT)
PhrasePosTag(Children,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(Margaret,NNP)
PhrasePosTag(Thatcher,NNP)
PhraseDepTag(Thatcher,List,root)
PhraseDepTag(List,Children,dobj)
PhraseDepTag(Children,The,det)
PhraseDepTag(Children,Thatcher,nmod:of)
PhraseDepTag(Thatcher,Of,case)
PhraseDepTag(Thatcher,Margaret,compound)
//[(('http://dbpedia.org/resource/', 'Margaret_Thatcher'), ('http://dbpedia.org/ontology/', 'child'), SparqlVar('uri'))]

ResourceType(Dbr_Margaret_Thatcher,Entity)
0.64 PriorMatchScore(Margaret_Thatcher,Margaret)

0.64 PriorMatchScore(Margaret_Thatcher,Thatcher)


ResourceType(Dbo_Child,Relation)
0.61 PriorMatchScore(Child,Children)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Margaret_Thatcher dbo:child ?uri . }


//Who was called Scarface? 
//[u'Who', u'was', u'called', u'Scarface', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(was,2,2)
PhraseIndex(called,3,3)
PhraseIndex(Scarface,4,4)
PhrasePosTag(Who,WP)
PhrasePosTag(Was,VBD)
PhrasePosTag(Called,VBN)
PhrasePosTag(Scarface,NNP)
PhraseDepTag(Scarface,Called,root)
PhraseDepTag(Called,Who,nsubjpass)
PhraseDepTag(Called,Was,auxpass)
PhraseDepTag(Called,Scarface,dobj)
//[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'nickname'), ('http://dbpedia.org/resource/', 'Scarface'))]

ResourceType(Nickname,Class)

ResourceType(Dbr_Scarface,Entity)
1.0 PriorMatchScore(Scarface,Scarface)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbp:nickname res:Scarface . }


//Was Margaret Thatcher a chemist? 
//[u'Was', u'Margaret', u'Thatcher', u'a', u'chemist', u'?']
PhraseIndex(Was,1,1)
PhraseIndex(Margaret,2,2)
PhraseIndex(Thatcher,3,3)
PhraseIndex(a,4,4)
PhraseIndex(chemist,5,5)
PhrasePosTag(Was,VBD)
PhrasePosTag(Margaret,NNP)
PhrasePosTag(Thatcher,NNP)
PhrasePosTag(A,DT)
PhrasePosTag(Chemist,NN)
PhraseDepTag(Chemist,Chemist,root)
PhraseDepTag(Thatcher,Margaret,compound)
PhraseDepTag(Chemist,Was,cop)
PhraseDepTag(Chemist,Thatcher,nsubj)
PhraseDepTag(Chemist,A,det)
//[(('http://dbpedia.org/resource/', 'Margaret_Thatcher'), ('http://dbpedia.org/ontology/', 'profession'), ('http://dbpedia.org/resource/', 'Chemist'))]

ResourceType(Dbr_Margaret_Thatcher,Entity)
0.64 PriorMatchScore(Margaret_Thatcher,Margaret)

0.64 PriorMatchScore(Margaret_Thatcher,Thatcher)


ResourceType(Dbo_Profession,Relation)

ResourceType(Dbr_Chemist,Entity)
1.0 PriorMatchScore(Chemist,Chemist)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> ASK WHERE { res:Margaret_Thatcher dbo:profession res:Chemist . }


//Was Marc Chagall a jew? 
//[u'Was', u'Marc', u'Chagall', u'a', u'jew', u'?']
PhraseIndex(Was,1,1)
PhraseIndex(Marc,2,2)
PhraseIndex(Chagall,3,3)
PhraseIndex(a,4,4)
PhraseIndex(jew,5,5)
PhrasePosTag(Was,VBD)
PhrasePosTag(Marc,NNP)
PhrasePosTag(Chagall,NNP)
PhrasePosTag(A,DT)
PhrasePosTag(Jew,NN)
PhraseDepTag(Jew,Jew,root)
PhraseDepTag(Chagall,Marc,compound)
PhraseDepTag(Jew,Was,cop)
PhraseDepTag(Jew,Chagall,nsubj)
PhraseDepTag(Jew,A,det)
//[(('http://dbpedia.org/resource/', 'The_Scream'), ('http://dbpedia.org/ontology/', 'museum'), SparqlVar('uri'))]

ResourceType(Dbr_The_Scream,Entity)

ResourceType(Dbo_Museum,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Scream dbo:museum ?uri . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Books,4,4)
PhraseIndex(By,5,5)
PhraseIndex(William,6,6)
PhraseIndex(Goldman,7,7)
PhraseIndex(With,8,8)
PhraseIndex(More,9,9)
PhraseIndex(Than,10,10)
PhraseIndex(300,11,11)
PhraseIndex(Pages,12,12)

//[u'Give', u'Me', u'All', u'Books', u'By', u'William', u'Goldman', u'With', u'More', u'Than', u'300', u'Pages']
//Give me all books by William Goldman with more than 300 pages.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Books,NNS)
PhrasePosTag(By,IN)
PhrasePosTag(William,NNP)
PhrasePosTag(Goldman,NNP)
PhrasePosTag(With,IN)
PhrasePosTag(More,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(300,CD)
PhrasePosTag(Pages,NNS)
phraseDepTag(Pages,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Books,dobj)
phraseDepTag(Give,Goldman,nmod:by)
phraseDepTag(Books,All,det)
phraseDepTag(Goldman,By,case)
phraseDepTag(Goldman,William,compound)
phraseDepTag(Goldman,Pages,nmod:with)
phraseDepTag(More,Than,mwe)
phraseDepTag(300,More,advmod)
phraseDepTag(Pages,With,case)
phraseDepTag(Pages,300,nummod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Book')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'author'), ('http://dbpedia.org/resource/', 'William_Goldman')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'numberOfPages'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Book')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'author'), ('http://dbpedia.org/resource/', 'William_Goldman')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'numberOfPages'), SparqlVar('x'))]

ResourceType(Book,Class)
0.88 PriorMatchScore(Book,Books)


ResourceType(Dbo_Author,Relation)

ResourceType(Dbr_William_Goldman,Entity)
0.63 PriorMatchScore(William_Goldman,William)

0.63 PriorMatchScore(William_Goldman,Goldman)


ResourceType(Dbo_Numberofpages,Relation)
0.55 PriorMatchScore(Numberofpages,Pages)


ResourceType(Book,Class)
0.88 PriorMatchScore(Book,Books)


ResourceType(Dbo_Author,Relation)

ResourceType(Dbr_William_Goldman,Entity)
0.63 PriorMatchScore(William_Goldman,William)

0.63 PriorMatchScore(William_Goldman,Goldman)


ResourceType(Dbo_Numberofpages,Relation)
0.55 PriorMatchScore(Numberofpages,Pages)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book . ?uri dbo:author res:William_Goldman . ?uri dbo:numberOfPages ?x . FILTER (?x > 300) }


PhraseIndex(Which,1,1)
PhraseIndex(Books,2,2)
PhraseIndex(By,3,3)
PhraseIndex(Kerouac,4,4)
PhraseIndex(Were,5,5)
PhraseIndex(Published,6,6)
PhraseIndex(By,7,7)
PhraseIndex(Viking,8,8)
PhraseIndex(Press,9,9)

//[u'Which', u'Books', u'By', u'Kerouac', u'Were', u'Published', u'By', u'Viking', u'Press']
//Which books by Kerouac were published by Viking Press?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Books,NNS)
PhrasePosTag(By,IN)
PhrasePosTag(Kerouac,NNP)
PhrasePosTag(Were,VBD)
PhrasePosTag(Published,VBN)
PhrasePosTag(By,IN)
PhrasePosTag(Viking,JJ)
PhrasePosTag(Press,NNP)
phraseDepTag(Press,Published,root)
phraseDepTag(Books,Which,det)
phraseDepTag(Books,Kerouac,nmod:by)
phraseDepTag(Kerouac,By,case)
phraseDepTag(Published,Books,nsubjpass)
phraseDepTag(Published,Were,auxpass)
phraseDepTag(Published,Press,nmod:agent)
phraseDepTag(Press,By,case)
phraseDepTag(Press,Viking,amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Book')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'publisher'), ('http://dbpedia.org/resource/', 'Viking_Press')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'author'), ('http://dbpedia.org/resource/', 'Jack_Kerouac'))]

ResourceType(Book,Class)
0.88 PriorMatchScore(Book,Books)


ResourceType(Dbo_Publisher,Relation)
0.77 PriorMatchScore(Publisher,Published)


ResourceType(Dbr_Viking_Press,Entity)
0.66 PriorMatchScore(Viking_Press,Viking)

0.58 PriorMatchScore(Viking_Press,Press)


ResourceType(Dbo_Author,Relation)

ResourceType(Dbr_Jack_Kerouac,Entity)
0.73 PriorMatchScore(Jack_Kerouac,Kerouac)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book . ?uri dbo:publisher res:Viking_Press . ?uri dbo:author res:Jack_Kerouac . }


//Give me a list of all American inventions. 
//[u'Give', u'me', u'a', u'list', u'of', u'all', u'American', u'inventions', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(a,3,3)
PhraseIndex(list,4,4)
PhraseIndex(of,5,5)
PhraseIndex(all,6,6)
PhraseIndex(American,7,7)
PhraseIndex(inventions,8,8)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(A,DT)
PhrasePosTag(List,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(All,DT)
PhrasePosTag(American,JJ)
PhrasePosTag(Inventions,NNS)
PhraseDepTag(Inventions,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,List,dobj)
PhraseDepTag(List,A,det)
PhraseDepTag(List,Inventions,nmod:of)
PhraseDepTag(Inventions,Of,case)
PhraseDepTag(Inventions,All,det)
PhraseDepTag(Inventions,American,amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'AmericanInventions'))]

ResourceType(AmericanInventions,Class)
0.61 PriorMatchScore(AmericanInventions,American)

0.71 PriorMatchScore(AmericanInventions,Inventions)

//PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:AmericanInventions . }


//How high is the Mount Everest? 
//[u'How', u'high', u'is', u'the', u'Mount', u'Everest', u'?']
PhraseIndex(How,1,1)
PhraseIndex(high,2,2)
PhraseIndex(is,3,3)
PhraseIndex(the,4,4)
PhraseIndex(Mount,5,5)
PhraseIndex(Everest,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(High,JJ)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Mount,NNP)
PhrasePosTag(Everest,NNP)
PhraseDepTag(Everest,Is,root)
PhraseDepTag(High,How,advmod)
PhraseDepTag(Is,High,dep)
PhraseDepTag(Is,Everest,nsubj)
PhraseDepTag(Everest,The,det)
PhraseDepTag(Everest,Mount,compound)
//[(('http://dbpedia.org/resource/', 'Mount_Everest'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('num'))]

ResourceType(Dbr_Mount_Everest,Entity)
0.55 PriorMatchScore(Mount_Everest,Mount)

0.7 PriorMatchScore(Mount_Everest,Everest)


ResourceType(Dbo_Elevation,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Mount_Everest dbo:elevation ?num. }


//Who created the comic Captain America? 
//[u'Who', u'created', u'the', u'comic', u'Captain', u'America', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(created,2,2)
PhraseIndex(the,3,3)
PhraseIndex(comic,4,4)
PhraseIndex(Captain,5,5)
PhraseIndex(America,6,6)
PhrasePosTag(Who,WP)
PhrasePosTag(Created,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Comic,JJ)
PhrasePosTag(Captain,NNP)
PhrasePosTag(America,NNP)
PhraseDepTag(America,Created,root)
PhraseDepTag(Created,Who,nsubj)
PhraseDepTag(Created,America,dobj)
PhraseDepTag(America,The,det)
PhraseDepTag(America,Comic,amod)
PhraseDepTag(America,Captain,compound)
//[(('http://dbpedia.org/resource/', 'Captain_America'), ('http://dbpedia.org/ontology/', 'creator'), SparqlVar('uri'))]

ResourceType(Dbr_Captain_America,Entity)
0.63 PriorMatchScore(Captain_America,Captain)

0.63 PriorMatchScore(Captain_America,America)


ResourceType(Dbo_Creator,Relation)
0.57 PriorMatchScore(Creator,Created)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri . }


//How many people live in the capital of Australia? 
//[u'How', u'many', u'people', u'live', u'in', u'the', u'capital', u'of', u'Australia', u'?']
PhraseIndex(How,1,1)
PhraseIndex(many,2,2)
PhraseIndex(people,3,3)
PhraseIndex(live,4,4)
PhraseIndex(in,5,5)
PhraseIndex(the,6,6)
PhraseIndex(capital,7,7)
PhraseIndex(of,8,8)
PhraseIndex(Australia,9,9)
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(People,NNS)
PhrasePosTag(Live,VBP)
PhrasePosTag(In,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Capital,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Australia,NNP)
PhraseDepTag(Australia,Live,root)
PhraseDepTag(Many,How,advmod)
PhraseDepTag(People,Many,amod)
PhraseDepTag(Live,People,nsubj)
PhraseDepTag(Live,Capital,nmod:in)
PhraseDepTag(Capital,In,case)
PhraseDepTag(Capital,The,det)
PhraseDepTag(Capital,Australia,nmod:of)
PhraseDepTag(Australia,Of,case)
//[(('http://dbpedia.org/resource/', 'Australia'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('num'))]

ResourceType(Dbr_Australia,Entity)
1.0 PriorMatchScore(Australia,Australia)


ResourceType(Dbo_Capital,Relation)
0.85 PriorMatchScore(Capital,Capital)


ResourceType(Dbo_Populationtotal,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num . }


//What is the largest city in Australia? 
//[u'What', u'is', u'the', u'largest', u'city', u'in', u'Australia', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(largest,4,4)
PhraseIndex(city,5,5)
PhraseIndex(in,6,6)
PhraseIndex(Australia,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Largest,JJS)
PhrasePosTag(City,NN)
PhrasePosTag(In,IN)
PhrasePosTag(Australia,NNP)
PhraseDepTag(Australia,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,City,nsubj)
PhraseDepTag(City,The,det)
PhraseDepTag(City,Largest,amod)
PhraseDepTag(City,Australia,nmod:in)
PhraseDepTag(Australia,In,case)
//[(('http://dbpedia.org/resource/', 'Australia'), ('http://dbpedia.org/ontology/', 'largestCity'), SparqlVar('uri'))]

ResourceType(Dbr_Australia,Entity)
1.0 PriorMatchScore(Australia,Australia)


ResourceType(Dbo_Largestcity,Relation)
0.66 PriorMatchScore(Largestcity,Largest)

0.53 PriorMatchScore(Largestcity,City)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Australia dbo:largestCity ?uri . }


//Who composed the music for Harold and Maude? 
//[u'Who', u'composed', u'the', u'music', u'for', u'Harold', u'and', u'Maude', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(composed,2,2)
PhraseIndex(the,3,3)
PhraseIndex(music,4,4)
PhraseIndex(for,5,5)
PhraseIndex(Harold,6,6)
PhraseIndex(and,7,7)
PhraseIndex(Maude,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(Composed,VBN)
PhrasePosTag(The,DT)
PhrasePosTag(Music,NN)
PhrasePosTag(For,IN)
PhrasePosTag(Harold,NNP)
PhrasePosTag(And,CC)
PhrasePosTag(Maude,NNP)
PhraseDepTag(Maude,Composed,root)
PhraseDepTag(Composed,Who,nsubj)
PhraseDepTag(Composed,Music,dobj)
PhraseDepTag(Music,The,det)
PhraseDepTag(Music,Harold,nmod:for)
PhraseDepTag(Music,Maude,nmod:for)
PhraseDepTag(Harold,For,case)
PhraseDepTag(Harold,And,cc)
//[(('http://dbpedia.org/resource/', 'Harold_and_Maude'), ('http://dbpedia.org/ontology/', 'musicComposer'), SparqlVar('uri'))]

ResourceType(Dbr_Harold_And_Maude,Entity)
0.54 PriorMatchScore(Harold_And_Maude,Harold)


ResourceType(Dbo_Musiccomposer,Relation)
0.66 PriorMatchScore(Musiccomposer,Composed)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Harold_and_Maude dbo:musicComposer ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(Films,2,2)
PhraseIndex(Starring,3,3)
PhraseIndex(Clint,4,4)
PhraseIndex(Eastwood,5,5)
PhraseIndex(Did,6,6)
PhraseIndex(He,7,7)
PhraseIndex(Direct,8,8)
PhraseIndex(Himself,9,9)

//[u'Which', u'Films', u'Starring', u'Clint', u'Eastwood', u'Did', u'He', u'Direct', u'Himself']
//Which films starring Clint Eastwood did he direct himself?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Films,NNS)
PhrasePosTag(Starring,VBG)
PhrasePosTag(Clint,NNP)
PhrasePosTag(Eastwood,NNP)
PhrasePosTag(Did,VBD)
PhrasePosTag(He,PRP)
PhrasePosTag(Direct,VB)
PhrasePosTag(Himself,PRP)
phraseDepTag(Himself,Direct,root)
phraseDepTag(Films,Which,det)
phraseDepTag(Films,Eastwood,nmod:starring)
phraseDepTag(Eastwood,Starring,case)
phraseDepTag(Eastwood,Clint,compound)
phraseDepTag(Direct,Films,dep)
phraseDepTag(Direct,Did,aux)
phraseDepTag(Direct,He,nsubj)
phraseDepTag(Direct,Himself,dobj)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Clint_Eastwood')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Clint_Eastwood'))]

ResourceType(Dbo_Director,Relation)
0.71 PriorMatchScore(Director,Direct)


ResourceType(Dbr_Clint_Eastwood,Entity)
0.52 PriorMatchScore(Clint_Eastwood,Clint)

0.72 PriorMatchScore(Clint_Eastwood,Eastwood)


ResourceType(Dbo_Starring,Relation)
0.87 PriorMatchScore(Starring,Starring)


ResourceType(Dbr_Clint_Eastwood,Entity)
0.52 PriorMatchScore(Clint_Eastwood,Clint)

0.72 PriorMatchScore(Clint_Eastwood,Eastwood)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Clint_Eastwood . ?uri dbo:starring res:Clint_Eastwood . }


PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(City,3,3)
PhraseIndex(Was,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Former,6,6)
PhraseIndex(Dutch,7,7)
PhraseIndex(Queen,8,8)
PhraseIndex(Juliana,9,9)
PhraseIndex(Buried,10,10)

//[u'In', u'Which', u'City', u'Was', u'The', u'Former', u'Dutch', u'Queen', u'Juliana', u'Buried']
//In which city was the former Dutch queen Juliana buried?

//La ligne est isolée 
PhrasePosTag(In,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(City,NN)
PhrasePosTag(Was,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Former,JJ)
PhrasePosTag(Dutch,NNP)
PhrasePosTag(Queen,NN)
PhrasePosTag(Juliana,NNP)
PhrasePosTag(Buried,VBN)
phraseDepTag(Buried,Buried,root)
phraseDepTag(City,In,case)
phraseDepTag(City,Which,det)
phraseDepTag(Juliana,The,det)
phraseDepTag(Juliana,Former,amod)
phraseDepTag(Juliana,Dutch,compound)
phraseDepTag(Juliana,Queen,compound)
phraseDepTag(Buried,City,nmod:in)
phraseDepTag(Buried,Was,auxpass)
phraseDepTag(Buried,Juliana,nsubjpass)
//[(('http://dbpedia.org/resource/', 'Juliana_of_the_Netherlands'), ('http://dbpedia.org/ontology/', 'restingPlace'), SparqlVar('uri')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Settlement'))]

ResourceType(Dbr_Juliana_Of_The_Netherlands,Entity)

ResourceType(Dbo_Restingplace,Relation)

ResourceType(Settlement,Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Juliana_of_the_Netherlands dbo:restingPlace ?uri. ?uri rdf:type dbo:Settlement . }


//Is Egypts largest city also its capital? 
//[u'Is', u'Egypts', u'largest', u'city', u'also', u'its', u'capital', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(Egypts,2,2)
PhraseIndex(largest,3,3)
PhraseIndex(city,4,4)
PhraseIndex(also,5,5)
PhraseIndex(its,6,6)
PhraseIndex(capital,7,7)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Egypts,RB)
PhrasePosTag(Largest,JJS)
PhrasePosTag(City,NN)
PhrasePosTag(Also,RB)
PhrasePosTag(Its,PRP$)
PhrasePosTag(Capital,NN)
PhraseDepTag(Capital,City,root)
PhraseDepTag(Largest,Egypts,advmod)
PhraseDepTag(City,Is,cop)
PhraseDepTag(City,Largest,amod)
PhraseDepTag(City,Capital,nmod)
PhraseDepTag(Capital,Also,advmod)
PhraseDepTag(Capital,Its,nmod:poss)
//[(('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'largestCity'), SparqlVar('large')), (('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('capital')), (('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'largestCity'), SparqlVar('large')), (('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('capital'))]

ResourceType(Dbr_Egypt,Entity)
0.90 PriorMatchScore(Egypt,Egypts)


ResourceType(Dbo_Largestcity,Relation)
0.66 PriorMatchScore(Largestcity,Largest)

0.53 PriorMatchScore(Largestcity,City)


ResourceType(Dbr_Egypt,Entity)
0.90 PriorMatchScore(Egypt,Egypts)


ResourceType(Dbo_Capital,Relation)
0.85 PriorMatchScore(Capital,Capital)


ResourceType(Dbr_Egypt,Entity)
0.90 PriorMatchScore(Egypt,Egypts)


ResourceType(Dbo_Largestcity,Relation)
0.66 PriorMatchScore(Largestcity,Largest)

0.53 PriorMatchScore(Largestcity,City)


ResourceType(Dbr_Egypt,Entity)
0.90 PriorMatchScore(Egypt,Egypts)


ResourceType(Dbo_Capital,Relation)
0.85 PriorMatchScore(Capital,Capital)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> ASK WHERE { res:Egypt dbo:largestCity ?large . res:Egypt dbo:capital ?capital . FILTER (?large = ?capital) }


PhraseIndex(Where,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Residence,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Prime,7,7)
PhraseIndex(Minister,8,8)
PhraseIndex(Of,9,9)
PhraseIndex(Spain,10,10)

//[u'Where', u'Is', u'The', u'Residence', u'Of', u'The', u'Prime', u'Minister', u'Of', u'Spain']
//Where is the residence of the prime minister of Spain?

//La ligne est isolée 
PhrasePosTag(Where,WRB)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Residence,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Prime,JJ)
PhrasePosTag(Minister,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Spain,NNP)
phraseDepTag(Spain,Is,root)
phraseDepTag(Is,Where,advmod)
phraseDepTag(Is,Residence,nsubj)
phraseDepTag(Residence,The,det)
phraseDepTag(Residence,Minister,nmod:of)
phraseDepTag(Minister,Of,case)
phraseDepTag(Minister,The,det)
phraseDepTag(Minister,Prime,amod)
phraseDepTag(Minister,Spain,nmod:of)
phraseDepTag(Spain,Of,case)
//[(('http://dbpedia.org/resource/', 'Prime_Minister_of_Spain'), ('http://dbpedia.org/property/', 'residence'), SparqlVar('uri'))]

ResourceType(Dbr_Prime_Minister_Of_Spain,Entity)
0.51 PriorMatchScore(Prime_Minister_Of_Spain,Minister)


ResourceType(Residence,Class)
0.88 PriorMatchScore(Residence,Residence)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Prime_Minister_of_Spain dbp:residence ?uri . }


//Which U.S. state has the abbreviation MN? 
//[u'Which', u'U.S.', u'state', u'has', u'the', u'abbreviation', u'MN', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(U.S.,2,2)
PhraseIndex(state,3,3)
PhraseIndex(has,4,4)
PhraseIndex(the,5,5)
PhraseIndex(abbreviation,6,6)
PhraseIndex(MN,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(State,NN)
PhrasePosTag(Has,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Abbreviation,NN)
PhrasePosTag(Mn,NN)
PhraseDepTag(Mn,Has,root)
PhraseDepTag(State,Which,det)
PhraseDepTag(State,U.S.,compound)
PhraseDepTag(Has,State,nsubj)
PhraseDepTag(Has,Mn,dobj)
PhraseDepTag(Mn,The,det)
PhraseDepTag(Mn,Abbreviation,compound)
PhraseIndex(Show,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Songs,4,4)
PhraseIndex(From,5,5)
PhraseIndex(Bruce,6,6)
PhraseIndex(Springsteen,7,7)
PhraseIndex(Released,8,8)
PhraseIndex(Between,9,9)
PhraseIndex(1980,10,10)
PhraseIndex(And,11,11)
PhraseIndex(1990,12,12)

//[u'Show', u'Me', u'All', u'Songs', u'From', u'Bruce', u'Springsteen', u'Released', u'Between', u'1980', u'And', u'1990']
//Show me all songs from Bruce Springsteen released between 1980 and 1990.

//La ligne est isolée 
PhrasePosTag(Show,NN)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Songs,NNS)
PhrasePosTag(From,IN)
PhrasePosTag(Bruce,NNP)
PhrasePosTag(Springsteen,NNP)
PhrasePosTag(Released,VBD)
PhrasePosTag(Between,IN)
PhrasePosTag(1980,CD)
PhrasePosTag(And,CC)
PhrasePosTag(1990,CD)
phraseDepTag(1990,Released,root)
phraseDepTag(Show,Me,dep)
phraseDepTag(Show,Songs,dep)
phraseDepTag(Songs,All,det)
phraseDepTag(Songs,Springsteen,nmod:from)
phraseDepTag(Springsteen,From,case)
phraseDepTag(Springsteen,Bruce,compound)
phraseDepTag(Released,Show,nsubj)
phraseDepTag(Released,1980,nmod:between)
phraseDepTag(Released,1990,nmod:between)
phraseDepTag(1980,Between,case)
phraseDepTag(1980,And,cc)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Akira_Kurosawa')), (('http://dbpedia.org/resource/', 'Rashomon'), ('http://dbpedia.org/ontology/', 'releaseDate'), SparqlVar('y')), (('http://dbpedia.org/resource/', 'Rashomon'), ('http://dbpedia.org/ontology/', 'releaseDate'), SparqlVar('y'))]

ResourceType(Film,Class)

ResourceType(Dbo_Director,Relation)

ResourceType(Dbr_Akira_Kurosawa,Entity)

ResourceType(Dbr_Rashomon,Entity)

ResourceType(Dbo_Releasedate,Relation)
0.63 PriorMatchScore(Releasedate,Released)


ResourceType(Dbr_Rashomon,Entity)

ResourceType(Dbo_Releasedate,Relation)
0.63 PriorMatchScore(Releasedate,Released)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:director res:Akira_Kurosawa . { ?uri dbo:releaseDate ?x . } UNION { ?uri dbp:released ?x . } res:Rashomon dbo:releaseDate ?y . FILTER (?y > ?x) }


PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Founding,4,4)
PhraseIndex(Year,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(The,7,7)
PhraseIndex(Brewery,8,8)
PhraseIndex(That,9,9)
PhraseIndex(Produces,10,10)
PhraseIndex(Pilsner,11,11)
PhraseIndex(Urquell,12,12)

//[u'What', u'Is', u'The', u'Founding', u'Year', u'Of', u'The', u'Brewery', u'That', u'Produces', u'Pilsner', u'Urquell']
//What is the founding year of the brewery that produces Pilsner Urquell?

//La ligne est isolée 
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Founding,NN)
PhrasePosTag(Year,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Brewery,NN)
PhrasePosTag(That,WDT)
PhrasePosTag(Produces,VBZ)
PhrasePosTag(Pilsner,NNP)
PhrasePosTag(Urquell,NNP)
phraseDepTag(Urquell,What,root)
phraseDepTag(What,Is,cop)
phraseDepTag(What,Year,nsubj)
phraseDepTag(Year,The,det)
phraseDepTag(Year,Founding,compound)
phraseDepTag(Year,Brewery,nmod:of)
phraseDepTag(Brewery,Of,case)
phraseDepTag(Brewery,The,det)
phraseDepTag(Brewery,Produces,acl:relcl)
phraseDepTag(Produces,That,nsubj)
phraseDepTag(Produces,Urquell,dobj)
phraseDepTag(Urquell,Pilsner,compound)
//[(('http://dbpedia.org/resource/', 'Pilsner_Urquell'), ('http://dbpedia.org/property/', 'brewery'), SparqlVar('uri')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'foundation'), SparqlVar('num'))]

ResourceType(Dbr_Pilsner_Urquell,Entity)
0.63 PriorMatchScore(Pilsner_Urquell,Pilsner)

0.63 PriorMatchScore(Pilsner_Urquell,Urquell)


ResourceType(Brewery,Class)
0.85 PriorMatchScore(Brewery,Brewery)


ResourceType(Foundation,Class)
0.66 PriorMatchScore(Foundation,Founding)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Pilsner_Urquell dbp:brewery ?uri . ?uri dbp:foundation ?num . }


PhraseIndex(Who,1,1)
PhraseIndex(Wrote,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Lyrics,4,4)
PhraseIndex(For,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Polish,7,7)
PhraseIndex(National,8,8)
PhraseIndex(Anthem,9,9)

//[u'Who', u'Wrote', u'The', u'Lyrics', u'For', u'The', u'Polish', u'National', u'Anthem']
//Who wrote the lyrics for the Polish national anthem?

//La ligne est isolée 
PhrasePosTag(Who,WP)
PhrasePosTag(Wrote,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Lyrics,NNS)
PhrasePosTag(For,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Polish,JJ)
PhrasePosTag(National,JJ)
PhrasePosTag(Anthem,NN)
phraseDepTag(Anthem,Wrote,root)
phraseDepTag(Wrote,Who,nsubj)
phraseDepTag(Wrote,Lyrics,dobj)
phraseDepTag(Wrote,Anthem,nmod:for)
phraseDepTag(Lyrics,The,det)
phraseDepTag(Anthem,For,case)
phraseDepTag(Anthem,The,det)
phraseDepTag(Anthem,Polish,amod)
phraseDepTag(Anthem,National,amod)
//[(('http://dbpedia.org/resource/', 'Poland'), ('http://dbpedia.org/ontology/', 'anthem'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/property/', 'author'), SparqlVar('uri'))]

ResourceType(Dbr_Poland,Entity)

ResourceType(Dbo_Anthem,Relation)
0.83 PriorMatchScore(Anthem,Anthem)


ResourceType(Author,Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Poland dbo:anthem ?x . ?x dbp:author ?uri . }


//Give me all B-sides of the Ramones. 
//[u'Give', u'me', u'all', u'B-sides', u'of', u'the', u'Ramones', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(B-sides,4,4)
PhraseIndex(of,5,5)
PhraseIndex(the,6,6)
PhraseIndex(Ramones,7,7)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(B-Sides,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Ramones,NNPS)
PhraseDepTag(Ramones,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,B-Sides,dobj)
PhraseDepTag(B-Sides,All,det)
PhraseDepTag(B-Sides,Ramones,nmod:of)
PhraseDepTag(Ramones,Of,case)
PhraseDepTag(Ramones,The,det)
//[(SparqlVar('x'), ('http://dbpedia.org/ontology/', 'musicalArtist'), ('http://dbpedia.org/resource/', 'Ramones')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'bSide'), SparqlVar('string'))]

ResourceType(Dbo_Musicalartist,Relation)

ResourceType(Dbr_Ramones,Entity)
1.0 PriorMatchScore(Ramones,Ramones)


ResourceType(Dbo_Bside,Relation)
0.66 PriorMatchScore(Bside,B-Sides)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { ?x dbo:musicalArtist res:Ramones . ?x dbo:bSide ?string . }


//Who painted The Storm on the Sea of Galilee? 
//[u'Who', u'painted', u'The', u'Storm', u'on', u'the', u'Sea', u'of', u'Galilee', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(painted,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Storm,4,4)
PhraseIndex(on,5,5)
PhraseIndex(the,6,6)
PhraseIndex(Sea,7,7)
PhraseIndex(of,8,8)
PhraseIndex(Galilee,9,9)
PhrasePosTag(Who,WP)
PhrasePosTag(Painted,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Storm,NN)
PhrasePosTag(On,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Sea,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Galilee,NNP)
PhraseDepTag(Galilee,Painted,root)
PhraseDepTag(Painted,Who,nsubj)
PhraseDepTag(Painted,Storm,dobj)
PhraseDepTag(Painted,Sea,nmod:on)
PhraseDepTag(Storm,The,det)
PhraseDepTag(Sea,On,case)
PhraseDepTag(Sea,The,det)
PhraseDepTag(Sea,Galilee,nmod:of)
PhraseDepTag(Galilee,Of,case)
//[(('http://dbpedia.org/resource/', 'The_Storm_on_the_Sea_of_Galilee'), ('http://dbpedia.org/ontology/', 'author'), SparqlVar('uri'))]

ResourceType(Dbr_The_Storm_On_The_Sea_Of_Galilee,Entity)

ResourceType(Dbo_Author,Relation)
0.54 PriorMatchScore(Author,Storm)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Storm_on_the_Sea_of_Galilee dbo:author ?uri . }


//Which country does the creator of Miffy come from? 
//[u'Which', u'country', u'does', u'the', u'creator', u'of', u'Miffy', u'come', u'from', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(country,2,2)
PhraseIndex(does,3,3)
PhraseIndex(the,4,4)
PhraseIndex(creator,5,5)
PhraseIndex(of,6,6)
PhraseIndex(Miffy,7,7)
PhraseIndex(come,8,8)
PhraseIndex(from,9,9)
PhrasePosTag(Which,WDT)
PhrasePosTag(Country,NN)
PhrasePosTag(Does,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Creator,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Miffy,NNP)
PhrasePosTag(Come,VB)
PhrasePosTag(From,IN)
PhraseDepTag(From,Come,root)
PhraseDepTag(Country,Which,det)
PhraseDepTag(Country,From,case)
PhraseDepTag(Creator,The,det)
PhraseDepTag(Creator,Miffy,nmod:of)
PhraseDepTag(Miffy,Of,case)
PhraseDepTag(Come,Country,nmod:from)
PhraseDepTag(Come,Does,aux)
PhraseDepTag(Come,Creator,nsubj)
//[(('http://dbpedia.org/resource/', 'Miffy'), ('http://dbpedia.org/ontology/', 'creator'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'nationality'), SparqlVar('uri'))]

ResourceType(Dbr_Miffy,Entity)
1.0 PriorMatchScore(Miffy,Miffy)


ResourceType(Dbo_Creator,Relation)
0.85 PriorMatchScore(Creator,Creator)


ResourceType(Dbo_Nationality,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Miffy dbo:creator ?x . ?x dbo:nationality ?uri . }


//For which label did Elvis record his first album? 
//[u'For', u'which', u'label', u'did', u'Elvis', u'record', u'his', u'first', u'album', u'?']
PhraseIndex(For,1,1)
PhraseIndex(which,2,2)
PhraseIndex(label,3,3)
PhraseIndex(did,4,4)
PhraseIndex(Elvis,5,5)
PhraseIndex(record,6,6)
PhraseIndex(his,7,7)
PhraseIndex(first,8,8)
PhraseIndex(album,9,9)
PhrasePosTag(For,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(Label,NN)
PhrasePosTag(Did,VBD)
PhrasePosTag(Elvis,NNP)
PhrasePosTag(Record,VB)
PhrasePosTag(His,PRP$)
PhrasePosTag(First,JJ)
PhrasePosTag(Album,NN)
PhraseDepTag(Album,Record,root)
PhraseDepTag(Label,For,case)
PhraseDepTag(Label,Which,det)
PhraseDepTag(Record,Label,nmod:for)
PhraseDepTag(Record,Did,aux)
PhraseDepTag(Record,Elvis,nsubj)
PhraseDepTag(Record,Album,dobj)
PhraseDepTag(Album,His,nmod:poss)
PhraseDepTag(Album,First,amod)
//[(SparqlVar('x'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Album')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'artist'), ('http://dbpedia.org/resource/', 'Elvis_Presley')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'releaseDate'), SparqlVar('y')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'recordLabel'), SparqlVar('uri'))]

ResourceType(Album,Class)
1.0 PriorMatchScore(Album,Album)


ResourceType(Dbo_Artist,Relation)
0.54 PriorMatchScore(Artist,First)


ResourceType(Dbr_Elvis_Presley,Entity)
0.55 PriorMatchScore(Elvis_Presley,Elvis)


ResourceType(Dbo_Releasedate,Relation)

ResourceType(Dbo_Recordlabel,Relation)
0.62 PriorMatchScore(Recordlabel,Label)

0.58 PriorMatchScore(Recordlabel,Record)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album . ?x dbo:artist res:Elvis_Presley . ?x dbo:releaseDate ?y . ?x dbo:recordLabel ?uri . } ORDER BY ASC(?y) OFFSET 0 LIMIT 1


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Birthdays,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(All,6,6)
PhraseIndex(Actors,7,7)
PhraseIndex(Of,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Television,10,10)
PhraseIndex(Show,11,11)
PhraseIndex(Charmed,12,12)

//[u'Give', u'Me', u'The', u'Birthdays', u'Of', u'All', u'Actors', u'Of', u'The', u'Television', u'Show', u'Charmed']
//Give me the birthdays of all actors of the television show Charmed.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(The,DT)
PhrasePosTag(Birthdays,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(All,DT)
PhrasePosTag(Actors,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Television,NN)
PhrasePosTag(Show,NN)
PhrasePosTag(Charmed,NNP)
phraseDepTag(Charmed,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Birthdays,dobj)
phraseDepTag(Birthdays,The,det)
phraseDepTag(Birthdays,Actors,nmod:of)
phraseDepTag(Actors,Of,case)
phraseDepTag(Actors,All,det)
phraseDepTag(Actors,Charmed,nmod:of)
phraseDepTag(Charmed,Of,case)
phraseDepTag(Charmed,The,det)
phraseDepTag(Charmed,Television,compound)
phraseDepTag(Charmed,Show,compound)
//[(('http://dbpedia.org/resource/', 'Charmed'), ('http://dbpedia.org/ontology/', 'starring'), SparqlVar('actor')), (SparqlVar('actor'), ('http://dbpedia.org/ontology/', 'birthDate'), SparqlVar('date'))]

ResourceType(Dbr_Charmed,Entity)
1.0 PriorMatchScore(Charmed,Charmed)


ResourceType(Dbo_Starring,Relation)

ResourceType(Dbo_Birthdate,Relation)
0.55 PriorMatchScore(Birthdate,Birthdays)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Charmed dbo:starring ?actor . ?actor dbo:birthDate ?date . }


//How many employees does IBM have? 
//[u'How', u'many', u'employees', u'does', u'IBM', u'have', u'?']
PhraseIndex(How,1,1)
PhraseIndex(many,2,2)
PhraseIndex(employees,3,3)
PhraseIndex(does,4,4)
PhraseIndex(IBM,5,5)
PhraseIndex(have,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Employees,NNS)
PhrasePosTag(Does,VBZ)
PhrasePosTag(Ibm,NNP)
PhrasePosTag(Have,VB)
PhraseDepTag(Have,Have,root)
PhraseDepTag(Many,How,advmod)
PhraseDepTag(Employees,Many,amod)
PhraseDepTag(Have,Employees,dobj)
PhraseDepTag(Have,Does,aux)
PhraseDepTag(Have,Ibm,nsubj)
//[(('http://dbpedia.org/resource/', 'IBM'), ('http://dbpedia.org/ontology/', 'numberOfEmployees'), SparqlVar('number'))]

ResourceType(Dbr_Ibm,Entity)

ResourceType(Dbo_Numberofemployees,Relation)
0.69 PriorMatchScore(Numberofemployees,Employees)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?number WHERE { res:IBM dbo:numberOfEmployees ?number . }


//Which states border Illinois? 
//[u'Which', u'states', u'border', u'Illinois', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(states,2,2)
PhraseIndex(border,3,3)
PhraseIndex(Illinois,4,4)
PhrasePosTag(Which,WDT)
PhrasePosTag(States,NNS)
PhrasePosTag(Border,VBP)
PhrasePosTag(Illinois,NNP)
PhraseDepTag(Illinois,Border,root)
PhraseDepTag(States,Which,det)
PhraseDepTag(Border,States,nsubj)
PhraseDepTag(Border,Illinois,dobj)
//[(('http://dbpedia.org/resource/', 'Illinois'), ('http://dbpedia.org/property/', 'borderingstates'), SparqlVar('uri'))]

ResourceType(Dbr_Illinois,Entity)
1.0 PriorMatchScore(Illinois,Illinois)


ResourceType(Borderingstates,Class)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Illinois dbp:borderingstates ?uri . }


//In which country is the Limerick Lake? 
//[u'In', u'which', u'country', u'is', u'the', u'Limerick', u'Lake', u'?']
PhraseIndex(In,1,1)
PhraseIndex(which,2,2)
PhraseIndex(country,3,3)
PhraseIndex(is,4,4)
PhraseIndex(the,5,5)
PhraseIndex(Limerick,6,6)
PhraseIndex(Lake,7,7)
PhrasePosTag(In,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(Country,NN)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Limerick,NNP)
PhrasePosTag(Lake,NNP)
PhraseDepTag(Lake,Is,root)
PhraseDepTag(Country,In,case)
PhraseDepTag(Country,Which,det)
PhraseDepTag(Is,Country,nmod:in)
PhraseDepTag(Is,Lake,nsubj)
PhraseDepTag(Lake,The,det)
PhraseDepTag(Lake,Limerick,compound)
//[(('http://dbpedia.org/resource/', 'Limerick_Lake'), ('http://dbpedia.org/ontology/', 'country'), SparqlVar('uri'))]

ResourceType(Dbr_Limerick_Lake,Entity)
0.76 PriorMatchScore(Limerick_Lake,Limerick)


ResourceType(Dbo_Country,Relation)
0.85 PriorMatchScore(Country,Country)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(Television,2,2)
PhraseIndex(Shows,3,3)
PhraseIndex(Were,4,4)
PhraseIndex(Created,5,5)
PhraseIndex(By,6,6)
PhraseIndex(Walt,7,7)
PhraseIndex(Disney,8,8)

//[u'Which', u'Television', u'Shows', u'Were', u'Created', u'By', u'Walt', u'Disney']
//Which television shows were created by Walt Disney?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Television,NN)
PhrasePosTag(Shows,NNS)
PhrasePosTag(Were,VBD)
PhrasePosTag(Created,VBN)
PhrasePosTag(By,IN)
PhrasePosTag(Walt,NNP)
PhrasePosTag(Disney,NNP)
phraseDepTag(Disney,Created,root)
phraseDepTag(Television,Which,det)
phraseDepTag(Television,Shows,dep)
phraseDepTag(Created,Television,nsubjpass)
phraseDepTag(Created,Were,auxpass)
phraseDepTag(Created,Disney,nmod:agent)
phraseDepTag(Disney,By,case)
phraseDepTag(Disney,Walt,compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'TelevisionShow')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'creator'), ('http://dbpedia.org/resource/', 'Walt_Disney'))]

ResourceType(TelevisionShow,Class)
0.83 PriorMatchScore(TelevisionShow,Television)


ResourceType(Dbo_Creator,Relation)
0.57 PriorMatchScore(Creator,Created)


ResourceType(Dbr_Walt_Disney,Entity)
0.53 PriorMatchScore(Walt_Disney,Walt)

0.70 PriorMatchScore(Walt_Disney,Disney)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow . ?uri dbo:creator res:Walt_Disney . }


//Which mountain is the highest after the Annapurna? 
//[u'Which', u'mountain', u'is', u'the', u'highest', u'after', u'the', u'Annapurna', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(mountain,2,2)
PhraseIndex(is,3,3)
PhraseIndex(the,4,4)
PhraseIndex(highest,5,5)
PhraseIndex(after,6,6)
PhraseIndex(the,7,7)
PhraseIndex(Annapurna,8,8)
PhrasePosTag(Which,WDT)
PhrasePosTag(Mountain,NN)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Highest,JJS)
PhrasePosTag(After,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Annapurna,NNP)
PhraseDepTag(Annapurna,Is,root)
PhraseDepTag(Mountain,Which,det)
PhraseDepTag(Is,Mountain,dep)
PhraseDepTag(Is,Highest,nsubj)
PhraseDepTag(Highest,The,det)
PhraseDepTag(Highest,Annapurna,nmod:after)
PhraseDepTag(Annapurna,After,case)
PhraseDepTag(Annapurna,The,det)
//[(('http://dbpedia.org/resource/', 'Annapurna'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('otherelevation')), (('http://dbpedia.org/resource/', 'Annapurna'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('otherelevation'))]

ResourceType(Dbr_Annapurna,Entity)
1.0 PriorMatchScore(Annapurna,Annapurna)


ResourceType(Dbo_Elevation,Relation)

ResourceType(Mountain,Class)
1.0 PriorMatchScore(Mountain,Mountain)


ResourceType(Dbo_Elevation,Relation)

ResourceType(Dbr_Annapurna,Entity)
1.0 PriorMatchScore(Annapurna,Annapurna)


ResourceType(Dbo_Elevation,Relation)

ResourceType(Mountain,Class)
1.0 PriorMatchScore(Mountain,Mountain)


ResourceType(Dbo_Elevation,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Annapurna dbo:elevation ?elevation . ?uri rdf:type dbo:Mountain . ?uri dbo:elevation ?otherelevation . FILTER (?otherelevation < ?elevation) . } ORDER BY DESC(?otherelevation) OFFSET 0 LIMIT 1


PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Films,3,3)
PhraseIndex(Directed,4,4)
PhraseIndex(By,5,5)
PhraseIndex(Garry,6,6)
PhraseIndex(Marshall,7,7)
PhraseIndex(Was,8,8)
PhraseIndex(Julia,9,9)
PhraseIndex(Roberts,10,10)
PhraseIndex(Starring,11,11)

//[u'In', u'Which', u'Films', u'Directed', u'By', u'Garry', u'Marshall', u'Was', u'Julia', u'Roberts', u'Starring']
//In which films directed by Garry Marshall was Julia Roberts starring?

//La ligne est isolée 
PhrasePosTag(In,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(Films,NNS)
PhrasePosTag(Directed,VBN)
PhrasePosTag(By,IN)
PhrasePosTag(Garry,NNP)
PhrasePosTag(Marshall,NNP)
PhrasePosTag(Was,VBD)
PhrasePosTag(Julia,NNP)
PhrasePosTag(Roberts,NNP)
PhrasePosTag(Starring,VBG)
phraseDepTag(Starring,Directed,root)
phraseDepTag(Films,In,case)
phraseDepTag(Films,Which,det)
phraseDepTag(Directed,Films,nmod:in)
phraseDepTag(Directed,Marshall,nmod:by)
phraseDepTag(Marshall,By,case)
phraseDepTag(Marshall,Garry,compound)
phraseDepTag(Marshall,Roberts,acl:relcl)
phraseDepTag(Roberts,Was,cop)
phraseDepTag(Roberts,Julia,compound)
phraseDepTag(Roberts,Starring,acl)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Julia_Roberts')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Garry_Marshall'))]

ResourceType(Film,Class)
0.88 PriorMatchScore(Film,Films)


ResourceType(Dbo_Starring,Relation)
0.87 PriorMatchScore(Starring,Starring)


ResourceType(Dbr_Julia_Roberts,Entity)
0.55 PriorMatchScore(Julia_Roberts,Julia)

0.7 PriorMatchScore(Julia_Roberts,Roberts)


ResourceType(Dbo_Director,Relation)
0.62 PriorMatchScore(Director,Directed)


ResourceType(Dbr_Garry_Marshall,Entity)
0.52 PriorMatchScore(Garry_Marshall,Garry)

0.72 PriorMatchScore(Garry_Marshall,Marshall)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:starring res:Julia_Roberts . ?uri dbo:director res:Garry_Marshall . }


PhraseIndex(Which,1,1)
PhraseIndex(Bridges,2,2)
PhraseIndex(Are,3,3)
PhraseIndex(Of,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Same,6,6)
PhraseIndex(Type,7,7)
PhraseIndex(As,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Manhattan,10,10)
PhraseIndex(Bridge,11,11)

//[u'Which', u'Bridges', u'Are', u'Of', u'The', u'Same', u'Type', u'As', u'The', u'Manhattan', u'Bridge']
//Which bridges are of the same type as the Manhattan Bridge?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Bridges,NNS)
PhrasePosTag(Are,VBP)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Same,JJ)
PhrasePosTag(Type,NN)
PhrasePosTag(As,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Manhattan,NNP)
PhrasePosTag(Bridge,NNP)
phraseDepTag(Bridge,Are,root)
phraseDepTag(Bridges,Which,det)
phraseDepTag(Are,Bridges,nsubj)
phraseDepTag(Are,Type,nmod:of)
phraseDepTag(Type,Of,case)
phraseDepTag(Type,The,det)
phraseDepTag(Type,Same,amod)
phraseDepTag(Type,Bridge,nmod:as)
phraseDepTag(Bridge,As,case)
phraseDepTag(Bridge,The,det)
phraseDepTag(Bridge,Manhattan,compound)
//[(('http://dbpedia.org/resource/', 'Andrew_Jackson'), ('http://dbpedia.org/ontology/', 'battle'), SparqlVar('battle'))]

ResourceType(Dbr_Andrew_Jackson,Entity)

ResourceType(Dbo_Battle,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Andrew_Jackson dbo:battle ?battle . }


//Give me all communist countries. 
//[u'Give', u'me', u'all', u'communist', u'countries', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(communist,4,4)
PhraseIndex(countries,5,5)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Communist,JJ)
PhrasePosTag(Countries,NNS)
PhraseDepTag(Countries,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Countries,dobj)
PhraseDepTag(Countries,All,det)
PhraseDepTag(Countries,Communist,amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country'))]

ResourceType(Country,Class)
0.62 PriorMatchScore(Country,Communist)

0.75 PriorMatchScore(Country,Countries)


ResourceType(Country,Class)
0.62 PriorMatchScore(Country,Communist)

0.75 PriorMatchScore(Country,Countries)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country . { ?uri dbo:governmentType res:Communism . } UNION { ?uri dbo:governmentType res:Communist_state . } }


//Which awards did WikiLeaks win? 
//[u'Which', u'awards', u'did', u'WikiLeaks', u'win', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(awards,2,2)
PhraseIndex(did,3,3)
PhraseIndex(WikiLeaks,4,4)
PhraseIndex(win,5,5)
PhrasePosTag(Which,WDT)
PhrasePosTag(Awards,NNS)
PhrasePosTag(Did,VBD)
PhrasePosTag(Wikileaks,NNP)
PhrasePosTag(Win,VB)
PhraseDepTag(Win,Win,root)
PhraseDepTag(Awards,Which,det)
PhraseDepTag(Win,Awards,dobj)
PhraseDepTag(Win,Did,aux)
PhraseDepTag(Win,Wikileaks,nsubj)
//[(('http://dbpedia.org/resource/', 'WikiLeaks'), ('http://dbpedia.org/property/', 'awards'), SparqlVar('uri'))]

ResourceType(Dbr_Wikileaks,Entity)
0.88 PriorMatchScore(Wikileaks,Wikileaks)


ResourceType(Awards,Class)
0.83 PriorMatchScore(Awards,Awards)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:WikiLeaks dbp:awards ?uri . }


//Who is the daughter of Ingrid Bergman married to? 
//[u'Who', u'is', u'the', u'daughter', u'of', u'Ingrid', u'Bergman', u'married', u'to', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(daughter,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Ingrid,6,6)
PhraseIndex(Bergman,7,7)
PhraseIndex(married,8,8)
PhraseIndex(to,9,9)
PhrasePosTag(Who,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Daughter,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Ingrid,NNP)
PhrasePosTag(Bergman,NNP)
PhrasePosTag(Married,VBN)
PhrasePosTag(To,TO)
PhraseDepTag(To,Married,root)
PhraseDepTag(Daughter,The,det)
PhraseDepTag(Daughter,Bergman,nmod:of)
PhraseDepTag(Bergman,Of,case)
PhraseDepTag(Bergman,Ingrid,compound)
PhraseDepTag(Married,Who,dep)
PhraseDepTag(Married,Is,auxpass)
PhraseDepTag(Married,Daughter,nsubjpass)
PhraseDepTag(Married,To,xcomp)
//[(('http://dbpedia.org/resource/', 'Ingrid_Bergman'), ('http://dbpedia.org/ontology/', 'child'), SparqlVar('child')), (SparqlVar('child'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('uri'))]

ResourceType(Dbr_Ingrid_Bergman,Entity)
0.6 PriorMatchScore(Ingrid_Bergman,Ingrid)

0.66 PriorMatchScore(Ingrid_Bergman,Bergman)


ResourceType(Dbo_Child,Relation)

ResourceType(Dbo_Spouse,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child dbo:spouse ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(U.S.,2,2)
PhraseIndex(State,3,3)
PhraseIndex(Has,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Highest,6,6)
PhraseIndex(Population,7,7)
PhraseIndex(Density,8,8)

//[u'Which', u'U.S.', u'State', u'Has', u'The', u'Highest', u'Population', u'Density']
//Which U.S. state has the highest population density?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(State,NN)
PhrasePosTag(Has,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Highest,JJS)
PhrasePosTag(Population,NN)
PhrasePosTag(Density,NN)
phraseDepTag(Density,Has,root)
phraseDepTag(State,Which,det)
phraseDepTag(State,U.S.,compound)
phraseDepTag(Has,State,nsubj)
phraseDepTag(Has,Density,dobj)
phraseDepTag(Density,The,det)
phraseDepTag(Density,Highest,amod)
phraseDepTag(Density,Population,compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'densityrank'), SparqlVar('rank'))]

ResourceType(StatesOfTheUnitedStates,Class)

ResourceType(Densityrank,Class)
0.66 PriorMatchScore(Densityrank,Density)

//PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:densityrank ?rank . } ORDER BY ASC(?rank) OFFSET 0 LIMIT 1


//What is the currency of the Czech Republic? 
//[u'What', u'is', u'the', u'currency', u'of', u'the', u'Czech', u'Republic', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(currency,4,4)
PhraseIndex(of,5,5)
PhraseIndex(the,6,6)
PhraseIndex(Czech,7,7)
PhraseIndex(Republic,8,8)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Currency,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Czech,NNP)
PhrasePosTag(Republic,NNP)
PhraseDepTag(Republic,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Currency,nsubj)
PhraseDepTag(Currency,The,det)
PhraseDepTag(Currency,Republic,nmod:of)
PhraseDepTag(Republic,Of,case)
PhraseDepTag(Republic,The,det)
PhraseDepTag(Republic,Czech,compound)
//[(('http://dbpedia.org/resource/', 'Czech_Republic'), ('http://dbpedia.org/ontology/', 'currency'), SparqlVar('uri'))]

ResourceType(Dbr_Czech_Republic,Entity)
0.52 PriorMatchScore(Czech_Republic,Czech)

0.72 PriorMatchScore(Czech_Republic,Republic)


ResourceType(Dbo_Currency,Relation)
0.87 PriorMatchScore(Currency,Currency)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri . }


//Which countries adopted the Euro? 
//[u'Which', u'countries', u'adopted', u'the', u'Euro', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(countries,2,2)
PhraseIndex(adopted,3,3)
PhraseIndex(the,4,4)
PhraseIndex(Euro,5,5)
PhrasePosTag(Which,WDT)
PhrasePosTag(Countries,NNS)
PhrasePosTag(Adopted,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Euro,NNP)
PhraseDepTag(Euro,Adopted,root)
PhraseDepTag(Countries,Which,det)
PhraseDepTag(Adopted,Countries,nsubj)
PhraseDepTag(Adopted,Euro,dobj)
PhraseDepTag(Euro,The,det)
//[(('http://dbpedia.org/resource/', 'Berlin'), ('http://dbpedia.org/ontology/', 'areaCode'), SparqlVar('string'))]

ResourceType(Dbr_Berlin,Entity)

ResourceType(Dbo_Areacode,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Berlin dbo:areaCode ?string . }


PhraseIndex(Which,1,1)
PhraseIndex(Countries,2,2)
PhraseIndex(Have,3,3)
PhraseIndex(More,4,4)
PhraseIndex(Than,5,5)
PhraseIndex(Two,6,6)
PhraseIndex(Official,7,7)
PhraseIndex(Languages,8,8)

//[u'Which', u'Countries', u'Have', u'More', u'Than', u'Two', u'Official', u'Languages']
//Which countries have more than two official languages?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Countries,NNS)
PhrasePosTag(Have,VBP)
PhrasePosTag(More,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(Two,CD)
PhrasePosTag(Official,JJ)
PhrasePosTag(Languages,NNS)
phraseDepTag(Languages,Have,root)
phraseDepTag(Countries,Which,det)
phraseDepTag(Have,Countries,nsubj)
phraseDepTag(Have,Languages,dobj)
phraseDepTag(More,Than,mwe)
phraseDepTag(Two,More,advmod)
phraseDepTag(Languages,Two,nummod)
phraseDepTag(Languages,Official,amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'officialLanguage'), SparqlVar('language'))]

ResourceType(Country,Class)
0.75 PriorMatchScore(Country,Countries)


ResourceType(Dbo_Officiallanguage,Relation)
0.58 PriorMatchScore(Officiallanguage,Official)

0.64 PriorMatchScore(Officiallanguage,Languages)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country . ?uri dbo:officialLanguage ?language . } GROUP BY ?uri HAVING (COUNT(?language) > 2)


//Who is the owner of Universal Studios? 
//[u'Who', u'is', u'the', u'owner', u'of', u'Universal', u'Studios', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(owner,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Universal,6,6)
PhraseIndex(Studios,7,7)
PhrasePosTag(Who,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Owner,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Universal,NNP)
PhrasePosTag(Studios,NNP)
PhraseDepTag(Studios,Who,root)
PhraseDepTag(Who,Is,cop)
PhraseDepTag(Who,Owner,nsubj)
PhraseDepTag(Owner,The,det)
PhraseDepTag(Owner,Studios,nmod:of)
PhraseDepTag(Studios,Of,case)
PhraseDepTag(Studios,Universal,compound)
//[(('http://dbpedia.org/resource/', 'Universal_Studios'), ('http://dbpedia.org/ontology/', 'owner'), SparqlVar('uri'))]

ResourceType(Dbr_Universal_Studios,Entity)
0.69 PriorMatchScore(Universal_Studios,Universal)

0.58 PriorMatchScore(Universal_Studios,Studios)


ResourceType(Dbo_Owner,Relation)
0.8 PriorMatchScore(Owner,Owner)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri . }


PhraseIndex(Through,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Countries,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Yenisei,6,6)
PhraseIndex(River,7,7)
PhraseIndex(Flow,8,8)

//[u'Through', u'Which', u'Countries', u'Does', u'The', u'Yenisei', u'River', u'Flow']
//Through which countries does the Yenisei river flow?

//La ligne est isolée 
PhrasePosTag(Through,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(Countries,NNS)
PhrasePosTag(Does,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Yenisei,NNP)
PhrasePosTag(River,NN)
PhrasePosTag(Flow,NN)
phraseDepTag(Flow,Does,root)
phraseDepTag(Which,Through,case)
phraseDepTag(Does,Which,nmod:through)
phraseDepTag(Does,Countries,nsubj)
phraseDepTag(Does,Flow,dobj)
phraseDepTag(Flow,The,det)
phraseDepTag(Flow,Yenisei,compound)
phraseDepTag(Flow,River,compound)
//[(('http://dbpedia.org/resource/', 'Yenisei_River'), ('http://dbpedia.org/ontology/', 'country'), SparqlVar('uri'))]

ResourceType(Dbr_Yenisei_River,Entity)
0.7 PriorMatchScore(Yenisei_River,Yenisei)

0.55 PriorMatchScore(Yenisei_River,River)


ResourceType(Dbo_Country,Relation)
0.62 PriorMatchScore(Country,Countries)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Yenisei_River dbo:country ?uri . }


//When did Latvia join the EU? 
//[u'When', u'did', u'Latvia', u'join', u'the', u'EU', u'?']
PhraseIndex(When,1,1)
PhraseIndex(did,2,2)
PhraseIndex(Latvia,3,3)
PhraseIndex(join,4,4)
PhraseIndex(the,5,5)
PhraseIndex(EU,6,6)
PhrasePosTag(When,WRB)
PhrasePosTag(Did,VBD)
PhrasePosTag(Latvia,NNP)
PhrasePosTag(Join,VB)
PhrasePosTag(The,DT)
PhrasePosTag(Eu,NNP)
PhraseDepTag(Eu,Join,root)
PhraseDepTag(Join,When,advmod)
PhraseDepTag(Join,Did,aux)
PhraseDepTag(Join,Latvia,nsubj)
PhraseDepTag(Join,Eu,dobj)
PhraseDepTag(Eu,The,det)
//[(('http://dbpedia.org/resource/', 'Latvia'), ('http://dbpedia.org/property/', 'accessioneudate'), SparqlVar('date'))]

ResourceType(Dbr_Latvia,Entity)
1.0 PriorMatchScore(Latvia,Latvia)


ResourceType(Accessioneudate,Class)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?date WHERE { res:Latvia dbp:accessioneudate ?date . }


//Which monarchs were married to a German? 
//[u'Which', u'monarchs', u'were', u'married', u'to', u'a', u'German', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(monarchs,2,2)
PhraseIndex(were,3,3)
PhraseIndex(married,4,4)
PhraseIndex(to,5,5)
PhraseIndex(a,6,6)
PhraseIndex(German,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Monarchs,NNS)
PhrasePosTag(Were,VBD)
PhrasePosTag(Married,VBN)
PhrasePosTag(To,TO)
PhrasePosTag(A,DT)
PhrasePosTag(German,JJ)
PhraseDepTag(German,Married,root)
PhraseDepTag(Monarchs,Which,det)
PhraseDepTag(Married,Monarchs,nsubjpass)
PhraseDepTag(Married,Were,auxpass)
PhraseDepTag(Married,German,nmod:to)
PhraseDepTag(German,To,case)
PhraseDepTag(German,A,det)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Monarch')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('spouse')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Monarch')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('spouse'))]

ResourceType(Monarch,Class)
0.93 PriorMatchScore(Monarch,Monarchs)


ResourceType(Dbo_Spouse,Relation)

ResourceType(Monarch,Class)
0.93 PriorMatchScore(Monarch,Monarchs)


ResourceType(Dbo_Spouse,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch . ?uri dbo:spouse ?spouse . { ?spouse dbo:birthPlace res:Germany. } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany. } }


//When was the Battle of Gettysburg? 
//[u'When', u'was', u'the', u'Battle', u'of', u'Gettysburg', u'?']
PhraseIndex(When,1,1)
PhraseIndex(was,2,2)
PhraseIndex(the,3,3)
PhraseIndex(Battle,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Gettysburg,6,6)
PhrasePosTag(When,WRB)
PhrasePosTag(Was,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Battle,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Gettysburg,NNP)
PhraseDepTag(Gettysburg,Was,root)
PhraseDepTag(Was,When,advmod)
PhraseDepTag(Was,Battle,nsubj)
PhraseDepTag(Battle,The,det)
PhraseDepTag(Battle,Gettysburg,nmod:of)
PhraseDepTag(Gettysburg,Of,case)
//[(('http://dbpedia.org/resource/', 'Battle_of_Gettysburg'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('date'))]

ResourceType(Dbr_Battle_Of_Gettysburg,Entity)
0.66 PriorMatchScore(Battle_Of_Gettysburg,Gettysburg)


ResourceType(Dbo_Date,Relation)
0.6 PriorMatchScore(Date,Battle)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Battle_of_Gettysburg dbo:date ?date . }


//Which river does the Brooklyn Bridge cross? 
//[u'Which', u'river', u'does', u'the', u'Brooklyn', u'Bridge', u'cross', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(river,2,2)
PhraseIndex(does,3,3)
PhraseIndex(the,4,4)
PhraseIndex(Brooklyn,5,5)
PhraseIndex(Bridge,6,6)
PhraseIndex(cross,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(River,NN)
PhrasePosTag(Does,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Brooklyn,NNP)
PhrasePosTag(Bridge,NNP)
PhrasePosTag(Cross,VB)
PhraseDepTag(Cross,Cross,root)
PhraseDepTag(River,Which,det)
PhraseDepTag(Bridge,The,det)
PhraseDepTag(Bridge,Brooklyn,compound)
PhraseDepTag(Cross,River,dobj)
PhraseDepTag(Cross,Does,aux)
PhraseDepTag(Cross,Bridge,nsubj)
//[(('http://dbpedia.org/resource/', 'Brooklyn_Bridge'), ('http://dbpedia.org/ontology/', 'crosses'), SparqlVar('uri'))]

ResourceType(Dbr_Brooklyn_Bridge,Entity)
0.69 PriorMatchScore(Brooklyn_Bridge,Brooklyn)

0.57 PriorMatchScore(Brooklyn_Bridge,Bridge)


ResourceType(Dbo_Crosses,Relation)
0.54 PriorMatchScore(Crosses,Does)

0.66 PriorMatchScore(Crosses,Cross)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri . }


//What is the highest mountain in Australia? 
//[u'What', u'is', u'the', u'highest', u'mountain', u'in', u'Australia', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(highest,4,4)
PhraseIndex(mountain,5,5)
PhraseIndex(in,6,6)
PhraseIndex(Australia,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Highest,JJS)
PhrasePosTag(Mountain,NN)
PhrasePosTag(In,IN)
PhrasePosTag(Australia,NNP)
PhraseDepTag(Australia,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Mountain,nsubj)
PhraseDepTag(Mountain,The,det)
PhraseDepTag(Mountain,Highest,amod)
PhraseDepTag(Mountain,Australia,nmod:in)
PhraseDepTag(Australia,In,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'locatedInArea'), ('http://dbpedia.org/resource/', 'Australia')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation'))]

ResourceType(Mountain,Class)
1.0 PriorMatchScore(Mountain,Mountain)


ResourceType(Dbo_Locatedinarea,Relation)

ResourceType(Dbr_Australia,Entity)
1.0 PriorMatchScore(Australia,Australia)


ResourceType(Dbo_Elevation,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain . ?uri dbo:locatedInArea res:Australia . ?uri dbo:elevation ?elevation . } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1


//Give me all soccer clubs in Spain. 
//[u'Give', u'me', u'all', u'soccer', u'clubs', u'in', u'Spain', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(soccer,4,4)
PhraseIndex(clubs,5,5)
PhraseIndex(in,6,6)
PhraseIndex(Spain,7,7)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Soccer,NN)
PhrasePosTag(Clubs,NNS)
PhrasePosTag(In,IN)
PhrasePosTag(Spain,NNP)
PhraseDepTag(Spain,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Clubs,dobj)
PhraseDepTag(Clubs,All,det)
PhraseDepTag(Clubs,Soccer,compound)
PhraseDepTag(Clubs,Spain,nmod:in)
PhraseDepTag(Spain,In,case)
//[(('http://dbpedia.org/resource/', 'Suriname'), ('http://dbpedia.org/ontology/', 'officialLanguage'), SparqlVar('uri'))]

ResourceType(Dbr_Suriname,Entity)

ResourceType(Dbo_Officiallanguage,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Suriname dbo:officialLanguage ?uri . }


//Who is the mayor of Tel Aviv? 
//[u'Who', u'is', u'the', u'mayor', u'of', u'Tel', u'Aviv', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(mayor,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Tel,6,6)
PhraseIndex(Aviv,7,7)
PhrasePosTag(Who,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Mayor,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Tel,NNP)
PhrasePosTag(Aviv,NNP)
PhraseDepTag(Aviv,Who,root)
PhraseDepTag(Who,Is,cop)
PhraseDepTag(Who,Mayor,nsubj)
PhraseDepTag(Mayor,The,det)
PhraseDepTag(Mayor,Aviv,nmod:of)
PhraseDepTag(Aviv,Of,case)
PhraseDepTag(Aviv,Tel,compound)
//[(('http://dbpedia.org/resource/', 'Tel_Aviv'), ('http://dbpedia.org/ontology/', 'leaderName'), SparqlVar('uri'))]

ResourceType(Dbr_Tel_Aviv,Entity)
0.54 PriorMatchScore(Tel_Aviv,Tel)

0.66 PriorMatchScore(Tel_Aviv,Aviv)


ResourceType(Dbo_Leadername,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Tel_Aviv dbo:leaderName ?uri . }


//Who designed the Brooklyn Bridge? 
//[u'Who', u'designed', u'the', u'Brooklyn', u'Bridge', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(designed,2,2)
PhraseIndex(the,3,3)
PhraseIndex(Brooklyn,4,4)
PhraseIndex(Bridge,5,5)
PhrasePosTag(Who,WP)
PhrasePosTag(Designed,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Brooklyn,NNP)
PhrasePosTag(Bridge,NNP)
PhraseDepTag(Bridge,Designed,root)
PhraseDepTag(Designed,Who,nsubj)
PhraseDepTag(Designed,Bridge,dobj)
PhraseDepTag(Bridge,The,det)
PhraseDepTag(Bridge,Brooklyn,compound)
//[(('http://dbpedia.org/resource/', 'Brooklyn_Bridge'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('uri'))]

ResourceType(Dbr_Brooklyn_Bridge,Entity)
0.69 PriorMatchScore(Brooklyn_Bridge,Brooklyn)

0.57 PriorMatchScore(Brooklyn_Bridge,Bridge)


ResourceType(Designer,Class)
0.75 PriorMatchScore(Designer,Designed)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbp:designer ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(Telecommunications,2,2)
PhraseIndex(Organizations,3,3)
PhraseIndex(Are,4,4)
PhraseIndex(Located,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Belgium,7,7)

//[u'Which', u'Telecommunications', u'Organizations', u'Are', u'Located', u'In', u'Belgium']
//Which telecommunications organizations are located in Belgium?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Telecommunications,NNS)
PhrasePosTag(Organizations,NNS)
PhrasePosTag(Are,VBP)
PhrasePosTag(Located,JJ)
PhrasePosTag(In,IN)
PhrasePosTag(Belgium,NNP)
phraseDepTag(Belgium,Located,root)
phraseDepTag(Telecommunications,Which,det)
phraseDepTag(Telecommunications,Organizations,dep)
phraseDepTag(Located,Telecommunications,nsubj)
phraseDepTag(Located,Are,cop)
phraseDepTag(Located,Belgium,nmod:in)
phraseDepTag(Belgium,In,case)
//[(('http://dbpedia.org/resource/', 'Ural_Mountains'), ('http://dbpedia.org/ontology/', 'highestPlace'), SparqlVar('uri'))]

ResourceType(Dbr_Ural_Mountains,Entity)

ResourceType(Dbo_Highestplace,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ural_Mountains dbo:highestPlace ?uri . }


//Who is the editor of Forbes? 
//[u'Who', u'is', u'the', u'editor', u'of', u'Forbes', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(editor,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Forbes,6,6)
PhrasePosTag(Who,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Editor,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Forbes,NNP)
PhraseDepTag(Forbes,Who,root)
PhraseDepTag(Who,Is,cop)
PhraseDepTag(Who,Editor,nsubj)
PhraseDepTag(Editor,The,det)
PhraseDepTag(Editor,Forbes,nmod:of)
PhraseDepTag(Forbes,Of,case)
//[(('http://dbpedia.org/resource/', 'Forbes'), ('http://dbpedia.org/ontology/', 'editor'), SparqlVar('uri'))]

ResourceType(Dbr_Forbes,Entity)
1.0 PriorMatchScore(Forbes,Forbes)


ResourceType(Dbo_Editor,Relation)
0.83 PriorMatchScore(Editor,Editor)

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Forbes dbo:editor ?uri . }


//Give me all companies in the advertising industry. 
//[u'Give', u'me', u'all', u'companies', u'in', u'the', u'advertising', u'industry', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(companies,4,4)
PhraseIndex(in,5,5)
PhraseIndex(the,6,6)
PhraseIndex(advertising,7,7)
PhraseIndex(industry,8,8)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Companies,NNS)
PhrasePosTag(In,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Advertising,NN)
PhrasePosTag(Industry,NN)
PhraseDepTag(Industry,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Companies,dobj)
PhraseDepTag(Companies,All,det)
PhraseDepTag(Companies,Industry,nmod:in)
PhraseDepTag(Industry,In,case)
PhraseDepTag(Industry,The,det)
PhraseDepTag(Industry,Advertising,compound)
//[(('http://dbpedia.org/resource/', 'Bruce_Carver'), ('http://dbpedia.org/ontology/', 'deathCause'), SparqlVar('uri'))]

ResourceType(Dbr_Bruce_Carver,Entity)

ResourceType(Dbo_Deathcause,Relation)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Bruce_Carver dbo:deathCause ?uri . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Libraries,4,4)
PhraseIndex(Established,5,5)
PhraseIndex(Earlier,6,6)
PhraseIndex(Than,7,7)
PhraseIndex(1400,8,8)

//[u'Give', u'Me', u'All', u'Libraries', u'Established', u'Earlier', u'Than', u'1400']
//Give me all libraries established earlier than 1400.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Libraries,NNS)
PhrasePosTag(Established,VBN)
PhrasePosTag(Earlier,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(1400,CD)
phraseDepTag(1400,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Libraries,dobj)
phraseDepTag(Libraries,All,det)
phraseDepTag(Libraries,Established,acl)
phraseDepTag(Established,Earlier,advmod)
phraseDepTag(Established,1400,nmod:than)
phraseDepTag(1400,Than,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Library')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'established'), SparqlVar('year')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Library')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'established'), SparqlVar('year'))]

ResourceType(Library,Class)
0.75 PriorMatchScore(Library,Libraries)


ResourceType(Established,Class)
0.90 PriorMatchScore(Established,Established)


ResourceType(Library,Class)
0.75 PriorMatchScore(Library,Libraries)


ResourceType(Established,Class)
0.90 PriorMatchScore(Established,Established)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Library . ?uri dbp:established ?year . FILTER (?year < 1400) }


//Which presidents were born in 1945? 
//[u'Which', u'presidents', u'were', u'born', u'in', u'1945', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(presidents,2,2)
PhraseIndex(were,3,3)
PhraseIndex(born,4,4)
PhraseIndex(in,5,5)
PhraseIndex(1945,6,6)
PhrasePosTag(Which,WDT)
PhrasePosTag(Presidents,NNS)
PhrasePosTag(Were,VBD)
PhrasePosTag(Born,VBN)
PhrasePosTag(In,IN)
PhrasePosTag(1945,CD)
PhraseDepTag(1945,Born,root)
PhraseDepTag(Presidents,Which,det)
PhraseDepTag(Born,Presidents,nsubjpass)
PhraseDepTag(Born,Were,auxpass)
PhraseDepTag(Born,1945,nmod:in)
PhraseDepTag(1945,In,case)
//[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'office'), ('http://dbpedia.org/resource/', 'Chancellor_of_Germany'))]

ResourceType(Office,Class)

ResourceType(Dbr_Chancellor_Of_Germany,Entity)
//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbp:office res:Chancellor_of_Germany . }


//Who was the wife of U.S. president Lincoln? 
//[u'Who', u'was', u'the', u'wife', u'of', u'U.S.', u'president', u'Lincoln', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(was,2,2)
PhraseIndex(the,3,3)
PhraseIndex(wife,4,4)
PhraseIndex(of,5,5)
PhraseIndex(U.S.,6,6)
PhraseIndex(president,7,7)
PhraseIndex(Lincoln,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(Was,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Wife,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(President,NN)
PhrasePosTag(Lincoln,NNP)
PhraseDepTag(Lincoln,Who,root)
PhraseDepTag(Who,Was,cop)
PhraseDepTag(Who,Wife,nsubj)
PhraseDepTag(Wife,The,det)
PhraseDepTag(Wife,Lincoln,nmod:of)
PhraseDepTag(Lincoln,Of,case)
PhraseDepTag(Lincoln,U.S.,compound)
PhraseDepTag(Lincoln,President,compound)
//[(('http://dbpedia.org/resource/', 'Abraham_Lincoln'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('uri'))]

ResourceType(Dbr_Abraham_Lincoln,Entity)
0.63 PriorMatchScore(Abraham_Lincoln,Lincoln)


ResourceType(Dbo_Spouse,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:spouse ?uri. }


//Who developed the video game World of Warcraft? 
//[u'Who', u'developed', u'the', u'video', u'game', u'World', u'of', u'Warcraft', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(developed,2,2)
PhraseIndex(the,3,3)
PhraseIndex(video,4,4)
PhraseIndex(game,5,5)
PhraseIndex(World,6,6)
PhraseIndex(of,7,7)
PhraseIndex(Warcraft,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(Developed,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Video,NN)
PhrasePosTag(Game,NN)
PhrasePosTag(World,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Warcraft,NNP)
PhraseDepTag(Warcraft,Developed,root)
PhraseDepTag(Developed,Who,nsubj)
PhraseDepTag(Developed,World,dobj)
PhraseDepTag(World,The,det)
PhraseDepTag(World,Video,compound)
PhraseDepTag(World,Game,compound)
PhraseDepTag(World,Warcraft,nmod:of)
PhraseDepTag(Warcraft,Of,case)
//[(('http://dbpedia.org/resource/', 'World_of_Warcraft'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('uri'))]

ResourceType(Dbr_World_Of_Warcraft,Entity)
0.64 PriorMatchScore(World_Of_Warcraft,Warcraft)


ResourceType(Dbo_Developer,Relation)
0.77 PriorMatchScore(Developer,Developed)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri . }


//What is the official website of Tom Cruise? 
//[u'What', u'is', u'the', u'official', u'website', u'of', u'Tom', u'Cruise', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(official,4,4)
PhraseIndex(website,5,5)
PhraseIndex(of,6,6)
PhraseIndex(Tom,7,7)
PhraseIndex(Cruise,8,8)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Official,JJ)
PhrasePosTag(Website,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Tom,NNP)
PhrasePosTag(Cruise,NNP)
PhraseDepTag(Cruise,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Website,nsubj)
PhraseDepTag(Website,The,det)
PhraseDepTag(Website,Official,amod)
PhraseDepTag(Website,Cruise,nmod:of)
PhraseDepTag(Cruise,Of,case)
PhraseDepTag(Cruise,Tom,compound)
//[(('http://dbpedia.org/resource/', 'Tom_Cruise'), ('http://dbpedia.org/property/', 'website'), SparqlVar('string'))]

ResourceType(Dbr_Tom_Cruise,Entity)
0.75 PriorMatchScore(Tom_Cruise,Cruise)


ResourceType(Website,Class)
0.85 PriorMatchScore(Website,Website)

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Tom_Cruise dbp:website ?string . }


PhraseIndex(List,1,1)
PhraseIndex(All,2,2)
PhraseIndex(Episodes,3,3)
PhraseIndex(Of,4,4)
PhraseIndex(The,5,5)
PhraseIndex(First,6,6)
PhraseIndex(Season,7,7)
PhraseIndex(Of,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Hbo,10,10)
PhraseIndex(Television,11,11)
PhraseIndex(Series,12,12)
PhraseIndex(The,13,13)
PhraseIndex(Sopranos,14,14)

//[u'List', u'All', u'Episodes', u'Of', u'The', u'First', u'Season', u'Of', u'The', u'Hbo', u'Television', u'Series', u'The', u'Sopranos']
//List all episodes of the first season of the HBO television series The Sopranos.

//La ligne est isolée 
PhrasePosTag(List,VB)
PhrasePosTag(All,DT)
PhrasePosTag(Episodes,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(First,JJ)
PhrasePosTag(Season,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Hbo,NNP)
PhrasePosTag(Television,NN)
PhrasePosTag(Series,NN)
PhrasePosTag(The,DT)
PhrasePosTag(Sopranos,NNPS)
phraseDepTag(Sopranos,List,root)
phraseDepTag(List,Sopranos,xcomp)
phraseDepTag(Episodes,All,det)
phraseDepTag(Episodes,Season,nmod:of)
phraseDepTag(Season,Of,case)
phraseDepTag(Season,The,det)
phraseDepTag(Season,First,amod)
phraseDepTag(Season,Series,nmod:of)
phraseDepTag(Series,Of,case)
phraseDepTag(Series,The,det)
phraseDepTag(Series,Hbo,compound)
phraseDepTag(Series,Television,compound)
phraseDepTag(Sopranos,Episodes,nsubj)
phraseDepTag(Sopranos,The,det)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'series'), ('http://dbpedia.org/resource/', 'The_Sopranos')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'seasonNumber'), '1')]

ResourceType(Dbo_Series,Relation)
0.83 PriorMatchScore(Series,Series)


ResourceType(Dbr_The_Sopranos,Entity)
0.8 PriorMatchScore(The_Sopranos,Sopranos)


ResourceType(Dbo_Seasonnumber,Relation)
0.55 PriorMatchScore(Seasonnumber,Season)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos . ?uri dbo:seasonNumber 1 . }


//Who produced the most films? 
//[u'Who', u'produced', u'the', u'most', u'films', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(produced,2,2)
PhraseIndex(the,3,3)
PhraseIndex(most,4,4)
PhraseIndex(films,5,5)
PhrasePosTag(Who,WP)
PhrasePosTag(Produced,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Most,RBS)
PhrasePosTag(Films,NNS)
PhraseDepTag(Films,Produced,root)
PhraseDepTag(Produced,Who,nsubj)
PhraseDepTag(Produced,Most,advmod)
PhraseDepTag(Produced,Films,dobj)
PhraseDepTag(Most,The,det)
//[(('http://dbpedia.org/resource/', 'John_F._Kennedy'), ('http://dbpedia.org/ontology/', 'deathPlace'), SparqlVar('uri')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City'))]

ResourceType(Dbr_John_F._Kennedy,Entity)

ResourceType(Dbo_Deathplace,Relation)

ResourceType(City,Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:deathPlace ?uri . ?uri rdf:type dbo:City . }


//Is there a video game called Battle Chess? 
//[u'Is', u'there', u'a', u'video', u'game', u'called', u'Battle', u'Chess', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(there,2,2)
PhraseIndex(a,3,3)
PhraseIndex(video,4,4)
PhraseIndex(game,5,5)
PhraseIndex(called,6,6)
PhraseIndex(Battle,7,7)
PhraseIndex(Chess,8,8)
PhrasePosTag(Is,VBZ)
PhrasePosTag(There,EX)
PhrasePosTag(A,DT)
PhrasePosTag(Video,NN)
PhrasePosTag(Game,NN)
PhrasePosTag(Called,VBN)
PhrasePosTag(Battle,NNP)
PhrasePosTag(Chess,NNP)
PhraseDepTag(Chess,Is,root)
PhraseDepTag(Is,There,expl)
PhraseDepTag(Is,Game,nsubj)
PhraseDepTag(Game,A,det)
PhraseDepTag(Game,Video,compound)
PhraseDepTag(Game,Called,acl)
PhraseDepTag(Called,Chess,dobj)
PhraseDepTag(Chess,Battle,compound)
//[(('http://dbpedia.org/resource/', 'Nanga_Parbat'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (('http://dbpedia.org/resource/', 'Nanga_Parbat'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (('http://dbpedia.org/resource/', 'Nanga_Parbat'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain'))]

ResourceType(Dbr_Nanga_Parbat,Entity)

ResourceType(Dbo_Elevation,Relation)

ResourceType(Mountain,Class)

ResourceType(Dbr_Nanga_Parbat,Entity)

ResourceType(Dbo_Elevation,Relation)

ResourceType(Mountain,Class)

ResourceType(Dbr_Nanga_Parbat,Entity)

ResourceType(Dbo_Elevation,Relation)

ResourceType(Mountain,Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Nanga_Parbat dbo:elevation ?elevation . ?uri rdf:type dbo:Mountain . { ?uri dbo:elevation ?otherelevation . } UNION { ?uri dbp:elevationM ?otherelevation . } FILTER (?otherelevation > ?elevation) . }


//Who created Wikipedia? 
//[u'Who', u'created', u'Wikipedia', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(created,2,2)
PhraseIndex(Wikipedia,3,3)
PhrasePosTag(Who,WP)
PhrasePosTag(Created,VBD)
PhrasePosTag(Wikipedia,NNP)
PhraseDepTag(Wikipedia,Created,root)
PhraseDepTag(Created,Who,nsubj)
PhraseDepTag(Created,Wikipedia,dobj)
//[(('http://dbpedia.org/resource/', 'Wikipedia'), ('http://dbpedia.org/ontology/', 'author'), SparqlVar('uri'))]

ResourceType(Dbr_Wikipedia,Entity)
1.0 PriorMatchScore(Wikipedia,Wikipedia)


ResourceType(Dbo_Author,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Wikipedia dbo:author ?uri . }


//Give me all actors starring in Last Action Hero. 
//[u'Give', u'me', u'all', u'actors', u'starring', u'in', u'Last', u'Action', u'Hero', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(actors,4,4)
PhraseIndex(starring,5,5)
PhraseIndex(in,6,6)
PhraseIndex(Last,7,7)
PhraseIndex(Action,8,8)
PhraseIndex(Hero,9,9)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Actors,NNS)
PhrasePosTag(Starring,VBG)
PhrasePosTag(In,IN)
PhrasePosTag(Last,JJ)
PhrasePosTag(Action,NNP)
PhrasePosTag(Hero,NNP)
PhraseDepTag(Hero,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Actors,dobj)
PhraseDepTag(Actors,All,det)
PhraseDepTag(Actors,Starring,acl)
PhraseDepTag(Starring,Hero,nmod:in)
PhraseDepTag(Hero,In,case)
PhraseDepTag(Hero,Last,amod)
PhraseDepTag(Hero,Action,compound)
//[(('http://dbpedia.org/resource/', 'Last_Action_Hero'), ('http://dbpedia.org/ontology/', 'starring'), SparqlVar('uri'))]

ResourceType(Dbr_Last_Action_Hero,Entity)
0.54 PriorMatchScore(Last_Action_Hero,Action)


ResourceType(Dbo_Starring,Relation)
0.87 PriorMatchScore(Starring,Starring)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Last_Action_Hero dbo:starring ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(Software,2,2)
PhraseIndex(Has,3,3)
PhraseIndex(Been,4,4)
PhraseIndex(Developed,5,5)
PhraseIndex(By,6,6)
PhraseIndex(Organizations,7,7)
PhraseIndex(Founded,8,8)
PhraseIndex(In,9,9)
PhraseIndex(California,10,10)

//[u'Which', u'Software', u'Has', u'Been', u'Developed', u'By', u'Organizations', u'Founded', u'In', u'California']
//Which software has been developed by organizations founded in California?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Software,NN)
PhrasePosTag(Has,VBZ)
PhrasePosTag(Been,VBN)
PhrasePosTag(Developed,VBN)
PhrasePosTag(By,IN)
PhrasePosTag(Organizations,NNS)
PhrasePosTag(Founded,VBN)
PhrasePosTag(In,IN)
PhrasePosTag(California,NNP)
phraseDepTag(California,Developed,root)
phraseDepTag(Software,Which,det)
phraseDepTag(Developed,Software,nsubjpass)
phraseDepTag(Developed,Has,aux)
phraseDepTag(Developed,Been,auxpass)
phraseDepTag(Developed,Organizations,nmod:agent)
phraseDepTag(Organizations,By,case)
phraseDepTag(Organizations,Founded,acl)
phraseDepTag(Founded,California,nmod:in)
phraseDepTag(California,In,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Software')), (SparqlVar('company'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('company')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Software')), (SparqlVar('company'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('company'))]

ResourceType(Software,Class)
1.0 PriorMatchScore(Software,Software)


ResourceType(Company,Class)

ResourceType(Dbo_Developer,Relation)
0.77 PriorMatchScore(Developer,Developed)


ResourceType(Software,Class)
1.0 PriorMatchScore(Software,Software)


ResourceType(Company,Class)

ResourceType(Dbo_Developer,Relation)
0.77 PriorMatchScore(Developer,Developed)

//PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Software . ?company rdf:type dbo:Company . ?uri dbo:developer ?company . { ?company dbo:foundationPlace res:California . } UNION { ?company dbp:foundation res:California . } }


PhraseIndex(Which,1,1)
PhraseIndex(Companies,2,2)
PhraseIndex(Work,3,3)
PhraseIndex(In,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Aerospace,6,6)
PhraseIndex(Industry,7,7)
PhraseIndex(As,8,8)
PhraseIndex(Well,9,9)
PhraseIndex(As,10,10)
PhraseIndex(In,11,11)
PhraseIndex(Medicine,12,12)

//[u'Which', u'Companies', u'Work', u'In', u'The', u'Aerospace', u'Industry', u'As', u'Well', u'As', u'In', u'Medicine']
//Which companies work in the aerospace industry as well as in medicine?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Companies,NNS)
PhrasePosTag(Work,VBP)
PhrasePosTag(In,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Aerospace,NN)
PhrasePosTag(Industry,NN)
PhrasePosTag(As,RB)
PhrasePosTag(Well,RB)
PhrasePosTag(As,IN)
PhrasePosTag(In,IN)
PhrasePosTag(Medicine,NN)
phraseDepTag(Medicine,Work,root)
phraseDepTag(Work,Which,dobj)
phraseDepTag(Work,Companies,nsubj)
phraseDepTag(Work,Work,conj:and)
phraseDepTag(Work,Industry,nmod:in)
phraseDepTag(Work,As,cc)
phraseDepTag(Work,Companies,nsubj)
phraseDepTag(Work,Medicine,nmod:in)
phraseDepTag(Industry,In,case)
phraseDepTag(Industry,The,det)
phraseDepTag(Industry,Aerospace,compound)
phraseDepTag(As,Well,mwe)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'industry'), ('http://dbpedia.org/resource/', 'Aerospace')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'industry'), ('http://dbpedia.org/resource/', 'Medicine'))]

ResourceType(Company,Class)
0.75 PriorMatchScore(Company,Companies)


ResourceType(Dbo_Industry,Relation)
0.87 PriorMatchScore(Industry,Industry)


ResourceType(Dbr_Aerospace,Entity)
1.0 PriorMatchScore(Aerospace,Aerospace)


ResourceType(Dbo_Industry,Relation)
0.87 PriorMatchScore(Industry,Industry)


ResourceType(Dbr_Medicine,Entity)
1.0 PriorMatchScore(Medicine,Medicine)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company . ?uri dbo:industry res:Aerospace . ?uri dbo:industry res:Medicine . }


//Is Christian Bale starring in Velvet Goldmine? 
//[u'Is', u'Christian', u'Bale', u'starring', u'in', u'Velvet', u'Goldmine', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(Christian,2,2)
PhraseIndex(Bale,3,3)
PhraseIndex(starring,4,4)
PhraseIndex(in,5,5)
PhraseIndex(Velvet,6,6)
PhraseIndex(Goldmine,7,7)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Christian,NNP)
PhrasePosTag(Bale,NNP)
PhrasePosTag(Starring,VBG)
PhrasePosTag(In,IN)
PhrasePosTag(Velvet,NNP)
PhrasePosTag(Goldmine,NNP)
PhraseDepTag(Goldmine,Starring,root)
PhraseDepTag(Bale,Christian,compound)
PhraseDepTag(Starring,Is,aux)
PhraseDepTag(Starring,Bale,nsubj)
PhraseDepTag(Starring,Goldmine,nmod:in)
PhraseDepTag(Goldmine,In,case)
PhraseDepTag(Goldmine,Velvet,compound)
//[(('http://dbpedia.org/resource/', 'Velvet_Goldmine'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Christian_Bale'))]

ResourceType(Dbr_Velvet_Goldmine,Entity)
0.57 PriorMatchScore(Velvet_Goldmine,Velvet)

0.69 PriorMatchScore(Velvet_Goldmine,Goldmine)


ResourceType(Dbo_Starring,Relation)
0.87 PriorMatchScore(Starring,Starring)


ResourceType(Dbr_Christian_Bale,Entity)
0.78 PriorMatchScore(Christian_Bale,Christian)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Velvet_Goldmine dbo:starring res:Christian_Bale . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Websites,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Companies,6,6)
PhraseIndex(With,7,7)
PhraseIndex(More,8,8)
PhraseIndex(Than,9,9)
PhraseIndex(500000,10,10)
PhraseIndex(Employees,11,11)

//[u'Give', u'Me', u'The', u'Websites', u'Of', u'Companies', u'With', u'More', u'Than', u'500000', u'Employees']
//Give me the websites of companies with more than 500000 employees.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(The,DT)
PhrasePosTag(Websites,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(Companies,NNS)
PhrasePosTag(With,IN)
PhrasePosTag(More,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(500000,CD)
PhrasePosTag(Employees,NNS)
phraseDepTag(Employees,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Websites,dobj)
phraseDepTag(Websites,The,det)
phraseDepTag(Websites,Companies,nmod:of)
phraseDepTag(Companies,Of,case)
phraseDepTag(Companies,Employees,nmod:with)
phraseDepTag(More,Than,mwe)
phraseDepTag(500000,More,advmod)
phraseDepTag(Employees,With,case)
phraseDepTag(Employees,500000,nummod)
//[(SparqlVar('c'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('c'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('c'), ('http://dbpedia.org/property/', 'homepage'), SparqlVar('string'))]

ResourceType(Company,Class)
0.75 PriorMatchScore(Company,Companies)


ResourceType(Company,Class)
0.75 PriorMatchScore(Company,Companies)


ResourceType(Homepage,Class)
0.58 PriorMatchScore(Homepage,Companies)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> SELECT DISTINCT ?string WHERE { ?c rdf:type dbo:Company . { ?c dbo:numberOfEmployees ?employees . } UNION { ?c dbp:numEmployees ?employees . } FILTER( xsd:integer(?employees) > 500000 ) . ?c dbp:homepage ?string . }


//Which actors were born in Germany? 
//[u'Which', u'actors', u'were', u'born', u'in', u'Germany', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(actors,2,2)
PhraseIndex(were,3,3)
PhraseIndex(born,4,4)
PhraseIndex(in,5,5)
PhraseIndex(Germany,6,6)
PhrasePosTag(Which,WDT)
PhrasePosTag(Actors,NNS)
PhrasePosTag(Were,VBD)
PhrasePosTag(Born,VBN)
PhrasePosTag(In,IN)
PhrasePosTag(Germany,NNP)
PhraseDepTag(Germany,Born,root)
PhraseDepTag(Actors,Which,det)
PhraseDepTag(Born,Actors,nsubjpass)
PhraseDepTag(Born,Were,auxpass)
PhraseDepTag(Born,Germany,nmod:in)
PhraseDepTag(Germany,In,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Actor')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Actor'))]

ResourceType(Actor,Class)
0.90 PriorMatchScore(Actor,Actors)


ResourceType(Actor,Class)
0.90 PriorMatchScore(Actor,Actors)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Actor . { ?uri dbo:birthPlace res:Germany . } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country res:Germany . } }


//Which caves have more than 3 entrances? 
//[u'Which', u'caves', u'have', u'more', u'than', u'3', u'entrances', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(caves,2,2)
PhraseIndex(have,3,3)
PhraseIndex(more,4,4)
PhraseIndex(than,5,5)
PhraseIndex(3,6,6)
PhraseIndex(entrances,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Caves,NNS)
PhrasePosTag(Have,VBP)
PhrasePosTag(More,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(3,CD)
PhrasePosTag(Entrances,NNS)
PhraseDepTag(Entrances,Have,root)
PhraseDepTag(Caves,Which,det)
PhraseDepTag(Have,Caves,nsubj)
PhraseDepTag(Have,Entrances,dobj)
PhraseDepTag(More,Than,mwe)
PhraseDepTag(3,More,advmod)
PhraseDepTag(Entrances,3,nummod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'entranceCount'), SparqlVar('entrance')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'entranceCount'), SparqlVar('entrance'))]

ResourceType(Cave,Class)
0.88 PriorMatchScore(Cave,Caves)

0.75 PriorMatchScore(Cave,Have)


ResourceType(Entrancecount,Class)
0.63 PriorMatchScore(Entrancecount,Entrances)


ResourceType(Cave,Class)
0.88 PriorMatchScore(Cave,Caves)

0.75 PriorMatchScore(Cave,Have)


ResourceType(Entrancecount,Class)
0.63 PriorMatchScore(Entrancecount,Entrances)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Cave . ?uri dbp:entranceCount ?entrance . FILTER (?entrance > 3) . }


//Is the wife of president Obama called Michelle? 
//[u'Is', u'the', u'wife', u'of', u'president', u'Obama', u'called', u'Michelle', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(the,2,2)
PhraseIndex(wife,3,3)
PhraseIndex(of,4,4)
PhraseIndex(president,5,5)
PhraseIndex(Obama,6,6)
PhraseIndex(called,7,7)
PhraseIndex(Michelle,8,8)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Wife,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(President,NN)
PhrasePosTag(Obama,NNP)
PhrasePosTag(Called,VBD)
PhrasePosTag(Michelle,NNP)
PhraseDepTag(Michelle,Obama,root)
PhraseDepTag(Wife,The,det)
PhraseDepTag(Obama,Is,cop)
PhraseDepTag(Obama,Wife,nsubj)
PhraseDepTag(Obama,Of,advmod)
PhraseDepTag(Obama,President,dep)
PhraseDepTag(Obama,Called,acl:relcl)
PhraseDepTag(Called,Michelle,dobj)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'producer'), ('http://dbpedia.org/resource/', 'Hal_Roach'))]

ResourceType(Film,Class)

ResourceType(Dbo_Producer,Relation)

ResourceType(Dbr_Hal_Roach,Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:producer res:Hal_Roach . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Video,4,4)
PhraseIndex(Games,5,5)
PhraseIndex(Published,6,6)
PhraseIndex(By,7,7)
PhraseIndex(Mean,8,8)
PhraseIndex(Hamster,9,9)
PhraseIndex(Software,10,10)

//[u'Give', u'Me', u'All', u'Video', u'Games', u'Published', u'By', u'Mean', u'Hamster', u'Software']
//Give me all video games published by Mean Hamster Software.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Video,NN)
PhrasePosTag(Games,NNS)
PhrasePosTag(Published,VBN)
PhrasePosTag(By,IN)
PhrasePosTag(Mean,NN)
PhrasePosTag(Hamster,NNP)
PhrasePosTag(Software,NNP)
phraseDepTag(Software,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Games,dobj)
phraseDepTag(Games,All,det)
phraseDepTag(Games,Video,compound)
phraseDepTag(Games,Published,acl)
phraseDepTag(Published,Software,nmod:by)
phraseDepTag(Software,By,case)
phraseDepTag(Software,Mean,compound)
phraseDepTag(Software,Hamster,compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'VideoGame')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'publisher'), ('http://dbpedia.org/resource/', 'Mean_Hamster_Software'))]

ResourceType(VideoGame,Class)
0.71 PriorMatchScore(VideoGame,Video)

0.57 PriorMatchScore(VideoGame,Games)


ResourceType(Dbo_Publisher,Relation)
0.77 PriorMatchScore(Publisher,Published)


ResourceType(Dbr_Mean_Hamster_Software,Entity)
0.55 PriorMatchScore(Mean_Hamster_Software,Software)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:VideoGame . ?uri dbo:publisher res:Mean_Hamster_Software . }


//Which languages are spoken in Estonia? 
//[u'Which', u'languages', u'are', u'spoken', u'in', u'Estonia', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(languages,2,2)
PhraseIndex(are,3,3)
PhraseIndex(spoken,4,4)
PhraseIndex(in,5,5)
PhraseIndex(Estonia,6,6)
PhrasePosTag(Which,WDT)
PhrasePosTag(Languages,NNS)
PhrasePosTag(Are,VBP)
PhrasePosTag(Spoken,VBN)
PhrasePosTag(In,IN)
PhrasePosTag(Estonia,NNP)
PhraseDepTag(Estonia,Spoken,root)
PhraseDepTag(Languages,Which,det)
PhraseDepTag(Spoken,Languages,nsubjpass)
PhraseDepTag(Spoken,Are,auxpass)
PhraseDepTag(Spoken,Estonia,nmod:in)
PhraseDepTag(Estonia,In,case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'spokenIn'), ('http://dbpedia.org/resource/', 'Estonia'))]

ResourceType(Dbo_Spokenin,Relation)
0.71 PriorMatchScore(Spokenin,Spoken)


ResourceType(Dbr_Estonia,Entity)
1.0 PriorMatchScore(Estonia,Estonia)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:spokenIn res:Estonia . }


//How many Aldi stores are there? 
//[u'How', u'many', u'Aldi', u'stores', u'are', u'there', u'?']
PhraseIndex(How,1,1)
PhraseIndex(many,2,2)
PhraseIndex(Aldi,3,3)
PhraseIndex(stores,4,4)
PhraseIndex(are,5,5)
PhraseIndex(there,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Aldi,NNP)
PhrasePosTag(Stores,NNS)
PhrasePosTag(Are,VBP)
PhrasePosTag(There,EX)
PhraseDepTag(There,Are,root)
PhraseDepTag(Many,How,advmod)
PhraseDepTag(Aldi,Many,amod)
PhraseDepTag(Aldi,Stores,dep)
PhraseDepTag(Are,Aldi,nsubj)
PhraseDepTag(Are,There,expl)
//[(('http://dbpedia.org/resource/', 'Aldi'), ('http://dbpedia.org/ontology/', 'numberOfLocations'), SparqlVar('number'))]

ResourceType(Dbr_Aldi,Entity)
1.0 PriorMatchScore(Aldi,Aldi)


ResourceType(Dbo_Numberoflocations,Relation)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?number WHERE { res:Aldi dbo:numberOfLocations ?number . }


PhraseIndex(Which,1,1)
PhraseIndex(Capitals,2,2)
PhraseIndex(In,3,3)
PhraseIndex(Europe,4,4)
PhraseIndex(Were,5,5)
PhraseIndex(Host,6,6)
PhraseIndex(Cities,7,7)
PhraseIndex(Of,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Summer,10,10)
PhraseIndex(Olympic,11,11)
PhraseIndex(Games,12,12)

//[u'Which', u'Capitals', u'In', u'Europe', u'Were', u'Host', u'Cities', u'Of', u'The', u'Summer', u'Olympic', u'Games']
//Which capitals in Europe were host cities of the summer olympic games?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Capitals,NNS)
PhrasePosTag(In,IN)
PhrasePosTag(Europe,NNP)
PhrasePosTag(Were,VBD)
PhrasePosTag(Host,NN)
PhrasePosTag(Cities,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Summer,NN)
PhrasePosTag(Olympic,JJ)
PhrasePosTag(Games,NNS)
phraseDepTag(Games,Were,root)
phraseDepTag(Capitals,Which,det)
phraseDepTag(Capitals,Europe,nmod:in)
phraseDepTag(Europe,In,case)
phraseDepTag(Were,Capitals,dep)
phraseDepTag(Were,Cities,nsubj)
phraseDepTag(Cities,Host,compound)
phraseDepTag(Cities,Games,nmod:of)
phraseDepTag(Games,Of,case)
phraseDepTag(Games,The,det)
phraseDepTag(Games,Summer,compound)
phraseDepTag(Games,Olympic,amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'CapitalsInEurope')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'HostCitiesOfTheSummerOlympicGames'))]

ResourceType(CapitalsInEurope,Class)
0.66 PriorMatchScore(CapitalsInEurope,Capitals)

0.54 PriorMatchScore(CapitalsInEurope,Europe)


ResourceType(HostCitiesOfTheSummerOlympicGames,Class)
//PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:CapitalsInEurope . ?uri rdf:type yago:HostCitiesOfTheSummerOlympicGames . }


//Who was the first president of the United States? 
//[u'Who', u'was', u'the', u'first', u'president', u'of', u'the', u'United', u'States', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(was,2,2)
PhraseIndex(the,3,3)
PhraseIndex(first,4,4)
PhraseIndex(president,5,5)
PhraseIndex(of,6,6)
PhraseIndex(the,7,7)
PhraseIndex(United,8,8)
PhraseIndex(States,9,9)
PhrasePosTag(Who,WP)
PhrasePosTag(Was,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(First,JJ)
PhrasePosTag(President,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(United,NNP)
PhrasePosTag(States,NNPS)
PhraseDepTag(States,Who,root)
PhraseDepTag(Who,Was,cop)
PhraseDepTag(Who,President,nsubj)
PhraseDepTag(President,The,det)
PhraseDepTag(President,First,amod)
PhraseDepTag(President,States,nmod:of)
PhraseDepTag(States,Of,case)
PhraseDepTag(States,The,det)
PhraseDepTag(States,United,compound)
PhraseIndex(Which,1,1)
PhraseIndex(Music,2,2)
PhraseIndex(Albums,3,3)
PhraseIndex(Contain,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Song,6,6)
PhraseIndex(Last,7,7)
PhraseIndex(Christmas,8,8)

//[u'Which', u'Music', u'Albums', u'Contain', u'The', u'Song', u'Last', u'Christmas']
//Which music albums contain the song Last Christmas?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Music,NN)
PhrasePosTag(Albums,NNS)
PhrasePosTag(Contain,VBP)
PhrasePosTag(The,DT)
PhrasePosTag(Song,NN)
PhrasePosTag(Last,JJ)
PhrasePosTag(Christmas,NNP)
phraseDepTag(Christmas,Contain,root)
phraseDepTag(Albums,Which,det)
phraseDepTag(Albums,Music,compound)
phraseDepTag(Contain,Albums,nsubj)
phraseDepTag(Contain,Song,dobj)
phraseDepTag(Song,The,det)
phraseDepTag(Song,Christmas,nmod:tmod)
phraseDepTag(Christmas,Last,amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Airport')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Airport'))]

ResourceType(Airport,Class)

ResourceType(Airport,Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Airport . { ?uri dbo:location res:California . } UNION { ?uri dbo:city res:California . } UNION { ?uri dbo:city ?city . ?city dbo:isPartOf res:California . } UNION { ?uri dbo:operator res:California . } }


PhraseIndex(Which,1,1)
PhraseIndex(States,2,2)
PhraseIndex(Of,3,3)
PhraseIndex(Germany,4,4)
PhraseIndex(Are,5,5)
PhraseIndex(Governed,6,6)
PhraseIndex(By,7,7)
PhraseIndex(The,8,8)
PhraseIndex(Social,9,9)
PhraseIndex(Democratic,10,10)
PhraseIndex(Party,11,11)

//[u'Which', u'States', u'Of', u'Germany', u'Are', u'Governed', u'By', u'The', u'Social', u'Democratic', u'Party']
//Which states of Germany are governed by the Social Democratic Party?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(States,NNS)
PhrasePosTag(Of,IN)
PhrasePosTag(Germany,NNP)
PhrasePosTag(Are,VBP)
PhrasePosTag(Governed,VBN)
PhrasePosTag(By,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Social,NNP)
PhrasePosTag(Democratic,NNP)
PhrasePosTag(Party,NNP)
phraseDepTag(Party,Governed,root)
phraseDepTag(States,Which,det)
phraseDepTag(States,Germany,nmod:of)
phraseDepTag(Germany,Of,case)
phraseDepTag(Governed,States,nsubjpass)
phraseDepTag(Governed,Are,auxpass)
phraseDepTag(Governed,Party,nmod:agent)
phraseDepTag(Party,By,case)
phraseDepTag(Party,The,det)
phraseDepTag(Party,Social,compound)
phraseDepTag(Party,Democratic,compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'RecordLabel')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'genre'), ('http://dbpedia.org/resource/', 'Grunge')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Canada'))]

ResourceType(RecordLabel,Class)

ResourceType(Dbo_Genre,Relation)

ResourceType(Dbr_Grunge,Entity)
0.57 PriorMatchScore(Grunge,Governed)


ResourceType(Dbo_Country,Relation)

ResourceType(Dbr_Canada,Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:RecordLabel . ?uri dbo:genre res:Grunge . ?uri dbo:country res:Canada . }


//Which country has the most official languages? 
//[u'Which', u'country', u'has', u'the', u'most', u'official', u'languages', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(country,2,2)
PhraseIndex(has,3,3)
PhraseIndex(the,4,4)
PhraseIndex(most,5,5)
PhraseIndex(official,6,6)
PhraseIndex(languages,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Country,NN)
PhrasePosTag(Has,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Most,RBS)
PhrasePosTag(Official,JJ)
PhrasePosTag(Languages,NNS)
PhraseDepTag(Languages,Has,root)
PhraseDepTag(Country,Which,det)
PhraseDepTag(Has,Country,nsubj)
PhraseDepTag(Has,Languages,dobj)
PhraseDepTag(Languages,The,det)
PhraseDepTag(Languages,Most,advmod)
PhraseDepTag(Languages,Official,amod)
//[(('http://dbpedia.org/resource/', 'GIMP'), ('http://dbpedia.org/ontology/', 'programmingLanguage'), SparqlVar('uri'))]

ResourceType(Dbr_Gimp,Entity)

ResourceType(Dbo_Programminglanguage,Relation)
0.57 PriorMatchScore(Programminglanguage,Languages)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:GIMP dbo:programmingLanguage ?uri . }


//Who produced films starring Natalie Portman? 
//[u'Who', u'produced', u'films', u'starring', u'Natalie', u'Portman', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(produced,2,2)
PhraseIndex(films,3,3)
PhraseIndex(starring,4,4)
PhraseIndex(Natalie,5,5)
PhraseIndex(Portman,6,6)
PhrasePosTag(Who,WP)
PhrasePosTag(Produced,VBD)
PhrasePosTag(Films,NNS)
PhrasePosTag(Starring,VBG)
PhrasePosTag(Natalie,NNP)
PhrasePosTag(Portman,NNP)
PhraseDepTag(Portman,Produced,root)
PhraseDepTag(Produced,Who,nsubj)
PhraseDepTag(Produced,Films,dobj)
PhraseDepTag(Produced,Starring,xcomp)
PhraseDepTag(Starring,Portman,dobj)
PhraseDepTag(Portman,Natalie,compound)
//[(SparqlVar('film'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('film'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Natalie_Portman')), (SparqlVar('film'), ('http://dbpedia.org/ontology/', 'producer'), SparqlVar('uri'))]

ResourceType(Film,Class)
0.88 PriorMatchScore(Film,Films)


ResourceType(Dbo_Starring,Relation)
0.87 PriorMatchScore(Starring,Starring)


ResourceType(Dbr_Natalie_Portman,Entity)
0.63 PriorMatchScore(Natalie_Portman,Natalie)

0.63 PriorMatchScore(Natalie_Portman,Portman)


ResourceType(Dbo_Producer,Relation)
0.75 PriorMatchScore(Producer,Produced)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?film rdf:type dbo:Film . ?film dbo:starring res:Natalie_Portman . ?film dbo:producer ?uri . }


//Give me all movies with Tom Cruise. 
//[u'Give', u'me', u'all', u'movies', u'with', u'Tom', u'Cruise', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(movies,4,4)
PhraseIndex(with,5,5)
PhraseIndex(Tom,6,6)
PhraseIndex(Cruise,7,7)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Movies,NNS)
PhrasePosTag(With,IN)
PhrasePosTag(Tom,NNP)
PhrasePosTag(Cruise,NNP)
PhraseDepTag(Cruise,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Movies,dobj)
PhraseDepTag(Movies,All,det)
PhraseDepTag(Movies,Cruise,nmod:with)
PhraseDepTag(Cruise,With,case)
PhraseDepTag(Cruise,Tom,compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Tom_Cruise'))]

ResourceType(Film,Class)

ResourceType(Dbo_Starring,Relation)

ResourceType(Dbr_Tom_Cruise,Entity)
0.75 PriorMatchScore(Tom_Cruise,Cruise)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film. ?uri dbo:starring res:Tom_Cruise . }


PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Films,3,3)
PhraseIndex(Did,4,4)
PhraseIndex(Julia,5,5)
PhraseIndex(Roberts,6,6)
PhraseIndex(As,7,7)
PhraseIndex(Well,8,8)
PhraseIndex(As,9,9)
PhraseIndex(Richard,10,10)
PhraseIndex(Gere,11,11)
PhraseIndex(Play,12,12)

//[u'In', u'Which', u'Films', u'Did', u'Julia', u'Roberts', u'As', u'Well', u'As', u'Richard', u'Gere', u'Play']
//In which films did Julia Roberts as well as Richard Gere play?

//La ligne est isolée 
PhrasePosTag(In,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(Films,NNS)
PhrasePosTag(Did,VBD)
PhrasePosTag(Julia,NNP)
PhrasePosTag(Roberts,NNP)
PhrasePosTag(As,RB)
PhrasePosTag(Well,RB)
PhrasePosTag(As,IN)
PhrasePosTag(Richard,NNP)
PhrasePosTag(Gere,NNP)
PhrasePosTag(Play,VB)
phraseDepTag(Play,Play,root)
phraseDepTag(Films,In,case)
phraseDepTag(Films,Which,det)
phraseDepTag(Roberts,Julia,compound)
phraseDepTag(As,Well,mwe)
phraseDepTag(As,Gere,nmod:as)
phraseDepTag(Gere,As,case)
phraseDepTag(Gere,Richard,compound)
phraseDepTag(Play,Films,nmod:in)
phraseDepTag(Play,Did,aux)
phraseDepTag(Play,Roberts,nsubj)
phraseDepTag(Play,As,advmod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Julia_Roberts')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Richard_Gere'))]

ResourceType(Film,Class)
0.88 PriorMatchScore(Film,Films)


ResourceType(Dbo_Starring,Relation)

ResourceType(Dbr_Julia_Roberts,Entity)
0.55 PriorMatchScore(Julia_Roberts,Julia)

0.7 PriorMatchScore(Julia_Roberts,Roberts)


ResourceType(Dbo_Starring,Relation)

ResourceType(Dbr_Richard_Gere,Entity)
0.73 PriorMatchScore(Richard_Gere,Richard)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:starring res:Julia_Roberts . ?uri dbo:starring res:Richard_Gere. }


//Give me all female given names. 
//[u'Give', u'me', u'all', u'female', u'given', u'names', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(female,4,4)
PhraseIndex(given,5,5)
PhraseIndex(names,6,6)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Female,JJ)
PhrasePosTag(Given,JJ)
PhrasePosTag(Names,NNS)
PhraseDepTag(Names,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Names,dobj)
PhraseDepTag(Names,All,det)
PhraseDepTag(Names,Female,amod)
PhraseDepTag(Names,Given,amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'GivenName')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'gender'), ('http://dbpedia.org/resource/', 'Female'))]

ResourceType(GivenName,Class)
0.61 PriorMatchScore(GivenName,Give)

0.71 PriorMatchScore(GivenName,Given)

0.57 PriorMatchScore(GivenName,Names)


ResourceType(Dbo_Gender,Relation)

ResourceType(Dbr_Female,Entity)
1.0 PriorMatchScore(Female,Female)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:GivenName . ?uri dbo:gender res:Female . }


//Who wrote the book The Pillars of the Earth? 
//[u'Who', u'wrote', u'the', u'book', u'The', u'Pillars', u'of', u'the', u'Earth', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(wrote,2,2)
PhraseIndex(the,3,3)
PhraseIndex(book,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Pillars,6,6)
PhraseIndex(of,7,7)
PhraseIndex(the,8,8)
PhraseIndex(Earth,9,9)
PhrasePosTag(Who,WP)
PhrasePosTag(Wrote,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Book,NN)
PhrasePosTag(The,DT)
PhrasePosTag(Pillars,NNPS)
PhrasePosTag(Of,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Earth,NNP)
PhraseDepTag(Earth,Wrote,root)
PhraseDepTag(Wrote,Who,nsubj)
PhraseDepTag(Wrote,Book,iobj)
PhraseDepTag(Wrote,Pillars,dobj)
PhraseDepTag(Book,The,det)
PhraseDepTag(Pillars,The,det)
PhraseDepTag(Pillars,Earth,nmod:of)
PhraseDepTag(Earth,Of,case)
PhraseDepTag(Earth,The,det)
//[(('http://dbpedia.org/resource/', 'The_Pillars_of_the_Earth'), ('http://dbpedia.org/ontology/', 'author'), SparqlVar('uri'))]

ResourceType(Dbr_The_Pillars_Of_The_Earth,Entity)

ResourceType(Dbo_Author,Relation)
0.54 PriorMatchScore(Author,Earth)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri . }


//How many films did Leonardo DiCaprio star in? 
//[u'How', u'many', u'films', u'did', u'Leonardo', u'DiCaprio', u'star', u'in', u'?']
PhraseIndex(How,1,1)
PhraseIndex(many,2,2)
PhraseIndex(films,3,3)
PhraseIndex(did,4,4)
PhraseIndex(Leonardo,5,5)
PhraseIndex(DiCaprio,6,6)
PhraseIndex(star,7,7)
PhraseIndex(in,8,8)
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Films,NNS)
PhrasePosTag(Did,VBD)
PhrasePosTag(Leonardo,NNP)
PhrasePosTag(Dicaprio,NNP)
PhrasePosTag(Star,NN)
PhrasePosTag(In,IN)
PhraseDepTag(In,Did,root)
PhraseDepTag(Many,How,advmod)
PhraseDepTag(Films,Many,amod)
PhraseDepTag(Films,In,case)
PhraseDepTag(Did,Films,nmod:in)
PhraseDepTag(Did,Star,dobj)
PhraseDepTag(Star,Leonardo,compound)
PhraseDepTag(Star,Dicaprio,compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'SoccerClub')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'league'), ('http://dbpedia.org/resource/', 'Premier_League'))]

ResourceType(SoccerClub,Class)

ResourceType(Dbo_League,Relation)

ResourceType(Dbr_Premier_League,Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:SoccerClub . ?uri dbo:league res:Premier_League . }


//In which U.S. state is Mount McKinley located? 
//[u'In', u'which', u'U.S.', u'state', u'is', u'Mount', u'McKinley', u'located', u'?']
PhraseIndex(In,1,1)
PhraseIndex(which,2,2)
PhraseIndex(U.S.,3,3)
PhraseIndex(state,4,4)
PhraseIndex(is,5,5)
PhraseIndex(Mount,6,6)
PhraseIndex(McKinley,7,7)
PhraseIndex(located,8,8)
PhrasePosTag(In,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(State,NN)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Mount,NNP)
PhrasePosTag(Mckinley,NNP)
PhrasePosTag(Located,JJ)
PhraseDepTag(Located,Located,root)
PhraseDepTag(State,In,case)
PhraseDepTag(State,Which,det)
PhraseDepTag(State,U.S.,compound)
PhraseDepTag(Mckinley,Mount,compound)
PhraseDepTag(Located,State,nmod:in)
PhraseDepTag(Located,Is,cop)
PhraseDepTag(Located,Mckinley,nsubj)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (('http://dbpedia.org/resource/', 'Mount_McKinley'), ('http://dbpedia.org/ontology/', 'locatedInArea'), SparqlVar('uri'))]

ResourceType(StatesOfTheUnitedStates,Class)

ResourceType(Dbr_Mount_Mckinley,Entity)
0.52 PriorMatchScore(Mount_Mckinley,Mount)

0.63 PriorMatchScore(Mount_Mckinley,Mckinley)


ResourceType(Dbo_Locatedinarea,Relation)
0.6 PriorMatchScore(Locatedinarea,Located)

//PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . res:Mount_McKinley dbo:locatedInArea ?uri . }


//When was Capcom founded? 
//[u'When', u'was', u'Capcom', u'founded', u'?']
PhraseIndex(When,1,1)
PhraseIndex(was,2,2)
PhraseIndex(Capcom,3,3)
PhraseIndex(founded,4,4)
PhrasePosTag(When,WRB)
PhrasePosTag(Was,VBD)
PhrasePosTag(Capcom,NNP)
PhrasePosTag(Founded,VBN)
PhraseDepTag(Founded,Founded,root)
PhraseDepTag(Founded,When,advmod)
PhraseDepTag(Founded,Was,auxpass)
PhraseDepTag(Founded,Capcom,nsubjpass)
//[(('http://dbpedia.org/resource/', 'Capcom'), ('http://dbpedia.org/ontology/', 'foundingDate'), SparqlVar('date'))]

ResourceType(Dbr_Capcom,Entity)
1.0 PriorMatchScore(Capcom,Capcom)


ResourceType(Dbo_Foundingdate,Relation)
0.52 PriorMatchScore(Foundingdate,Founded)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Capcom dbo:foundingDate ?date . }


//Which organizations were founded in 1930? 
//[u'Which', u'organizations', u'were', u'founded', u'in', u'1930', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(organizations,2,2)
PhraseIndex(were,3,3)
PhraseIndex(founded,4,4)
PhraseIndex(in,5,5)
PhraseIndex(1930,6,6)
PhrasePosTag(Which,WDT)
PhrasePosTag(Organizations,NNS)
PhrasePosTag(Were,VBD)
PhrasePosTag(Founded,VBN)
PhrasePosTag(In,IN)
PhrasePosTag(1930,CD)
PhraseDepTag(1930,Founded,root)
PhraseDepTag(Organizations,Which,det)
PhraseDepTag(Founded,Organizations,nsubjpass)
PhraseDepTag(Founded,Were,auxpass)
PhraseDepTag(Founded,1930,nmod:in)
PhraseDepTag(1930,In,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation'))]

ResourceType(Mountain,Class)

ResourceType(Dbo_Elevation,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain . ?uri dbo:elevation ?elevation . } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1


//Was Natalie Portman born in the United States? 
//[u'Was', u'Natalie', u'Portman', u'born', u'in', u'the', u'United', u'States', u'?']
PhraseIndex(Was,1,1)
PhraseIndex(Natalie,2,2)
PhraseIndex(Portman,3,3)
PhraseIndex(born,4,4)
PhraseIndex(in,5,5)
PhraseIndex(the,6,6)
PhraseIndex(United,7,7)
PhraseIndex(States,8,8)
PhrasePosTag(Was,VBD)
PhrasePosTag(Natalie,NNP)
PhrasePosTag(Portman,NNP)
PhrasePosTag(Born,VBN)
PhrasePosTag(In,IN)
PhrasePosTag(The,DT)
PhrasePosTag(United,NNP)
PhrasePosTag(States,NNPS)
PhraseDepTag(States,Born,root)
PhraseDepTag(Portman,Natalie,compound)
PhraseDepTag(Born,Was,auxpass)
PhraseDepTag(Born,Portman,nsubjpass)
PhraseDepTag(Born,States,nmod:in)
PhraseDepTag(States,In,case)
PhraseDepTag(States,The,det)
PhraseDepTag(States,United,compound)
//[(('http://dbpedia.org/resource/', 'Natalie_Portman'), ('http://dbpedia.org/ontology/', 'birthPlace'), SparqlVar('city')), (SparqlVar('city'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'United_States'))]

ResourceType(Dbr_Natalie_Portman,Entity)
0.63 PriorMatchScore(Natalie_Portman,Natalie)

0.63 PriorMatchScore(Natalie_Portman,Portman)


ResourceType(Dbo_Birthplace,Relation)

ResourceType(Dbo_Country,Relation)

ResourceType(Dbr_United_States,Entity)
0.63 PriorMatchScore(United_States,United)

0.63 PriorMatchScore(United_States,States)

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Natalie_Portman dbo:birthPlace ?city . ?city dbo:country res:United_States . }


PhraseIndex(Which,1,1)
PhraseIndex(Budget,2,2)
PhraseIndex(Did,3,3)
PhraseIndex(The,4,4)
PhraseIndex(First,5,5)
PhraseIndex(Movie,6,6)
PhraseIndex(Of,7,7)
PhraseIndex(Zdenek,8,8)
PhraseIndex(Sverak,9,9)
PhraseIndex(Have,10,10)

//[u'Which', u'Budget', u'Did', u'The', u'First', u'Movie', u'Of', u'Zdenek', u'Sverak', u'Have']
//Which budget did the first movie of Zdenek Sverak have?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Budget,NN)
PhrasePosTag(Did,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(First,JJ)
PhrasePosTag(Movie,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Zdenek,NNP)
PhrasePosTag(Sverak,NNP)
PhrasePosTag(Have,VB)
phraseDepTag(Have,Have,root)
phraseDepTag(Budget,Which,det)
phraseDepTag(Movie,The,det)
phraseDepTag(Movie,First,amod)
phraseDepTag(Movie,Sverak,nmod:of)
phraseDepTag(Sverak,Of,case)
phraseDepTag(Sverak,Zdenek,compound)
phraseDepTag(Have,Budget,dobj)
phraseDepTag(Have,Did,aux)
phraseDepTag(Have,Movie,nsubj)
PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Big,3,3)
PhraseIndex(Fires,4,4)
PhraseIndex(Struck,5,5)
PhraseIndex(Paris,6,6)
PhraseIndex(During,7,7)
PhraseIndex(The,8,8)
PhraseIndex(Middle,9,9)
PhraseIndex(Ages,10,10)

//[u'How', u'Many', u'Big', u'Fires', u'Struck', u'Paris', u'During', u'The', u'Middle', u'Ages']
//How many big fires struck Paris during the Middle Ages?

//La ligne est isolée 
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Big,JJ)
PhrasePosTag(Fires,NNS)
PhrasePosTag(Struck,VBD)
PhrasePosTag(Paris,NNP)
PhrasePosTag(During,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Middle,NNP)
PhrasePosTag(Ages,NNPS)
phraseDepTag(Ages,Struck,root)
phraseDepTag(Many,How,advmod)
phraseDepTag(Fires,Many,amod)
phraseDepTag(Fires,Big,amod)
phraseDepTag(Struck,Fires,nsubj)
phraseDepTag(Struck,Paris,dobj)
phraseDepTag(Struck,Ages,nmod:during)
phraseDepTag(Ages,During,case)
phraseDepTag(Ages,The,det)
phraseDepTag(Ages,Middle,compound)
//Is Jens Friebe a vegan? 
//[u'Is', u'Jens', u'Friebe', u'a', u'vegan', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(Jens,2,2)
PhraseIndex(Friebe,3,3)
PhraseIndex(a,4,4)
PhraseIndex(vegan,5,5)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Jens,NNP)
PhrasePosTag(Friebe,NNP)
PhrasePosTag(A,DT)
PhrasePosTag(Vegan,NN)
PhraseDepTag(Vegan,Vegan,root)
PhraseDepTag(Friebe,Jens,compound)
PhraseDepTag(Vegan,Is,cop)
PhraseDepTag(Vegan,Friebe,nsubj)
PhraseDepTag(Vegan,A,det)
//How often was Michael Jordan divorced? 
//[u'How', u'often', u'was', u'Michael', u'Jordan', u'divorced', u'?']
PhraseIndex(How,1,1)
PhraseIndex(often,2,2)
PhraseIndex(was,3,3)
PhraseIndex(Michael,4,4)
PhraseIndex(Jordan,5,5)
PhraseIndex(divorced,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(Often,RB)
PhrasePosTag(Was,VBD)
PhrasePosTag(Michael,NNP)
PhrasePosTag(Jordan,NNP)
PhrasePosTag(Divorced,VBN)
PhraseDepTag(Divorced,Divorced,root)
PhraseDepTag(Often,How,advmod)
PhraseDepTag(Jordan,Michael,compound)
PhraseDepTag(Divorced,Often,advmod)
PhraseDepTag(Divorced,Was,auxpass)
PhraseDepTag(Divorced,Jordan,nsubjpass)
//What is the most beautiful painting? 
//[u'What', u'is', u'the', u'most', u'beautiful', u'painting', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(most,4,4)
PhraseIndex(beautiful,5,5)
PhraseIndex(painting,6,6)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Most,RBS)
PhrasePosTag(Beautiful,JJ)
PhrasePosTag(Painting,NN)
PhraseDepTag(Painting,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Painting,nsubj)
PhraseDepTag(Beautiful,Most,advmod)
PhraseDepTag(Painting,The,det)
PhraseDepTag(Painting,Beautiful,amod)
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Animal,4,4)
PhraseIndex(Species,5,5)
PhraseIndex(That,6,6)
PhraseIndex(Live,7,7)
PhraseIndex(In,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Teutoburg,10,10)
PhraseIndex(Forest,11,11)

//[u'Give', u'Me', u'All', u'Animal', u'Species', u'That', u'Live', u'In', u'The', u'Teutoburg', u'Forest']
//Give me all animal species that live in the Teutoburg Forest.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Animal,NN)
PhrasePosTag(Species,NNS)
PhrasePosTag(That,WDT)
PhrasePosTag(Live,VBP)
PhrasePosTag(In,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Teutoburg,NNP)
PhrasePosTag(Forest,NNP)
phraseDepTag(Forest,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Species,dobj)
phraseDepTag(Species,All,det)
phraseDepTag(Species,Animal,compound)
phraseDepTag(Species,Live,acl:relcl)
phraseDepTag(Live,That,nsubj)
phraseDepTag(Live,Forest,nmod:in)
phraseDepTag(Forest,In,case)
phraseDepTag(Forest,The,det)
phraseDepTag(Forest,Teutoburg,compound)
