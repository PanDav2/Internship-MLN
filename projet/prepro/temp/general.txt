Give me all cosmonauts. 
[u'Give', u'me', u'all', u'cosmonauts', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Cosmonauts,4,4)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(cosmonauts,NNS)
phraseDepTag(cosmonauts,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,cosmonauts,dobj)
phraseDepTag(cosmonauts,all,det)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Astronaut')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Astronaut'))]
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Astronaut . { ?uri dbo:nationality res:Russia . } UNION { ?uri dbo:nationality res:Soviet_Union . } }


In which country does the Nile start? 
[u'In', u'which', u'country', u'does', u'the', u'Nile', u'start', u'?']
PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Country,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Nile,6,6)
PhraseIndex(Start,7,7)
PhrasePosTag(In,IN)
PhrasePosTag(which,WDT)
PhrasePosTag(country,NN)
PhrasePosTag(does,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(Nile,NNP)
PhrasePosTag(start,VB)
phraseDepTag(start,start,root)
phraseDepTag(country,In,case)
phraseDepTag(country,which,det)
phraseDepTag(Nile,the,det)
phraseDepTag(start,country,nmod:in)
phraseDepTag(start,does,aux)
phraseDepTag(start,Nile,nsubj)
[(('http://dbpedia.org/resource/', 'Nile'), ('http://dbpedia.org/ontology/', 'sourceCountry'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Nile dbo:sourceCountry ?uri . }


PhraseIndex(When,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Movie,4,4)
PhraseIndex(Worst,5,5)
PhraseIndex(Case,6,6)
PhraseIndex(Scenario,7,7)
PhraseIndex(Going,8,8)
PhraseIndex(To,9,9)
PhraseIndex(Be,10,10)
PhraseIndex(In,11,11)
PhraseIndex(Cinemas,12,12)
PhraseIndex(In,13,13)
PhraseIndex(The,14,14)
PhraseIndex(Netherlands,15,15)

[u'When', u'is', u'the', u'movie', u'Worst', u'Case', u'Scenario', u'going', u'to', u'be', u'in', u'cinemas', u'in', u'the', u'Netherlands']
When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?
	 La ligne est isolée 
PhrasePosTag(When,WRB)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(movie,NN)
PhrasePosTag(Worst,JJS)
PhrasePosTag(Case,NN)
PhrasePosTag(Scenario,NN)
PhrasePosTag(going,VBG)
PhrasePosTag(to,TO)
PhrasePosTag(be,VB)
PhrasePosTag(in,IN)
PhrasePosTag(cinemas,NNS)
PhrasePosTag(in,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Netherlands,NNP)
phraseDepTag(Netherlands,going,root)
phraseDepTag(movie,the,det)
phraseDepTag(movie,Scenario,dep)
phraseDepTag(Scenario,Worst,amod)
phraseDepTag(Scenario,Case,compound)
phraseDepTag(going,When,advmod)
phraseDepTag(going,is,aux)
phraseDepTag(going,movie,nsubj)
phraseDepTag(going,cinemas,xcomp)
phraseDepTag(cinemas,to,mark)
phraseDepTag(cinemas,be,cop)
phraseDepTag(cinemas,in,case)
phraseDepTag(cinemas,Netherlands,nmod:in)
phraseDepTag(Netherlands,in,case)
phraseDepTag(Netherlands,the,det)
PhraseIndex(Which,1,1)
PhraseIndex(German,2,2)
PhraseIndex(Cities,3,3)
PhraseIndex(Have,4,4)
PhraseIndex(More,5,5)
PhraseIndex(Than,6,6)
PhraseIndex(250000,7,7)
PhraseIndex(Inhabitants,8,8)

[u'Which', u'German', u'cities', u'have', u'more', u'than', u'250000', u'inhabitants']
Which German cities have more than 250000 inhabitants?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(German,JJ)
PhrasePosTag(cities,NNS)
PhrasePosTag(have,VBP)
PhrasePosTag(more,JJR)
PhrasePosTag(than,IN)
PhrasePosTag(250000,CD)
PhrasePosTag(inhabitants,NNS)
phraseDepTag(inhabitants,have,root)
phraseDepTag(cities,Which,det)
phraseDepTag(cities,German,amod)
phraseDepTag(have,cities,nsubj)
phraseDepTag(have,inhabitants,dobj)
phraseDepTag(more,than,mwe)
phraseDepTag(250000,more,advmod)
phraseDepTag(inhabitants,250000,nummod)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Germany')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('population')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Germany')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('population'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { { ?uri rdf:type dbo:City . } UNION { ?uri rdf:type dbo:Town . } ?uri dbo:country res:Germany . ?uri dbo:populationTotal ?population . FILTER ( ?population > 250000 ) }


Who was John F. Kennedy's vice president? 
[u'Who', u'was', u'John', u'F.', u'Kennedy', u"'s", u'vice', u'president', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Was,2,2)
PhraseIndex(John,3,3)
PhraseIndex(F.,4,4)
PhraseIndex(Kennedy,5,5)
PhraseIndex('S,6,6)
PhraseIndex(Vice,7,7)
PhraseIndex(President,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(was,VBD)
PhrasePosTag(John,NNP)
PhrasePosTag(F.,NNP)
PhrasePosTag(Kennedy,NNP)
PhrasePosTag('s,POS)
PhrasePosTag(vice,NN)
PhrasePosTag(president,NN)
phraseDepTag(president,Who,root)
phraseDepTag(Who,was,cop)
phraseDepTag(Who,president,nsubj)
phraseDepTag(Kennedy,John,compound)
phraseDepTag(Kennedy,F.,compound)
phraseDepTag(Kennedy,'s,case)
phraseDepTag(president,Kennedy,nmod:poss)
phraseDepTag(president,vice,compound)
[(('http://dbpedia.org/resource/', 'John_F._Kennedy'), ('http://dbpedia.org/ontology/', 'vicePresident'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:vicePresident ?uri . }


Who is the mayor of Berlin? 
[u'Who', u'is', u'the', u'mayor', u'of', u'Berlin', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Mayor,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Berlin,6,6)
PhrasePosTag(Who,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(mayor,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Berlin,NNP)
phraseDepTag(Berlin,Who,root)
phraseDepTag(Who,is,cop)
phraseDepTag(Who,mayor,nsubj)
phraseDepTag(mayor,the,det)
phraseDepTag(mayor,Berlin,nmod:of)
phraseDepTag(Berlin,of,case)
[(('http://dbpedia.org/resource/', 'Berlin'), ('http://dbpedia.org/ontology/', 'leader'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Berlin dbo:leader ?uri . }


PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Students,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Free,6,6)
PhraseIndex(University,7,7)
PhraseIndex(In,8,8)
PhraseIndex(Amsterdam,9,9)
PhraseIndex(Have,10,10)

[u'How', u'many', u'students', u'does', u'the', u'Free', u'University', u'in', u'Amsterdam', u'have']
How many students does the Free University in Amsterdam have?
	 La ligne est isolée 
PhrasePosTag(How,WRB)
PhrasePosTag(many,JJ)
PhrasePosTag(students,NNS)
PhrasePosTag(does,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(Free,NNP)
PhrasePosTag(University,NNP)
PhrasePosTag(in,IN)
PhrasePosTag(Amsterdam,NNP)
PhrasePosTag(have,VB)
phraseDepTag(have,have,root)
phraseDepTag(many,How,advmod)
phraseDepTag(students,many,amod)
phraseDepTag(University,the,det)
phraseDepTag(University,Free,compound)
phraseDepTag(University,Amsterdam,nmod:in)
phraseDepTag(Amsterdam,in,case)
phraseDepTag(have,students,dobj)
phraseDepTag(have,does,aux)
phraseDepTag(have,University,nsubj)
[(('http://dbpedia.org/resource/', 'Vrije_Universiteit'), ('http://dbpedia.org/ontology/', 'numberOfStudents'), SparqlVar('num'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Vrije_Universiteit dbo:numberOfStudents ?num . }


What is the second highest mountain on Earth? 
[u'What', u'is', u'the', u'second', u'highest', u'mountain', u'on', u'Earth', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Second,4,4)
PhraseIndex(Highest,5,5)
PhraseIndex(Mountain,6,6)
PhraseIndex(On,7,7)
PhraseIndex(Earth,8,8)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(second,JJ)
PhrasePosTag(highest,JJS)
PhrasePosTag(mountain,NN)
PhrasePosTag(on,IN)
PhrasePosTag(Earth,NNP)
phraseDepTag(Earth,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,mountain,nsubj)
phraseDepTag(What,Earth,dep)
phraseDepTag(mountain,the,det)
phraseDepTag(mountain,second,amod)
phraseDepTag(mountain,highest,amod)
phraseDepTag(Earth,on,case)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain . ?uri dbo:elevation ?elevation . } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Professional,4,4)
PhraseIndex(Skateboarders,5,5)
PhraseIndex(From,6,6)
PhraseIndex(Sweden,7,7)

[u'Give', u'me', u'all', u'professional', u'skateboarders', u'from', u'Sweden']
Give me all professional skateboarders from Sweden.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(professional,JJ)
PhrasePosTag(skateboarders,NNS)
PhrasePosTag(from,IN)
PhrasePosTag(Sweden,NNP)
phraseDepTag(Sweden,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,skateboarders,dobj)
phraseDepTag(skateboarders,all,det)
phraseDepTag(skateboarders,professional,amod)
phraseDepTag(skateboarders,Sweden,nmod:from)
phraseDepTag(Sweden,from,case)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Skateboarding')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Skateboarding'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Skateboarding . { ?uri dbo:birthPlace res:Sweden . } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country res:Sweden . } }


When was Alberta admitted as province? 
[u'When', u'was', u'Alberta', u'admitted', u'as', u'province', u'?']
PhraseIndex(When,1,1)
PhraseIndex(Was,2,2)
PhraseIndex(Alberta,3,3)
PhraseIndex(Admitted,4,4)
PhraseIndex(As,5,5)
PhraseIndex(Province,6,6)
PhrasePosTag(When,WRB)
PhrasePosTag(was,VBD)
PhrasePosTag(Alberta,NNP)
PhrasePosTag(admitted,VBD)
PhrasePosTag(as,IN)
PhrasePosTag(province,NN)
phraseDepTag(province,was,root)
phraseDepTag(was,When,advmod)
phraseDepTag(was,Alberta,nsubj)
phraseDepTag(Alberta,admitted,acl:relcl)
phraseDepTag(admitted,province,nmod:as)
phraseDepTag(province,as,case)
[(('http://dbpedia.org/resource/', 'Alberta'), ('http://dbpedia.org/property/', 'admittancedate'), SparqlVar('date'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Alberta dbp:admittancedate ?date . }


PhraseIndex(To,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Countries,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Himalayan,6,6)
PhraseIndex(Mountain,7,7)
PhraseIndex(System,8,8)
PhraseIndex(Extend,9,9)

[u'To', u'which', u'countries', u'does', u'the', u'Himalayan', u'mountain', u'system', u'extend']
To which countries does the Himalayan mountain system extend?
	 La ligne est isolée 
PhrasePosTag(To,TO)
PhrasePosTag(which,WDT)
PhrasePosTag(countries,NNS)
PhrasePosTag(does,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(Himalayan,JJ)
PhrasePosTag(mountain,NN)
PhrasePosTag(system,NN)
PhrasePosTag(extend,VB)
phraseDepTag(extend,extend,root)
phraseDepTag(countries,To,case)
phraseDepTag(countries,which,det)
phraseDepTag(system,the,det)
phraseDepTag(system,Himalayan,amod)
phraseDepTag(system,mountain,compound)
phraseDepTag(extend,countries,nmod:to)
phraseDepTag(extend,does,aux)
phraseDepTag(extend,system,nsubj)
[(('http://dbpedia.org/resource/', 'Himalayas'), ('http://dbpedia.org/property/', 'country'), SparqlVar('uri'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Himalayas dbp:country ?uri . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(A,3,3)
PhraseIndex(List,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(All,6,6)
PhraseIndex(Bandleaders,7,7)
PhraseIndex(That,8,8)
PhraseIndex(Play,9,9)
PhraseIndex(Trumpet,10,10)

[u'Give', u'me', u'a', u'list', u'of', u'all', u'bandleaders', u'that', u'play', u'trumpet']
Give me a list of all bandleaders that play trumpet.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(a,DT)
PhrasePosTag(list,NN)
PhrasePosTag(of,IN)
PhrasePosTag(all,DT)
PhrasePosTag(bandleaders,NNS)
PhrasePosTag(that,WDT)
PhrasePosTag(play,VBP)
PhrasePosTag(trumpet,NN)
phraseDepTag(trumpet,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,list,dobj)
phraseDepTag(list,a,det)
phraseDepTag(list,bandleaders,nmod:of)
phraseDepTag(bandleaders,of,case)
phraseDepTag(bandleaders,all,det)
phraseDepTag(bandleaders,play,acl:relcl)
phraseDepTag(play,that,nsubj)
phraseDepTag(play,trumpet,dobj)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Bandleader')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'instrument'), ('http://dbpedia.org/resource/', 'Trumpet'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader . ?uri dbo:instrument res:Trumpet . }


Which countries have more than ten caves? 
[u'Which', u'countries', u'have', u'more', u'than', u'ten', u'caves', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Countries,2,2)
PhraseIndex(Have,3,3)
PhraseIndex(More,4,4)
PhraseIndex(Than,5,5)
PhraseIndex(Ten,6,6)
PhraseIndex(Caves,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(countries,NNS)
PhrasePosTag(have,VBP)
PhrasePosTag(more,JJR)
PhrasePosTag(than,IN)
PhrasePosTag(ten,CD)
PhrasePosTag(caves,NNS)
phraseDepTag(caves,have,root)
phraseDepTag(countries,Which,det)
phraseDepTag(have,countries,nsubj)
phraseDepTag(have,caves,dobj)
phraseDepTag(more,than,mwe)
phraseDepTag(ten,more,advmod)
phraseDepTag(caves,ten,nummod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('cave'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('cave'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country . ?cave rdf:type dbo:Cave . { ?cave dbo:location ?uri . } UNION { ?cave dbo:location ?loc . ?loc dbo:country ?uri . } } GROUP BY ?uri HAVING(COUNT(?cave) > 10)


PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Total,4,4)
PhraseIndex(Amount,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Men,7,7)
PhraseIndex(And,8,8)
PhraseIndex(Women,9,9)
PhraseIndex(Serving,10,10)
PhraseIndex(In,11,11)
PhraseIndex(The,12,12)
PhraseIndex(Fdny,13,13)

[u'What', u'is', u'the', u'total', u'amount', u'of', u'men', u'and', u'women', u'serving', u'in', u'the', u'FDNY']
What is the total amount of men and women serving in the FDNY?
	 La ligne est isolée 
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(total,JJ)
PhrasePosTag(amount,NN)
PhrasePosTag(of,IN)
PhrasePosTag(men,NNS)
PhrasePosTag(and,CC)
PhrasePosTag(women,NNS)
PhrasePosTag(serving,VBG)
PhrasePosTag(in,IN)
PhrasePosTag(the,DT)
PhrasePosTag(FDNY,NNP)
phraseDepTag(FDNY,serving,root)
phraseDepTag(amount,the,det)
phraseDepTag(amount,total,amod)
phraseDepTag(amount,men,nmod:of)
phraseDepTag(amount,women,nmod:of)
phraseDepTag(men,of,case)
phraseDepTag(men,and,cc)
phraseDepTag(men,women,conj:and)
phraseDepTag(serving,What,dobj)
phraseDepTag(serving,is,aux)
phraseDepTag(serving,amount,nsubj)
phraseDepTag(serving,FDNY,nmod:in)
phraseDepTag(FDNY,in,case)
[(('http://dbpedia.org/resource/', 'New_York_City_Fire_Department'), ('http://dbpedia.org/property/', 'strength'), SparqlVar('num'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:New_York_City_Fire_Department dbp:strength ?num . }


Who produces Orangina? 
[u'Who', u'produces', u'Orangina', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Produces,2,2)
PhraseIndex(Orangina,3,3)
PhrasePosTag(Who,WP)
PhrasePosTag(produces,VBZ)
PhrasePosTag(Orangina,NNP)
phraseDepTag(Orangina,produces,root)
phraseDepTag(produces,Who,nsubj)
phraseDepTag(produces,Orangina,dobj)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'product'), ('http://dbpedia.org/resource/', 'Orangina'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:product res:Orangina . }


PhraseIndex(Who,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Formula,4,4)
PhraseIndex(1,5,5)
PhraseIndex(Race,6,6)
PhraseIndex(Driver,7,7)
PhraseIndex(With,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Most,10,10)
PhraseIndex(Races,11,11)

[u'Who', u'is', u'the', u'Formula', u'1', u'race', u'driver', u'with', u'the', u'most', u'races']
Who is the Formula 1 race driver with the most races?
	 La ligne est isolée 
PhrasePosTag(Who,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(Formula,NN)
PhrasePosTag(1,CD)
PhrasePosTag(race,NN)
PhrasePosTag(driver,NN)
PhrasePosTag(with,IN)
PhrasePosTag(the,DT)
PhrasePosTag(most,RBS)
PhrasePosTag(races,NNS)
phraseDepTag(races,Who,root)
phraseDepTag(Who,is,cop)
phraseDepTag(Who,driver,nsubj)
phraseDepTag(driver,the,det)
phraseDepTag(driver,Formula,compound)
phraseDepTag(driver,1,nummod)
phraseDepTag(driver,race,compound)
phraseDepTag(driver,the,nmod:with)
phraseDepTag(the,with,case)
phraseDepTag(the,most,advmod)
phraseDepTag(the,races,dep)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'FormulaOneRacer')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'races'), SparqlVar('x'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:FormulaOneRacer . ?uri dbo:races ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(World,4,4)
PhraseIndex(Heritage,5,5)
PhraseIndex(Sites,6,6)
PhraseIndex(Designated,7,7)
PhraseIndex(Within,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Past,10,10)
PhraseIndex(Two,11,11)
PhraseIndex(Years,12,12)

[u'Give', u'me', u'all', u'world', u'heritage', u'sites', u'designated', u'within', u'the', u'past', u'two', u'years']
Give me all world heritage sites designated within the past two years.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(world,NN)
PhrasePosTag(heritage,NN)
PhrasePosTag(sites,NNS)
PhrasePosTag(designated,VBN)
PhrasePosTag(within,IN)
PhrasePosTag(the,DT)
PhrasePosTag(past,JJ)
PhrasePosTag(two,CD)
PhrasePosTag(years,NNS)
phraseDepTag(years,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,sites,dobj)
phraseDepTag(sites,all,det)
phraseDepTag(sites,world,compound)
phraseDepTag(sites,heritage,compound)
phraseDepTag(sites,designated,acl)
phraseDepTag(designated,years,nmod:within)
phraseDepTag(years,within,case)
phraseDepTag(years,the,det)
phraseDepTag(years,past,amod)
phraseDepTag(years,two,nummod)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'team'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'league'), ('http://dbpedia.org/resource/', 'Premier_League')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthDate'), SparqlVar('y'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:team ?x . ?x dbo:league res:Premier_League . ?uri dbo:birthDate ?y . } ORDER BY DESC(?y) OFFSET 0 LIMIT 1


Give me all members of Prodigy. 
[u'Give', u'me', u'all', u'members', u'of', u'Prodigy', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Members,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Prodigy,6,6)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(members,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(Prodigy,NNP)
phraseDepTag(Prodigy,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,members,dobj)
phraseDepTag(members,all,det)
phraseDepTag(members,Prodigy,nmod:of)
phraseDepTag(Prodigy,of,case)
[(('http://dbpedia.org/resource/', 'The_Prodigy'), ('http://dbpedia.org/ontology/', 'bandMember'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Prodigy dbo:bandMember ?uri . }


What is the longest river? 
[u'What', u'is', u'the', u'longest', u'river', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Longest,4,4)
PhraseIndex(River,5,5)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(longest,JJS)
PhrasePosTag(river,NN)
phraseDepTag(river,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,river,nsubj)
phraseDepTag(river,the,det)
phraseDepTag(river,longest,amod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'River')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'River'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:River . { ?uri dbo:length ?l . } UNION { ?uri dbp:length ?l . } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1


PhraseIndex(Does,1,1)
PhraseIndex(Breaking,2,2)
PhraseIndex(Bad,3,3)
PhraseIndex(Have,4,4)
PhraseIndex(More,5,5)
PhraseIndex(Episodes,6,6)
PhraseIndex(Than,7,7)
PhraseIndex(Game,8,8)
PhraseIndex(Of,9,9)
PhraseIndex(Thrones,10,10)

[u'Does', u'Breaking', u'Bad', u'have', u'more', u'episodes', u'than', u'Game', u'of', u'Thrones']
Does Breaking Bad have more episodes than Game of Thrones?
	 La ligne est isolée 
PhrasePosTag(Does,VBZ)
PhrasePosTag(Breaking,VBG)
PhrasePosTag(Bad,JJ)
PhrasePosTag(have,VBP)
PhrasePosTag(more,JJR)
PhrasePosTag(episodes,NNS)
PhrasePosTag(than,IN)
PhrasePosTag(Game,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Thrones,NNPS)
phraseDepTag(Thrones,have,root)
phraseDepTag(Does,Breaking,xcomp)
phraseDepTag(Breaking,Bad,xcomp)
phraseDepTag(have,Does,csubj)
phraseDepTag(have,episodes,dobj)
phraseDepTag(have,Game,nmod:than)
phraseDepTag(episodes,more,amod)
phraseDepTag(Game,than,case)
phraseDepTag(Game,Thrones,nmod:of)
phraseDepTag(Thrones,of,case)
[(('http://dbpedia.org/resource/', 'Breaking_Bad'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Game_of_Thrones'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('y')), (('http://dbpedia.org/resource/', 'Breaking_Bad'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Game_of_Thrones'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('y'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Breaking_Bad dbo:numberOfEpisodes ?x . res:Game_of_Thrones dbo:numberOfEpisodes ?y . FILTER (?y > ?x) }


Give me all cars that are produced in Germany. 
[u'Give', u'me', u'all', u'cars', u'that', u'are', u'produced', u'in', u'Germany', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Cars,4,4)
PhraseIndex(That,5,5)
PhraseIndex(Are,6,6)
PhraseIndex(Produced,7,7)
PhraseIndex(In,8,8)
PhraseIndex(Germany,9,9)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(cars,NNS)
PhrasePosTag(that,WDT)
PhrasePosTag(are,VBP)
PhrasePosTag(produced,VBN)
PhrasePosTag(in,IN)
PhrasePosTag(Germany,NNP)
phraseDepTag(Germany,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,cars,dobj)
phraseDepTag(cars,all,det)
phraseDepTag(cars,produced,acl:relcl)
phraseDepTag(produced,that,nsubjpass)
phraseDepTag(produced,are,auxpass)
phraseDepTag(produced,Germany,nmod:in)
phraseDepTag(Germany,in,case)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Automobile')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Automobile'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Automobile . { ?uri dbo:assembly res:Germany . } UNION { ?uri dbp:assembly res:Germany . } UNION { { ?uri dbo:manufacturer ?x . } UNION { ?uri dbp:manufacturer ?x . } { ?x dbo:locationCountry res:Germany . } UNION { ?x dbo:location res:Germany . } } }


PhraseIndex(What,1,1)
PhraseIndex(Were,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Main,4,4)
PhraseIndex(Discoveries,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(The,7,7)
PhraseIndex(Mars,8,8)
PhraseIndex(Rover,9,9)
PhraseIndex(Curiosity,10,10)

[u'What', u'were', u'the', u'main', u'discoveries', u'of', u'the', u'Mars', u'rover', u'Curiosity']
What were the main discoveries of the Mars rover Curiosity?
	 La ligne est isolée 
PhrasePosTag(What,WP)
PhrasePosTag(were,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(main,JJ)
PhrasePosTag(discoveries,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Mars,NNP)
PhrasePosTag(rover,NN)
PhrasePosTag(Curiosity,NN)
phraseDepTag(Curiosity,What,root)
phraseDepTag(What,were,cop)
phraseDepTag(What,discoveries,nsubj)
phraseDepTag(discoveries,the,det)
phraseDepTag(discoveries,main,amod)
phraseDepTag(discoveries,Curiosity,nmod:of)
phraseDepTag(Curiosity,of,case)
phraseDepTag(Curiosity,the,det)
phraseDepTag(Curiosity,Mars,compound)
phraseDepTag(Curiosity,rover,compound)
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(People,4,4)
PhraseIndex(That,5,5)
PhraseIndex(Were,6,6)
PhraseIndex(Born,7,7)
PhraseIndex(In,8,8)
PhraseIndex(Vienna,9,9)
PhraseIndex(And,10,10)
PhraseIndex(Died,11,11)
PhraseIndex(In,12,12)
PhraseIndex(Berlin,13,13)

[u'Give', u'me', u'all', u'people', u'that', u'were', u'born', u'in', u'Vienna', u'and', u'died', u'in', u'Berlin']
Give me all people that were born in Vienna and died in Berlin.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(people,NNS)
PhrasePosTag(that,WDT)
PhrasePosTag(were,VBD)
PhrasePosTag(born,VBN)
PhrasePosTag(in,IN)
PhrasePosTag(Vienna,NNP)
PhrasePosTag(and,CC)
PhrasePosTag(died,VBD)
PhrasePosTag(in,IN)
PhrasePosTag(Berlin,NNP)
phraseDepTag(Berlin,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,people,dobj)
phraseDepTag(Give,and,cc)
phraseDepTag(Give,died,conj:and)
phraseDepTag(people,all,det)
phraseDepTag(people,born,acl:relcl)
phraseDepTag(born,that,nsubjpass)
phraseDepTag(born,were,auxpass)
phraseDepTag(born,Vienna,nmod:in)
phraseDepTag(Vienna,in,case)
phraseDepTag(died,Berlin,nmod:in)
phraseDepTag(Berlin,in,case)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), ('http://dbpedia.org/resource/', 'Vienna')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'deathPlace'), ('http://dbpedia.org/resource/', 'Berlin'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:birthPlace res:Vienna . ?uri dbo:deathPlace res:Berlin . }


Is proinsulin a protein? 
[u'Is', u'proinsulin', u'a', u'protein', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(Proinsulin,2,2)
PhraseIndex(A,3,3)
PhraseIndex(Protein,4,4)
PhrasePosTag(Is,VBZ)
PhrasePosTag(proinsulin,NN)
PhrasePosTag(a,DT)
PhrasePosTag(protein,NN)
phraseDepTag(protein,protein,root)
phraseDepTag(protein,Is,cop)
phraseDepTag(protein,proinsulin,nsubj)
phraseDepTag(protein,a,det)
[(('http://dbpedia.org/resource/', 'Proinsulin'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Protein'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Proinsulin rdf:type dbo:Protein . }


How tall is Michael Jordan? 
[u'How', u'tall', u'is', u'Michael', u'Jordan', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Tall,2,2)
PhraseIndex(Is,3,3)
PhraseIndex(Michael,4,4)
PhraseIndex(Jordan,5,5)
PhrasePosTag(How,WRB)
PhrasePosTag(tall,JJ)
PhrasePosTag(is,VBZ)
PhrasePosTag(Michael,NNP)
PhrasePosTag(Jordan,NNP)
phraseDepTag(Jordan,is,root)
phraseDepTag(tall,How,advmod)
phraseDepTag(is,tall,dep)
phraseDepTag(is,Jordan,nsubj)
phraseDepTag(Jordan,Michael,compound)
[(('http://dbpedia.org/resource/', 'Michael_Jordan'), ('http://dbpedia.org/ontology/', 'height'), SparqlVar('num'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num . }


What is the capital of Canada? 
[u'What', u'is', u'the', u'capital', u'of', u'Canada', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Capital,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Canada,6,6)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(capital,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Canada,NNP)
phraseDepTag(Canada,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,capital,nsubj)
phraseDepTag(capital,the,det)
phraseDepTag(capital,Canada,nmod:of)
phraseDepTag(Canada,of,case)
[(('http://dbpedia.org/resource/', 'Canada'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri . }


Who is the governor of Wyoming? 
[u'Who', u'is', u'the', u'governor', u'of', u'Wyoming', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Governor,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Wyoming,6,6)
PhrasePosTag(Who,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(governor,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Wyoming,NNP)
phraseDepTag(Wyoming,Who,root)
phraseDepTag(Who,is,cop)
phraseDepTag(Who,governor,nsubj)
phraseDepTag(governor,the,det)
phraseDepTag(governor,Wyoming,nmod:of)
phraseDepTag(Wyoming,of,case)
[(('http://dbpedia.org/resource/', 'Wyoming'), ('http://dbpedia.org/property/', 'governor'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Wyoming dbp:governor ?uri . }


PhraseIndex(Do,1,1)
PhraseIndex(Prince,2,2)
PhraseIndex(Harry,3,3)
PhraseIndex(And,4,4)
PhraseIndex(Prince,5,5)
PhraseIndex(William,6,6)
PhraseIndex(Have,7,7)
PhraseIndex(The,8,8)
PhraseIndex(Same,9,9)
PhraseIndex(Mother,10,10)

[u'Do', u'Prince', u'Harry', u'and', u'Prince', u'William', u'have', u'the', u'same', u'mother']
Do Prince Harry and Prince William have the same mother?
	 La ligne est isolée 
PhrasePosTag(Do,VB)
PhrasePosTag(Prince,NNP)
PhrasePosTag(Harry,NNP)
PhrasePosTag(and,CC)
PhrasePosTag(Prince,NNP)
PhrasePosTag(William,NNP)
PhrasePosTag(have,VBP)
PhrasePosTag(the,DT)
PhrasePosTag(same,JJ)
PhrasePosTag(mother,NN)
phraseDepTag(mother,Do,root)
phraseDepTag(Do,have,ccomp)
phraseDepTag(Harry,Prince,compound)
phraseDepTag(Harry,and,cc)
phraseDepTag(Harry,William,conj:and)
phraseDepTag(William,Prince,compound)
phraseDepTag(have,Harry,nsubj)
phraseDepTag(have,William,nsubj)
phraseDepTag(have,mother,dobj)
phraseDepTag(mother,the,det)
[('<http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('x')), ('<http://dbpedia.org/resource/Prince_Harry_of_Wales>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('y')), ('<http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('x')), ('<http://dbpedia.org/resource/Prince_Harry_of_Wales>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('y'))]
PREFIX dbp: <http://dbpedia.org/property/> ASK WHERE { <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> dbp:mother ?x . <http://dbpedia.org/resource/Prince_Harry_of_Wales> dbp:mother ?y . FILTER (?x = ?y) }


Who was the father of Queen Elizabeth II? 
[u'Who', u'was', u'the', u'father', u'of', u'Queen', u'Elizabeth', u'II', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Was,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Father,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Queen,6,6)
PhraseIndex(Elizabeth,7,7)
PhraseIndex(Ii,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(was,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(father,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Queen,NNP)
PhrasePosTag(Elizabeth,NNP)
PhrasePosTag(II,NNP)
phraseDepTag(II,Who,root)
phraseDepTag(Who,was,cop)
phraseDepTag(Who,father,nsubj)
phraseDepTag(father,the,det)
phraseDepTag(father,II,nmod:of)
phraseDepTag(II,of,case)
phraseDepTag(II,Queen,compound)
phraseDepTag(II,Elizabeth,compound)
[(('http://dbpedia.org/resource/', 'Elizabeth_II'), ('http://dbpedia.org/property/', 'father'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Elizabeth_II dbp:father ?uri . }


Which U.S. state has been admitted latest? 
[u'Which', u'U.S.', u'state', u'has', u'been', u'admitted', u'latest', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(U.S.,2,2)
PhraseIndex(State,3,3)
PhraseIndex(Has,4,4)
PhraseIndex(Been,5,5)
PhraseIndex(Admitted,6,6)
PhraseIndex(Latest,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(state,NN)
PhrasePosTag(has,VBZ)
PhrasePosTag(been,VBN)
PhrasePosTag(admitted,VBN)
PhrasePosTag(latest,JJS)
phraseDepTag(latest,admitted,root)
phraseDepTag(state,Which,det)
phraseDepTag(state,U.S.,compound)
phraseDepTag(admitted,state,nsubjpass)
phraseDepTag(admitted,has,aux)
phraseDepTag(admitted,been,auxpass)
phraseDepTag(admitted,latest,xcomp)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'admittancedate'), SparqlVar('x'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:admittancedate ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1


How many languages are spoken in Turkmenistan? 
[u'How', u'many', u'languages', u'are', u'spoken', u'in', u'Turkmenistan', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Languages,3,3)
PhraseIndex(Are,4,4)
PhraseIndex(Spoken,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Turkmenistan,7,7)
PhrasePosTag(How,WRB)
PhrasePosTag(many,JJ)
PhrasePosTag(languages,NNS)
PhrasePosTag(are,VBP)
PhrasePosTag(spoken,VBN)
PhrasePosTag(in,IN)
PhrasePosTag(Turkmenistan,NNP)
phraseDepTag(Turkmenistan,spoken,root)
phraseDepTag(many,How,advmod)
phraseDepTag(languages,many,amod)
phraseDepTag(spoken,languages,nsubjpass)
phraseDepTag(spoken,are,auxpass)
phraseDepTag(spoken,Turkmenistan,nmod:in)
phraseDepTag(Turkmenistan,in,case)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'governor'), ('http://dbpedia.org/resource/', 'Sean_Parnell'))]
PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:governor res:Sean_Parnell . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Movies,4,4)
PhraseIndex(Directed,5,5)
PhraseIndex(By,6,6)
PhraseIndex(Francis,7,7)
PhraseIndex(Ford,8,8)
PhraseIndex(Coppola,9,9)

[u'Give', u'me', u'all', u'movies', u'directed', u'by', u'Francis', u'Ford', u'Coppola']
Give me all movies directed by Francis Ford Coppola.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(movies,NNS)
PhrasePosTag(directed,VBN)
PhrasePosTag(by,IN)
PhrasePosTag(Francis,NNP)
PhrasePosTag(Ford,NNP)
PhrasePosTag(Coppola,NNP)
phraseDepTag(Coppola,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,movies,dobj)
phraseDepTag(movies,all,det)
phraseDepTag(movies,directed,acl)
phraseDepTag(directed,Coppola,nmod:by)
phraseDepTag(Coppola,by,case)
phraseDepTag(Coppola,Francis,compound)
phraseDepTag(Coppola,Ford,compound)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Francis_Ford_Coppola'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:director res:Francis_Ford_Coppola . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Actors,4,4)
PhraseIndex(Starring,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Movies,7,7)
PhraseIndex(Directed,8,8)
PhraseIndex(By,9,9)
PhraseIndex(William,10,10)
PhraseIndex(Shatner,11,11)

[u'Give', u'me', u'all', u'actors', u'starring', u'in', u'movies', u'directed', u'by', u'William', u'Shatner']
Give me all actors starring in movies directed by William Shatner.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(actors,NNS)
PhrasePosTag(starring,VBG)
PhrasePosTag(in,IN)
PhrasePosTag(movies,NNS)
PhrasePosTag(directed,VBN)
PhrasePosTag(by,IN)
PhrasePosTag(William,NNP)
PhrasePosTag(Shatner,NNP)
phraseDepTag(Shatner,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,actors,dobj)
phraseDepTag(actors,all,det)
phraseDepTag(actors,starring,acl)
phraseDepTag(starring,movies,nmod:in)
phraseDepTag(movies,in,case)
phraseDepTag(movies,directed,acl)
phraseDepTag(directed,Shatner,nmod:by)
phraseDepTag(Shatner,by,case)
phraseDepTag(Shatner,William,compound)
[(SparqlVar('x'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'William_Shatner')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'starring'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner . ?x dbo:starring ?uri . }


Are tree frogs a type of amphibian? 
[u'Are', u'tree', u'frogs', u'a', u'type', u'of', u'amphibian', u'?']
PhraseIndex(Are,1,1)
PhraseIndex(Tree,2,2)
PhraseIndex(Frogs,3,3)
PhraseIndex(A,4,4)
PhraseIndex(Type,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Amphibian,7,7)
PhrasePosTag(Are,VBP)
PhrasePosTag(tree,NN)
PhrasePosTag(frogs,NNS)
PhrasePosTag(a,DT)
PhrasePosTag(type,NN)
PhrasePosTag(of,IN)
PhrasePosTag(amphibian,NN)
phraseDepTag(amphibian,Are,root)
phraseDepTag(Are,frogs,nsubj)
phraseDepTag(Are,type,nmod)
phraseDepTag(frogs,tree,compound)
phraseDepTag(type,a,det)
phraseDepTag(type,amphibian,nmod:of)
phraseDepTag(amphibian,of,case)
[(('http://dbpedia.org/resource/', 'Hylidae'), ('http://dbpedia.org/ontology/', 'class'), ('http://dbpedia.org/resource/', 'Amphibian'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Hylidae dbo:class res:Amphibian . }


What is the birth name of Angela Merkel? 
[u'What', u'is', u'the', u'birth', u'name', u'of', u'Angela', u'Merkel', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Birth,4,4)
PhraseIndex(Name,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Angela,7,7)
PhraseIndex(Merkel,8,8)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(birth,NN)
PhrasePosTag(name,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Angela,NNP)
PhrasePosTag(Merkel,NNP)
phraseDepTag(Merkel,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,name,nsubj)
phraseDepTag(name,the,det)
phraseDepTag(name,birth,compound)
phraseDepTag(name,Merkel,nmod:of)
phraseDepTag(Merkel,of,case)
phraseDepTag(Merkel,Angela,compound)
[(('http://dbpedia.org/resource/', 'Angela_Merkel'), ('http://dbpedia.org/property/', 'birthName'), SparqlVar('string'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Angela_Merkel dbp:birthName ?string . }


Give me all Methodist politicians. 
[u'Give', u'me', u'all', u'Methodist', u'politicians', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Methodist,4,4)
PhraseIndex(Politicians,5,5)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(Methodist,JJ)
PhrasePosTag(politicians,NNS)
phraseDepTag(politicians,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,politicians,dobj)
phraseDepTag(politicians,all,det)
phraseDepTag(politicians,Methodist,amod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Politician')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'religion'), ('http://dbpedia.org/resource/', 'Methodism'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Politician . ?uri dbo:religion res:Methodism . }


How often did Jane Fonda marry? 
[u'How', u'often', u'did', u'Jane', u'Fonda', u'marry', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Often,2,2)
PhraseIndex(Did,3,3)
PhraseIndex(Jane,4,4)
PhraseIndex(Fonda,5,5)
PhraseIndex(Marry,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(often,RB)
PhrasePosTag(did,VBD)
PhrasePosTag(Jane,NNP)
PhrasePosTag(Fonda,NNP)
PhrasePosTag(marry,VB)
phraseDepTag(marry,marry,root)
phraseDepTag(often,How,advmod)
phraseDepTag(Fonda,Jane,compound)
phraseDepTag(marry,often,advmod)
phraseDepTag(marry,did,aux)
phraseDepTag(marry,Fonda,nsubj)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'type'), ('http://dbpedia.org/resource/', 'Nonprofit_organization')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'type'), ('http://dbpedia.org/resource/', 'Nonprofit_organization'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:type res:Nonprofit_organization . { ?uri dbo:locationCountry res:Australia . } UNION { ?uri dbo:location ?x . ?x dbo:country res:Australia . } }


PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Military,3,3)
PhraseIndex(Conflicts,4,4)
PhraseIndex(Did,5,5)
PhraseIndex(Lawrence,6,6)
PhraseIndex(Of,7,7)
PhraseIndex(Arabia,8,8)
PhraseIndex(Participate,9,9)

[u'In', u'which', u'military', u'conflicts', u'did', u'Lawrence', u'of', u'Arabia', u'participate']
In which military conflicts did Lawrence of Arabia participate?
	 La ligne est isolée 
PhrasePosTag(In,IN)
PhrasePosTag(which,WDT)
PhrasePosTag(military,JJ)
PhrasePosTag(conflicts,NNS)
PhrasePosTag(did,VBD)
PhrasePosTag(Lawrence,NNP)
PhrasePosTag(of,IN)
PhrasePosTag(Arabia,NNP)
PhrasePosTag(participate,VB)
phraseDepTag(participate,participate,root)
phraseDepTag(conflicts,In,case)
phraseDepTag(conflicts,which,det)
phraseDepTag(conflicts,military,amod)
phraseDepTag(Lawrence,Arabia,nmod:of)
phraseDepTag(Arabia,of,case)
phraseDepTag(participate,conflicts,nmod:in)
phraseDepTag(participate,did,aux)
phraseDepTag(participate,Lawrence,nsubj)
[(('http://dbpedia.org/resource/', 'T._E._Lawrence'), ('http://dbpedia.org/ontology/', 'battle'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:T._E._Lawrence dbo:battle ?uri . }


Who developed Minecraft? 
[u'Who', u'developed', u'Minecraft', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Developed,2,2)
PhraseIndex(Minecraft,3,3)
PhrasePosTag(Who,WP)
PhrasePosTag(developed,VBD)
PhrasePosTag(Minecraft,NNP)
phraseDepTag(Minecraft,developed,root)
phraseDepTag(developed,Who,nsubj)
phraseDepTag(developed,Minecraft,dobj)
[(('http://dbpedia.org/resource/', 'Minecraft'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Minecraft dbo:developer ?uri . }


What is the melting point of copper? 
[u'What', u'is', u'the', u'melting', u'point', u'of', u'copper', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Melting,4,4)
PhraseIndex(Point,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Copper,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(melting,JJ)
PhrasePosTag(point,NN)
PhrasePosTag(of,IN)
PhrasePosTag(copper,NN)
phraseDepTag(copper,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,point,nsubj)
phraseDepTag(point,the,det)
phraseDepTag(point,melting,amod)
phraseDepTag(point,copper,nmod:of)
phraseDepTag(copper,of,case)
Give me all sister cities of Brno. 
[u'Give', u'me', u'all', u'sister', u'cities', u'of', u'Brno', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Sister,4,4)
PhraseIndex(Cities,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Brno,7,7)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(sister,NN)
PhrasePosTag(cities,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(Brno,NNP)
phraseDepTag(Brno,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,cities,dobj)
phraseDepTag(cities,all,det)
phraseDepTag(cities,sister,compound)
phraseDepTag(cities,Brno,nmod:of)
phraseDepTag(Brno,of,case)
How many inhabitants does Maribor have? 
[u'How', u'many', u'inhabitants', u'does', u'Maribor', u'have', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Inhabitants,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(Maribor,5,5)
PhraseIndex(Have,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(many,JJ)
PhrasePosTag(inhabitants,NNS)
PhrasePosTag(does,VBZ)
PhrasePosTag(Maribor,NNP)
PhrasePosTag(have,VB)
phraseDepTag(have,have,root)
phraseDepTag(many,How,advmod)
phraseDepTag(inhabitants,many,amod)
phraseDepTag(have,inhabitants,dobj)
phraseDepTag(have,does,aux)
phraseDepTag(have,Maribor,nsubj)
[(('http://dbpedia.org/resource/', 'Maribor'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('num'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Maribor dbo:populationTotal ?num . }


Give me all companies in Munich. 
[u'Give', u'me', u'all', u'companies', u'in', u'Munich', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Companies,4,4)
PhraseIndex(In,5,5)
PhraseIndex(Munich,6,6)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(companies,NNS)
PhrasePosTag(in,IN)
PhrasePosTag(Munich,NNP)
phraseDepTag(Munich,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,companies,dobj)
phraseDepTag(companies,all,det)
phraseDepTag(companies,Munich,nmod:in)
phraseDepTag(Munich,in,case)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company . { ?uri dbo:location res:Munich . } UNION { ?uri dbo:headquarter res:Munich . } UNION { ?uri dbo:locationCity res:Munich . } }


How tall is Claudia Schiffer? 
[u'How', u'tall', u'is', u'Claudia', u'Schiffer', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Tall,2,2)
PhraseIndex(Is,3,3)
PhraseIndex(Claudia,4,4)
PhraseIndex(Schiffer,5,5)
PhrasePosTag(How,WRB)
PhrasePosTag(tall,JJ)
PhrasePosTag(is,VBZ)
PhrasePosTag(Claudia,NNP)
PhrasePosTag(Schiffer,NNP)
phraseDepTag(Schiffer,is,root)
phraseDepTag(tall,How,advmod)
phraseDepTag(is,tall,dep)
phraseDepTag(is,Schiffer,nsubj)
phraseDepTag(Schiffer,Claudia,compound)
[(('http://dbpedia.org/resource/', 'Claudia_Schiffer'), ('http://dbpedia.org/ontology/', 'height'), SparqlVar('height'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height . }


List all games by GMT. 
[u'List', u'all', u'games', u'by', u'GMT', u'.']
PhraseIndex(List,1,1)
PhraseIndex(All,2,2)
PhraseIndex(Games,3,3)
PhraseIndex(By,4,4)
PhraseIndex(Gmt,5,5)
PhrasePosTag(List,VB)
PhrasePosTag(all,DT)
PhrasePosTag(games,NNS)
PhrasePosTag(by,IN)
PhrasePosTag(GMT,NNP)
phraseDepTag(GMT,List,root)
phraseDepTag(List,games,dobj)
phraseDepTag(List,GMT,nmod:by)
phraseDepTag(games,all,det)
phraseDepTag(GMT,by,case)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'publisher'), ('http://dbpedia.org/resource/', 'GMT_Games'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:publisher res:GMT_Games . }


Who founded Intel? 
[u'Who', u'founded', u'Intel', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Founded,2,2)
PhraseIndex(Intel,3,3)
PhrasePosTag(Who,WP)
PhrasePosTag(founded,VBD)
PhrasePosTag(Intel,NNP)
phraseDepTag(Intel,founded,root)
phraseDepTag(founded,Who,nsubj)
phraseDepTag(founded,Intel,dobj)
[(('http://dbpedia.org/resource/', 'Intel'), ('http://dbpedia.org/ontology/', 'foundedBy'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Intel dbo:foundedBy ?uri . }


Who is the husband of Amanda Palmer? 
[u'Who', u'is', u'the', u'husband', u'of', u'Amanda', u'Palmer', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Husband,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Amanda,6,6)
PhraseIndex(Palmer,7,7)
PhrasePosTag(Who,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(husband,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Amanda,NNP)
PhrasePosTag(Palmer,NNP)
phraseDepTag(Palmer,Who,root)
phraseDepTag(Who,is,cop)
phraseDepTag(Who,husband,nsubj)
phraseDepTag(husband,the,det)
phraseDepTag(husband,Palmer,nmod:of)
phraseDepTag(Palmer,of,case)
phraseDepTag(Palmer,Amanda,compound)
[(('http://dbpedia.org/resource/', 'Amanda_Palmer'), ('http://dbpedia.org/property/', 'spouse'), SparqlVar('uri'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Amanda_Palmer dbp:spouse ?uri . }


Give me all breeds of the German Shepherd dog. 
[u'Give', u'me', u'all', u'breeds', u'of', u'the', u'German', u'Shepherd', u'dog', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Breeds,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(The,6,6)
PhraseIndex(German,7,7)
PhraseIndex(Shepherd,8,8)
PhraseIndex(Dog,9,9)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(breeds,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(German,JJ)
PhrasePosTag(Shepherd,NNP)
PhrasePosTag(dog,NN)
phraseDepTag(dog,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,breeds,dobj)
phraseDepTag(breeds,all,det)
phraseDepTag(breeds,dog,nmod:of)
phraseDepTag(dog,of,case)
phraseDepTag(dog,the,det)
phraseDepTag(dog,German,amod)
phraseDepTag(dog,Shepherd,compound)
[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'breed'), ('http://dbpedia.org/resource/', 'German_Shepherd'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbp:breed res:German_Shepherd . }


Which cities does the Weser flow through? 
[u'Which', u'cities', u'does', u'the', u'Weser', u'flow', u'through', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Cities,2,2)
PhraseIndex(Does,3,3)
PhraseIndex(The,4,4)
PhraseIndex(Weser,5,5)
PhraseIndex(Flow,6,6)
PhraseIndex(Through,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(cities,NNS)
PhrasePosTag(does,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(Weser,NNP)
PhrasePosTag(flow,NN)
PhrasePosTag(through,IN)
phraseDepTag(through,does,root)
phraseDepTag(cities,Which,det)
phraseDepTag(cities,through,case)
phraseDepTag(does,cities,nmod:through)
phraseDepTag(does,flow,dobj)
phraseDepTag(flow,the,det)
phraseDepTag(flow,Weser,compound)
[(('http://dbpedia.org/resource/', 'Weser'), ('http://dbpedia.org/ontology/', 'city'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Weser dbo:city ?uri . }


Which countries are connected by the Rhine? 
[u'Which', u'countries', u'are', u'connected', u'by', u'the', u'Rhine', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Countries,2,2)
PhraseIndex(Are,3,3)
PhraseIndex(Connected,4,4)
PhraseIndex(By,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Rhine,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(countries,NNS)
PhrasePosTag(are,VBP)
PhrasePosTag(connected,VBN)
PhrasePosTag(by,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Rhine,NNP)
phraseDepTag(Rhine,connected,root)
phraseDepTag(countries,Which,det)
phraseDepTag(connected,countries,nsubjpass)
phraseDepTag(connected,are,auxpass)
phraseDepTag(connected,Rhine,nmod:agent)
phraseDepTag(Rhine,by,case)
phraseDepTag(Rhine,the,det)
[(('http://dbpedia.org/resource/', 'Rhine'), ('http://dbpedia.org/property/', 'country'), SparqlVar('string')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('uri'), ('http://www.w3.org/2000/01/rdf-schema#', 'label'), SparqlVar('string'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Rhine dbp:country ?string . ?uri rdf:type dbo:Country . ?uri rdfs:label ?string . }


Which professional surfers were born in Australia? 
[u'Which', u'professional', u'surfers', u'were', u'born', u'in', u'Australia', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Professional,2,2)
PhraseIndex(Surfers,3,3)
PhraseIndex(Were,4,4)
PhraseIndex(Born,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Australia,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(professional,JJ)
PhrasePosTag(surfers,NNS)
PhrasePosTag(were,VBD)
PhrasePosTag(born,VBN)
PhrasePosTag(in,IN)
PhrasePosTag(Australia,NNP)
phraseDepTag(Australia,born,root)
phraseDepTag(surfers,Which,det)
phraseDepTag(surfers,professional,amod)
phraseDepTag(born,surfers,nsubjpass)
phraseDepTag(born,were,auxpass)
phraseDepTag(born,Australia,nmod:in)
phraseDepTag(Australia,in,case)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Surfing')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), ('http://dbpedia.org/resource/', 'Australia'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Surfing . ?uri dbo:birthPlace res:Australia . }


What is the average temperature on Hawaii? 
[u'What', u'is', u'the', u'average', u'temperature', u'on', u'Hawaii', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Average,4,4)
PhraseIndex(Temperature,5,5)
PhraseIndex(On,6,6)
PhraseIndex(Hawaii,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(average,JJ)
PhrasePosTag(temperature,NN)
PhrasePosTag(on,IN)
PhrasePosTag(Hawaii,NNP)
phraseDepTag(Hawaii,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,temperature,nsubj)
phraseDepTag(temperature,the,det)
phraseDepTag(temperature,average,amod)
phraseDepTag(temperature,Hawaii,nmod:on)
phraseDepTag(Hawaii,on,case)
In which UK city are the headquarters of the MI6? 
[u'In', u'which', u'UK', u'city', u'are', u'the', u'headquarters', u'of', u'the', u'MI6', u'?']
PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Uk,3,3)
PhraseIndex(City,4,4)
PhraseIndex(Are,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Headquarters,7,7)
PhraseIndex(Of,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Mi6,10,10)
PhrasePosTag(In,IN)
PhrasePosTag(which,WDT)
PhrasePosTag(UK,NNP)
PhrasePosTag(city,NN)
PhrasePosTag(are,VBP)
PhrasePosTag(the,DT)
PhrasePosTag(headquarters,NN)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(MI6,NN)
phraseDepTag(MI6,are,root)
phraseDepTag(city,In,case)
phraseDepTag(city,which,det)
phraseDepTag(city,UK,compound)
phraseDepTag(are,city,nmod:in)
phraseDepTag(are,headquarters,nsubj)
phraseDepTag(headquarters,the,det)
phraseDepTag(headquarters,MI6,nmod:of)
phraseDepTag(MI6,of,case)
phraseDepTag(MI6,the,det)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City')), (('http://dbpedia.org/resource/', 'Secret_Intelligence_Service'), ('http://dbpedia.org/ontology/', 'headquarter'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City . res:Secret_Intelligence_Service dbo:headquarter ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(Other,2,2)
PhraseIndex(Weapons,3,3)
PhraseIndex(Did,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Designer,6,6)
PhraseIndex(Of,7,7)
PhraseIndex(The,8,8)
PhraseIndex(Uzi,9,9)
PhraseIndex(Develop,10,10)

[u'Which', u'other', u'weapons', u'did', u'the', u'designer', u'of', u'the', u'Uzi', u'develop']
Which other weapons did the designer of the Uzi develop?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(other,JJ)
PhrasePosTag(weapons,NNS)
PhrasePosTag(did,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(designer,NN)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Uzi,NNP)
PhrasePosTag(develop,VB)
phraseDepTag(develop,develop,root)
phraseDepTag(weapons,Which,det)
phraseDepTag(weapons,other,amod)
phraseDepTag(designer,the,det)
phraseDepTag(designer,Uzi,nmod:of)
phraseDepTag(Uzi,of,case)
phraseDepTag(Uzi,the,det)
phraseDepTag(develop,weapons,dobj)
phraseDepTag(develop,did,aux)
phraseDepTag(develop,designer,nsubj)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Weapon')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Uzi'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Weapon')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Uzi'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon . ?uri dbp:designer ?x . res:Uzi dbp:designer ?x . FILTER (?uri != res:Uzi) }


Who created Goofy? 
[u'Who', u'created', u'Goofy', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Created,2,2)
PhraseIndex(Goofy,3,3)
PhrasePosTag(Who,WP)
PhrasePosTag(created,VBD)
PhrasePosTag(Goofy,NNP)
phraseDepTag(Goofy,created,root)
phraseDepTag(created,Who,nsubj)
phraseDepTag(created,Goofy,dobj)
[(('http://dbpedia.org/resource/', 'Goofy'), ('http://dbpedia.org/ontology/', 'creator'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Goofy dbo:creator ?uri . }


PhraseIndex(Was,1,1)
PhraseIndex(The,2,2)
PhraseIndex(Cuban,3,3)
PhraseIndex(Missile,4,4)
PhraseIndex(Crisis,5,5)
PhraseIndex(Earlier,6,6)
PhraseIndex(Than,7,7)
PhraseIndex(The,8,8)
PhraseIndex(Bay,9,9)
PhraseIndex(Of,10,10)
PhraseIndex(Pigs,11,11)
PhraseIndex(Invasion,12,12)

[u'Was', u'the', u'Cuban', u'Missile', u'Crisis', u'earlier', u'than', u'the', u'Bay', u'of', u'Pigs', u'Invasion']
Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?
	 La ligne est isolée 
PhrasePosTag(Was,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(Cuban,JJ)
PhrasePosTag(Missile,NNP)
PhrasePosTag(Crisis,NNP)
PhrasePosTag(earlier,JJR)
PhrasePosTag(than,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Bay,NNP)
PhrasePosTag(of,IN)
PhrasePosTag(Pigs,NNP)
PhrasePosTag(Invasion,NNP)
phraseDepTag(Invasion,earlier,root)
phraseDepTag(Crisis,the,det)
phraseDepTag(Crisis,Cuban,amod)
phraseDepTag(Crisis,Missile,compound)
phraseDepTag(earlier,Was,cop)
phraseDepTag(earlier,Crisis,nsubj)
phraseDepTag(earlier,Bay,nmod:than)
phraseDepTag(Bay,than,case)
phraseDepTag(Bay,the,det)
phraseDepTag(Bay,Invasion,nmod:of)
phraseDepTag(Invasion,of,case)
phraseDepTag(Invasion,Pigs,compound)
[(('http://dbpedia.org/resource/', 'Cuban_missile_crisis'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Bay_of_Pigs_Invasion'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('y')), (('http://dbpedia.org/resource/', 'Cuban_missile_crisis'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Bay_of_Pigs_Invasion'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('y'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Cuban_missile_crisis dbo:date ?x . res:Bay_of_Pigs_Invasion dbo:date ?y . FILTER (?x < ?y) }


Give me all islands that belong to Japan. 
[u'Give', u'me', u'all', u'islands', u'that', u'belong', u'to', u'Japan', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Islands,4,4)
PhraseIndex(That,5,5)
PhraseIndex(Belong,6,6)
PhraseIndex(To,7,7)
PhraseIndex(Japan,8,8)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(islands,NNS)
PhrasePosTag(that,WDT)
PhrasePosTag(belong,VBP)
PhrasePosTag(to,TO)
PhrasePosTag(Japan,NNP)
phraseDepTag(Japan,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,islands,dobj)
phraseDepTag(islands,all,det)
phraseDepTag(islands,belong,acl:relcl)
phraseDepTag(belong,that,nsubj)
phraseDepTag(belong,Japan,nmod:to)
phraseDepTag(Japan,to,case)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Island')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Japan'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Island . ?uri dbo:country res:Japan . }


Who invented the zipper? 
[u'Who', u'invented', u'the', u'zipper', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Invented,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Zipper,4,4)
PhrasePosTag(Who,WP)
PhrasePosTag(invented,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(zipper,NN)
phraseDepTag(zipper,invented,root)
phraseDepTag(invented,Who,nsubj)
phraseDepTag(invented,zipper,dobj)
phraseDepTag(zipper,the,det)
What is the ruling party in Lisbon? 
[u'What', u'is', u'the', u'ruling', u'party', u'in', u'Lisbon', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Ruling,4,4)
PhraseIndex(Party,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Lisbon,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(ruling,VBG)
PhrasePosTag(party,NN)
PhrasePosTag(in,IN)
PhrasePosTag(Lisbon,NNP)
phraseDepTag(Lisbon,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,party,nsubj)
phraseDepTag(party,the,det)
phraseDepTag(party,ruling,amod)
phraseDepTag(party,Lisbon,nmod:in)
phraseDepTag(Lisbon,in,case)
[(('http://dbpedia.org/resource/', 'Lisbon'), ('http://dbpedia.org/property/', 'leaderParty'), SparqlVar('uri'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Lisbon dbp:leaderParty ?uri . }


What are the nicknames of San Francisco? 
[u'What', u'are', u'the', u'nicknames', u'of', u'San', u'Francisco', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Are,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Nicknames,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(San,6,6)
PhraseIndex(Francisco,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(are,VBP)
PhrasePosTag(the,DT)
PhrasePosTag(nicknames,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(San,NNP)
PhrasePosTag(Francisco,NNP)
phraseDepTag(Francisco,What,root)
phraseDepTag(What,are,cop)
phraseDepTag(What,nicknames,nsubj)
phraseDepTag(nicknames,the,det)
phraseDepTag(nicknames,Francisco,nmod:of)
phraseDepTag(Francisco,of,case)
phraseDepTag(Francisco,San,compound)
[(('http://dbpedia.org/resource/', 'San_Francisco'), ('http://dbpedia.org/property/', 'nickname'), SparqlVar('string'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:San_Francisco dbp:nickname ?string . }


Which Greek goddesses dwelt on Mount Olympus? 
[u'Which', u'Greek', u'goddesses', u'dwelt', u'on', u'Mount', u'Olympus', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Greek,2,2)
PhraseIndex(Goddesses,3,3)
PhraseIndex(Dwelt,4,4)
PhraseIndex(On,5,5)
PhraseIndex(Mount,6,6)
PhraseIndex(Olympus,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Greek,JJ)
PhrasePosTag(goddesses,NNS)
PhrasePosTag(dwelt,VBP)
PhrasePosTag(on,IN)
PhrasePosTag(Mount,NNP)
PhrasePosTag(Olympus,NNP)
phraseDepTag(Olympus,dwelt,root)
phraseDepTag(goddesses,Which,det)
phraseDepTag(goddesses,Greek,amod)
phraseDepTag(dwelt,goddesses,nsubj)
phraseDepTag(dwelt,Olympus,nmod:on)
phraseDepTag(Olympus,on,case)
phraseDepTag(Olympus,Mount,compound)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'GreekGoddesses')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'abode'), ('http://dbpedia.org/resource/', 'Mount_Olympus'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:GreekGoddesses . ?uri dbp:abode res:Mount_Olympus . }


When were the Hells Angels founded? 
[u'When', u'were', u'the', u'Hells', u'Angels', u'founded', u'?']
PhraseIndex(When,1,1)
PhraseIndex(Were,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Hells,4,4)
PhraseIndex(Angels,5,5)
PhraseIndex(Founded,6,6)
PhrasePosTag(When,WRB)
PhrasePosTag(were,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(Hells,NNP)
PhrasePosTag(Angels,NNPS)
PhrasePosTag(founded,VBN)
phraseDepTag(founded,founded,root)
phraseDepTag(Angels,the,det)
phraseDepTag(Angels,Hells,compound)
phraseDepTag(founded,When,advmod)
phraseDepTag(founded,were,auxpass)
phraseDepTag(founded,Angels,nsubjpass)
[(('http://dbpedia.org/resource/', 'Hells_Angels'), ('http://dbpedia.org/property/', 'founded'), SparqlVar('date'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Hells_Angels dbp:founded ?date . }


Give me all Apollo 14 astronauts. 
[u'Give', u'me', u'all', u'Apollo', u'14', u'astronauts', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Apollo,4,4)
PhraseIndex(14,5,5)
PhraseIndex(Astronauts,6,6)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(Apollo,NNP)
PhrasePosTag(14,CD)
PhrasePosTag(astronauts,NNS)
phraseDepTag(astronauts,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,astronauts,dobj)
phraseDepTag(astronauts,all,det)
phraseDepTag(astronauts,Apollo,compound)
phraseDepTag(astronauts,14,nummod)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'mission'), ('http://dbpedia.org/resource/', 'Apollo_14'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 . }


What is the time zone of Salt Lake City? 
[u'What', u'is', u'the', u'time', u'zone', u'of', u'Salt', u'Lake', u'City', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Time,4,4)
PhraseIndex(Zone,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Salt,7,7)
PhraseIndex(Lake,8,8)
PhraseIndex(City,9,9)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(time,NN)
PhrasePosTag(zone,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Salt,NNP)
PhrasePosTag(Lake,NNP)
PhrasePosTag(City,NNP)
phraseDepTag(City,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,zone,nsubj)
phraseDepTag(zone,the,det)
phraseDepTag(zone,time,compound)
phraseDepTag(zone,City,nmod:of)
phraseDepTag(City,of,case)
phraseDepTag(City,Salt,compound)
phraseDepTag(City,Lake,compound)
[(('http://dbpedia.org/resource/', 'Salt_Lake_City'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Salt_Lake_City dbp:timezone ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(U.S.,2,2)
PhraseIndex(States,3,3)
PhraseIndex(Are,4,4)
PhraseIndex(In,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Same,7,7)
PhraseIndex(Time,8,8)
PhraseIndex(Zone,9,9)
PhraseIndex(As,10,10)
PhraseIndex(Utah,11,11)

[u'Which', u'U.S.', u'states', u'are', u'in', u'the', u'same', u'time', u'zone', u'as', u'Utah']
Which U.S. states are in the same time zone as Utah?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(states,NNS)
PhrasePosTag(are,VBP)
PhrasePosTag(in,IN)
PhrasePosTag(the,DT)
PhrasePosTag(same,JJ)
PhrasePosTag(time,NN)
PhrasePosTag(zone,NN)
PhrasePosTag(as,IN)
PhrasePosTag(Utah,NNP)
phraseDepTag(Utah,are,root)
phraseDepTag(states,Which,det)
phraseDepTag(states,U.S.,compound)
phraseDepTag(are,states,nsubj)
phraseDepTag(are,zone,nmod:in)
phraseDepTag(zone,in,case)
phraseDepTag(zone,the,det)
phraseDepTag(zone,same,amod)
phraseDepTag(zone,time,compound)
phraseDepTag(zone,Utah,nmod:as)
phraseDepTag(Utah,as,case)
[(('http://dbpedia.org/resource/', 'Utah'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Utah'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:timezone ?x . FILTER (?uri != res:Utah) }


Give me the capitals of all countries in Africa. 
[u'Give', u'me', u'the', u'capitals', u'of', u'all', u'countries', u'in', u'Africa', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Capitals,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(All,6,6)
PhraseIndex(Countries,7,7)
PhraseIndex(In,8,8)
PhraseIndex(Africa,9,9)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(the,DT)
PhrasePosTag(capitals,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(all,DT)
PhrasePosTag(countries,NNS)
PhrasePosTag(in,IN)
PhrasePosTag(Africa,NNP)
phraseDepTag(Africa,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,capitals,dobj)
phraseDepTag(capitals,the,det)
phraseDepTag(capitals,countries,nmod:of)
phraseDepTag(countries,of,case)
phraseDepTag(countries,all,det)
phraseDepTag(countries,Africa,nmod:in)
phraseDepTag(Africa,in,case)
[(SparqlVar('states'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'AfricanCountries')), (SparqlVar('states'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?states rdf:type yago:AfricanCountries . ?states dbo:capital ?uri . }


Give me a list of all lakes in Denmark. 
[u'Give', u'me', u'a', u'list', u'of', u'all', u'lakes', u'in', u'Denmark', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(A,3,3)
PhraseIndex(List,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(All,6,6)
PhraseIndex(Lakes,7,7)
PhraseIndex(In,8,8)
PhraseIndex(Denmark,9,9)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(a,DT)
PhrasePosTag(list,NN)
PhrasePosTag(of,IN)
PhrasePosTag(all,DT)
PhrasePosTag(lakes,NNS)
PhrasePosTag(in,IN)
PhrasePosTag(Denmark,NNP)
phraseDepTag(Denmark,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,list,dobj)
phraseDepTag(list,a,det)
phraseDepTag(list,lakes,nmod:of)
phraseDepTag(lakes,of,case)
phraseDepTag(lakes,all,det)
phraseDepTag(lakes,Denmark,nmod:in)
phraseDepTag(Denmark,in,case)
[]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { { ?uri rdf:type dbo:Lake . ?uri dbo:country res:Denmark . } UNION { ?uri rdf:type yago:LakesOfDenmark . } }


How many space missions have there been? 
[u'How', u'many', u'space', u'missions', u'have', u'there', u'been', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Space,3,3)
PhraseIndex(Missions,4,4)
PhraseIndex(Have,5,5)
PhraseIndex(There,6,6)
PhraseIndex(Been,7,7)
PhrasePosTag(How,WRB)
PhrasePosTag(many,JJ)
PhrasePosTag(space,NN)
PhrasePosTag(missions,NNS)
PhrasePosTag(have,VBP)
PhrasePosTag(there,RB)
PhrasePosTag(been,VBN)
phraseDepTag(been,been,root)
phraseDepTag(many,How,advmod)
phraseDepTag(missions,many,amod)
phraseDepTag(missions,space,compound)
phraseDepTag(been,missions,nsubj)
phraseDepTag(been,have,aux)
phraseDepTag(been,there,advmod)
[(('http://dbpedia.org/resource/', 'Aristotle'), ('http://dbpedia.org/ontology/', 'influencedBy'), ('http://dbpedia.org/resource/', 'Socrates'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Aristotle dbo:influencedBy res:Socrates . }


Give me all Danish films. 
[u'Give', u'me', u'all', u'Danish', u'films', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Danish,4,4)
PhraseIndex(Films,5,5)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(Danish,JJ)
PhrasePosTag(films,NNS)
phraseDepTag(films,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,films,dobj)
phraseDepTag(films,all,det)
phraseDepTag(films,Danish,amod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Denmark'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:country res:Denmark . }


Give me all launch pads operated by NASA. 
[u'Give', u'me', u'all', u'launch', u'pads', u'operated', u'by', u'NASA', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Launch,4,4)
PhraseIndex(Pads,5,5)
PhraseIndex(Operated,6,6)
PhraseIndex(By,7,7)
PhraseIndex(Nasa,8,8)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(launch,NN)
PhrasePosTag(pads,NNS)
PhrasePosTag(operated,VBN)
PhrasePosTag(by,IN)
PhrasePosTag(NASA,NNP)
phraseDepTag(NASA,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,pads,dobj)
phraseDepTag(pads,all,det)
phraseDepTag(pads,launch,compound)
phraseDepTag(pads,operated,acl)
phraseDepTag(operated,NASA,nmod:by)
phraseDepTag(NASA,by,case)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'LaunchPad')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'operator'), ('http://dbpedia.org/resource/', 'NASA'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:LaunchPad . ?uri dbo:operator res:NASA . }


Which instruments does Cat Stevens play? 
[u'Which', u'instruments', u'does', u'Cat', u'Stevens', u'play', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Instruments,2,2)
PhraseIndex(Does,3,3)
PhraseIndex(Cat,4,4)
PhraseIndex(Stevens,5,5)
PhraseIndex(Play,6,6)
PhrasePosTag(Which,WDT)
PhrasePosTag(instruments,NNS)
PhrasePosTag(does,VBZ)
PhrasePosTag(Cat,NNP)
PhrasePosTag(Stevens,NNP)
PhrasePosTag(play,VB)
phraseDepTag(play,play,root)
phraseDepTag(instruments,Which,det)
phraseDepTag(Stevens,Cat,compound)
phraseDepTag(play,instruments,dobj)
phraseDepTag(play,does,aux)
phraseDepTag(play,Stevens,nsubj)
[(('http://dbpedia.org/resource/', 'Cat_Stevens'), ('http://dbpedia.org/ontology/', 'instrument'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cat_Stevens dbo:instrument ?uri . }


Which ships were called after Benjamin Franklin? 
[u'Which', u'ships', u'were', u'called', u'after', u'Benjamin', u'Franklin', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Ships,2,2)
PhraseIndex(Were,3,3)
PhraseIndex(Called,4,4)
PhraseIndex(After,5,5)
PhraseIndex(Benjamin,6,6)
PhraseIndex(Franklin,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(ships,NNS)
PhrasePosTag(were,VBD)
PhrasePosTag(called,VBN)
PhrasePosTag(after,IN)
PhrasePosTag(Benjamin,NNP)
PhrasePosTag(Franklin,NNP)
phraseDepTag(Franklin,called,root)
phraseDepTag(ships,Which,det)
phraseDepTag(called,ships,nsubjpass)
phraseDepTag(called,were,auxpass)
phraseDepTag(called,Franklin,nmod:after)
phraseDepTag(Franklin,after,case)
phraseDepTag(Franklin,Benjamin,compound)
[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'shipNamesake'), ('http://dbpedia.org/resource/', 'Benjamin_Franklin'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri dbp:shipNamesake res:Benjamin_Franklin . }


Who are the parents of the wife of Juan Carlos I? 
[u'Who', u'are', u'the', u'parents', u'of', u'the', u'wife', u'of', u'Juan', u'Carlos', u'I', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Are,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Parents,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Wife,7,7)
PhraseIndex(Of,8,8)
PhraseIndex(Juan,9,9)
PhraseIndex(Carlos,10,10)
PhraseIndex(I,11,11)
PhrasePosTag(Who,WP)
PhrasePosTag(are,VBP)
PhrasePosTag(the,DT)
PhrasePosTag(parents,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(wife,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Juan,NNP)
PhrasePosTag(Carlos,NNP)
PhrasePosTag(I,PRP)
phraseDepTag(I,Who,root)
phraseDepTag(Who,are,cop)
phraseDepTag(Who,parents,nsubj)
phraseDepTag(Who,I,nsubj)
phraseDepTag(parents,the,det)
phraseDepTag(parents,wife,nmod:of)
phraseDepTag(wife,of,case)
phraseDepTag(wife,the,det)
phraseDepTag(wife,Carlos,nmod:of)
phraseDepTag(Carlos,of,case)
phraseDepTag(Carlos,Juan,compound)
[(('http://dbpedia.org/resource/', 'Juan_Carlos_I_of_Spain'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'parent'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Juan_Carlos_I_of_Spain dbo:spouse ?x . ?x dbo:parent ?uri . }


How many employees does Google have? 
[u'How', u'many', u'employees', u'does', u'Google', u'have', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Employees,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(Google,5,5)
PhraseIndex(Have,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(many,JJ)
PhrasePosTag(employees,NNS)
PhrasePosTag(does,VBZ)
PhrasePosTag(Google,NNP)
PhrasePosTag(have,VB)
phraseDepTag(have,have,root)
phraseDepTag(many,How,advmod)
phraseDepTag(employees,many,amod)
phraseDepTag(have,employees,dobj)
phraseDepTag(have,does,aux)
phraseDepTag(have,Google,nsubj)
[(('http://dbpedia.org/resource/', 'Google'), ('http://dbpedia.org/ontology/', 'numberOfEmployees'), SparqlVar('num'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?num WHERE { res:Google dbo:numberOfEmployees ?num . }


Did Tesla win a nobel prize in physics? 
[u'Did', u'Tesla', u'win', u'a', u'nobel', u'prize', u'in', u'physics', u'?']
PhraseIndex(Did,1,1)
PhraseIndex(Tesla,2,2)
PhraseIndex(Win,3,3)
PhraseIndex(A,4,4)
PhraseIndex(Nobel,5,5)
PhraseIndex(Prize,6,6)
PhraseIndex(In,7,7)
PhraseIndex(Physics,8,8)
PhrasePosTag(Did,VBD)
PhrasePosTag(Tesla,NNP)
PhrasePosTag(win,VB)
PhrasePosTag(a,DT)
PhrasePosTag(nobel,JJ)
PhrasePosTag(prize,NN)
PhrasePosTag(in,IN)
PhrasePosTag(physics,NNS)
phraseDepTag(physics,win,root)
phraseDepTag(win,Did,aux)
phraseDepTag(win,Tesla,nsubj)
phraseDepTag(win,prize,dobj)
phraseDepTag(win,physics,nmod:in)
phraseDepTag(prize,a,det)
phraseDepTag(prize,nobel,amod)
phraseDepTag(physics,in,case)
[(('http://dbpedia.org/resource/', 'Nikola_Tesla'), ('http://dbpedia.org/ontology/', 'award'), ('http://dbpedia.org/resource/', 'Nobel_Prize_in_Physics'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Nikola_Tesla dbo:award res:Nobel_Prize_in_Physics . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Cities,4,4)
PhraseIndex(In,5,5)
PhraseIndex(New,6,6)
PhraseIndex(Jersey,7,7)
PhraseIndex(With,8,8)
PhraseIndex(More,9,9)
PhraseIndex(Than,10,10)
PhraseIndex(100000,11,11)
PhraseIndex(Inhabitants,12,12)

[u'Give', u'me', u'all', u'cities', u'in', u'New', u'Jersey', u'with', u'more', u'than', u'100000', u'inhabitants']
Give me all cities in New Jersey with more than 100000 inhabitants.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(cities,NNS)
PhrasePosTag(in,IN)
PhrasePosTag(New,NNP)
PhrasePosTag(Jersey,NNP)
PhrasePosTag(with,IN)
PhrasePosTag(more,JJR)
PhrasePosTag(than,IN)
PhrasePosTag(100000,CD)
PhrasePosTag(inhabitants,NNS)
phraseDepTag(inhabitants,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,cities,dobj)
phraseDepTag(cities,all,det)
phraseDepTag(cities,Jersey,nmod:in)
phraseDepTag(Jersey,in,case)
phraseDepTag(Jersey,New,compound)
phraseDepTag(Jersey,inhabitants,nmod:with)
phraseDepTag(more,than,mwe)
phraseDepTag(100000,more,advmod)
phraseDepTag(inhabitants,with,case)
phraseDepTag(inhabitants,100000,nummod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'isPartOf'), ('http://dbpedia.org/resource/', 'New_Jersey')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('inhabitants')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'isPartOf'), ('http://dbpedia.org/resource/', 'New_Jersey')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('inhabitants'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City . ?uri dbo:isPartOf res:New_Jersey . ?uri dbo:populationTotal ?inhabitants . FILTER (?inhabitants > 100000) . }


Is Michelle Obama the wife of Barack Obama? 
[u'Is', u'Michelle', u'Obama', u'the', u'wife', u'of', u'Barack', u'Obama', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(Michelle,2,2)
PhraseIndex(Obama,3,3)
PhraseIndex(The,4,4)
PhraseIndex(Wife,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Barack,7,7)
PhraseIndex(Obama,8,8)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Michelle,NNP)
PhrasePosTag(Obama,NNP)
PhrasePosTag(the,DT)
PhrasePosTag(wife,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Barack,NNP)
PhrasePosTag(Obama,NNP)
phraseDepTag(Obama,wife,root)
phraseDepTag(Obama,Michelle,compound)
phraseDepTag(wife,Is,cop)
phraseDepTag(wife,Obama,nsubj)
phraseDepTag(wife,the,det)
phraseDepTag(wife,Obama,nmod:of)
phraseDepTag(Obama,of,case)
phraseDepTag(Obama,Barack,compound)
[(('http://dbpedia.org/resource/', 'Barack_Obama'), ('http://dbpedia.org/ontology/', 'spouse'), ('http://dbpedia.org/resource/', 'Michelle_Obama'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Barack_Obama dbo:spouse res:Michelle_Obama . }


When was the Statue of Liberty built? 
[u'When', u'was', u'the', u'Statue', u'of', u'Liberty', u'built', u'?']
PhraseIndex(When,1,1)
PhraseIndex(Was,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Statue,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Liberty,6,6)
PhraseIndex(Built,7,7)
PhrasePosTag(When,WRB)
PhrasePosTag(was,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(Statue,NNP)
PhrasePosTag(of,IN)
PhrasePosTag(Liberty,NNP)
PhrasePosTag(built,VBN)
phraseDepTag(built,built,root)
phraseDepTag(Statue,the,det)
phraseDepTag(Statue,Liberty,nmod:of)
phraseDepTag(Liberty,of,case)
phraseDepTag(built,When,advmod)
phraseDepTag(built,was,auxpass)
phraseDepTag(built,Statue,nsubjpass)
[(('http://dbpedia.org/resource/', 'Statue_of_Liberty'), ('http://dbpedia.org/property/', 'beginningDate'), SparqlVar('date'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Statue_of_Liberty dbp:beginningDate ?date . }


In which U.S. state is Fort Knox located? 
[u'In', u'which', u'U.S.', u'state', u'is', u'Fort', u'Knox', u'located', u'?']
PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(U.S.,3,3)
PhraseIndex(State,4,4)
PhraseIndex(Is,5,5)
PhraseIndex(Fort,6,6)
PhraseIndex(Knox,7,7)
PhraseIndex(Located,8,8)
PhrasePosTag(In,IN)
PhrasePosTag(which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(state,NN)
PhrasePosTag(is,VBZ)
PhrasePosTag(Fort,NNP)
PhrasePosTag(Knox,NNP)
PhrasePosTag(located,JJ)
phraseDepTag(located,located,root)
phraseDepTag(state,In,case)
phraseDepTag(state,which,det)
phraseDepTag(state,U.S.,compound)
phraseDepTag(Knox,Fort,compound)
phraseDepTag(located,state,nmod:in)
phraseDepTag(located,is,cop)
phraseDepTag(located,Knox,nsubj)
[(('http://dbpedia.org/resource/', 'Fort_Knox'), ('http://dbpedia.org/property/', 'location'), SparqlVar('uri')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'United_States'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Fort_Knox dbp:location ?uri . ?uri dbo:country res:United_States . }


How many children did Benjamin Franklin have? 
[u'How', u'many', u'children', u'did', u'Benjamin', u'Franklin', u'have', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Children,3,3)
PhraseIndex(Did,4,4)
PhraseIndex(Benjamin,5,5)
PhraseIndex(Franklin,6,6)
PhraseIndex(Have,7,7)
PhrasePosTag(How,WRB)
PhrasePosTag(many,JJ)
PhrasePosTag(children,NNS)
PhrasePosTag(did,VBD)
PhrasePosTag(Benjamin,NNP)
PhrasePosTag(Franklin,NNP)
PhrasePosTag(have,VB)
phraseDepTag(have,have,root)
phraseDepTag(many,How,advmod)
phraseDepTag(children,many,amod)
phraseDepTag(Franklin,Benjamin,compound)
phraseDepTag(have,children,dobj)
phraseDepTag(have,did,aux)
phraseDepTag(have,Franklin,nsubj)
[(('http://dbpedia.org/resource/', 'Michael_Jackson'), ('http://dbpedia.org/ontology/', 'deathDate'), SparqlVar('date'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Michael_Jackson dbo:deathDate ?date . }


PhraseIndex(Which,1,1)
PhraseIndex(Chess,2,2)
PhraseIndex(Players,3,3)
PhraseIndex(Died,4,4)
PhraseIndex(In,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Same,7,7)
PhraseIndex(Place,8,8)
PhraseIndex(They,9,9)
PhraseIndex(Were,10,10)
PhraseIndex(Born,11,11)
PhraseIndex(In,12,12)

[u'Which', u'Chess', u'players', u'died', u'in', u'the', u'same', u'place', u'they', u'were', u'born', u'in']
Which Chess players died in the same place they were born in?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(Chess,NN)
PhrasePosTag(players,NNS)
PhrasePosTag(died,VBD)
PhrasePosTag(in,IN)
PhrasePosTag(the,DT)
PhrasePosTag(same,JJ)
PhrasePosTag(place,NN)
PhrasePosTag(they,PRP)
PhrasePosTag(were,VBD)
PhrasePosTag(born,VBN)
PhrasePosTag(in,IN)
phraseDepTag(in,born,root)
phraseDepTag(players,Chess,compound)
phraseDepTag(died,Which,dobj)
phraseDepTag(died,players,nsubj)
phraseDepTag(died,place,nmod:in)
phraseDepTag(place,in,case)
phraseDepTag(place,the,det)
phraseDepTag(place,same,amod)
phraseDepTag(born,died,advcl)
phraseDepTag(born,they,nsubjpass)
phraseDepTag(born,were,auxpass)
phraseDepTag(born,in,nmod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'ChessPlayer')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), SparqlVar('x')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'deathPlace'), SparqlVar('y')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'ChessPlayer')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), SparqlVar('x')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'deathPlace'), SparqlVar('y'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:ChessPlayer . ?uri dbo:birthPlace ?x . ?uri dbo:deathPlace ?y . FILTER (?x = ?y) . }


List the children of Margaret Thatcher. 
[u'List', u'the', u'children', u'of', u'Margaret', u'Thatcher', u'.']
PhraseIndex(List,1,1)
PhraseIndex(The,2,2)
PhraseIndex(Children,3,3)
PhraseIndex(Of,4,4)
PhraseIndex(Margaret,5,5)
PhraseIndex(Thatcher,6,6)
PhrasePosTag(List,VB)
PhrasePosTag(the,DT)
PhrasePosTag(children,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(Margaret,NNP)
PhrasePosTag(Thatcher,NNP)
phraseDepTag(Thatcher,List,root)
phraseDepTag(List,children,dobj)
phraseDepTag(children,the,det)
phraseDepTag(children,Thatcher,nmod:of)
phraseDepTag(Thatcher,of,case)
phraseDepTag(Thatcher,Margaret,compound)
[(('http://dbpedia.org/resource/', 'Margaret_Thatcher'), ('http://dbpedia.org/ontology/', 'child'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Margaret_Thatcher dbo:child ?uri . }


Who was called Scarface? 
[u'Who', u'was', u'called', u'Scarface', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Was,2,2)
PhraseIndex(Called,3,3)
PhraseIndex(Scarface,4,4)
PhrasePosTag(Who,WP)
PhrasePosTag(was,VBD)
PhrasePosTag(called,VBN)
PhrasePosTag(Scarface,NNP)
phraseDepTag(Scarface,called,root)
phraseDepTag(called,Who,nsubjpass)
phraseDepTag(called,was,auxpass)
phraseDepTag(called,Scarface,dobj)
[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'nickname'), ('http://dbpedia.org/resource/', 'Scarface'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbp:nickname res:Scarface . }


Was Margaret Thatcher a chemist? 
[u'Was', u'Margaret', u'Thatcher', u'a', u'chemist', u'?']
PhraseIndex(Was,1,1)
PhraseIndex(Margaret,2,2)
PhraseIndex(Thatcher,3,3)
PhraseIndex(A,4,4)
PhraseIndex(Chemist,5,5)
PhrasePosTag(Was,VBD)
PhrasePosTag(Margaret,NNP)
PhrasePosTag(Thatcher,NNP)
PhrasePosTag(a,DT)
PhrasePosTag(chemist,NN)
phraseDepTag(chemist,chemist,root)
phraseDepTag(Thatcher,Margaret,compound)
phraseDepTag(chemist,Was,cop)
phraseDepTag(chemist,Thatcher,nsubj)
phraseDepTag(chemist,a,det)
[(('http://dbpedia.org/resource/', 'Margaret_Thatcher'), ('http://dbpedia.org/ontology/', 'profession'), ('http://dbpedia.org/resource/', 'Chemist'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> ASK WHERE { res:Margaret_Thatcher dbo:profession res:Chemist . }


Was Marc Chagall a jew? 
[u'Was', u'Marc', u'Chagall', u'a', u'jew', u'?']
PhraseIndex(Was,1,1)
PhraseIndex(Marc,2,2)
PhraseIndex(Chagall,3,3)
PhraseIndex(A,4,4)
PhraseIndex(Jew,5,5)
PhrasePosTag(Was,VBD)
PhrasePosTag(Marc,NNP)
PhrasePosTag(Chagall,NNP)
PhrasePosTag(a,DT)
PhrasePosTag(jew,NN)
phraseDepTag(jew,jew,root)
phraseDepTag(Chagall,Marc,compound)
phraseDepTag(jew,Was,cop)
phraseDepTag(jew,Chagall,nsubj)
phraseDepTag(jew,a,det)
[(('http://dbpedia.org/resource/', 'The_Scream'), ('http://dbpedia.org/ontology/', 'museum'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Scream dbo:museum ?uri . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Books,4,4)
PhraseIndex(By,5,5)
PhraseIndex(William,6,6)
PhraseIndex(Goldman,7,7)
PhraseIndex(With,8,8)
PhraseIndex(More,9,9)
PhraseIndex(Than,10,10)
PhraseIndex(300,11,11)
PhraseIndex(Pages,12,12)

[u'Give', u'me', u'all', u'books', u'by', u'William', u'Goldman', u'with', u'more', u'than', u'300', u'pages']
Give me all books by William Goldman with more than 300 pages.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(books,NNS)
PhrasePosTag(by,IN)
PhrasePosTag(William,NNP)
PhrasePosTag(Goldman,NNP)
PhrasePosTag(with,IN)
PhrasePosTag(more,JJR)
PhrasePosTag(than,IN)
PhrasePosTag(300,CD)
PhrasePosTag(pages,NNS)
phraseDepTag(pages,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,books,dobj)
phraseDepTag(Give,Goldman,nmod:by)
phraseDepTag(books,all,det)
phraseDepTag(Goldman,by,case)
phraseDepTag(Goldman,William,compound)
phraseDepTag(Goldman,pages,nmod:with)
phraseDepTag(more,than,mwe)
phraseDepTag(300,more,advmod)
phraseDepTag(pages,with,case)
phraseDepTag(pages,300,nummod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Book')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'author'), ('http://dbpedia.org/resource/', 'William_Goldman')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'numberOfPages'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Book')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'author'), ('http://dbpedia.org/resource/', 'William_Goldman')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'numberOfPages'), SparqlVar('x'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book . ?uri dbo:author res:William_Goldman . ?uri dbo:numberOfPages ?x . FILTER (?x > 300) }


PhraseIndex(Which,1,1)
PhraseIndex(Books,2,2)
PhraseIndex(By,3,3)
PhraseIndex(Kerouac,4,4)
PhraseIndex(Were,5,5)
PhraseIndex(Published,6,6)
PhraseIndex(By,7,7)
PhraseIndex(Viking,8,8)
PhraseIndex(Press,9,9)

[u'Which', u'books', u'by', u'Kerouac', u'were', u'published', u'by', u'Viking', u'Press']
Which books by Kerouac were published by Viking Press?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(books,NNS)
PhrasePosTag(by,IN)
PhrasePosTag(Kerouac,NNP)
PhrasePosTag(were,VBD)
PhrasePosTag(published,VBN)
PhrasePosTag(by,IN)
PhrasePosTag(Viking,JJ)
PhrasePosTag(Press,NNP)
phraseDepTag(Press,published,root)
phraseDepTag(books,Which,det)
phraseDepTag(books,Kerouac,nmod:by)
phraseDepTag(Kerouac,by,case)
phraseDepTag(published,books,nsubjpass)
phraseDepTag(published,were,auxpass)
phraseDepTag(published,Press,nmod:agent)
phraseDepTag(Press,by,case)
phraseDepTag(Press,Viking,amod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Book')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'publisher'), ('http://dbpedia.org/resource/', 'Viking_Press')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'author'), ('http://dbpedia.org/resource/', 'Jack_Kerouac'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book . ?uri dbo:publisher res:Viking_Press . ?uri dbo:author res:Jack_Kerouac . }


Give me a list of all American inventions. 
[u'Give', u'me', u'a', u'list', u'of', u'all', u'American', u'inventions', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(A,3,3)
PhraseIndex(List,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(All,6,6)
PhraseIndex(American,7,7)
PhraseIndex(Inventions,8,8)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(a,DT)
PhrasePosTag(list,NN)
PhrasePosTag(of,IN)
PhrasePosTag(all,DT)
PhrasePosTag(American,JJ)
PhrasePosTag(inventions,NNS)
phraseDepTag(inventions,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,list,dobj)
phraseDepTag(list,a,det)
phraseDepTag(list,inventions,nmod:of)
phraseDepTag(inventions,of,case)
phraseDepTag(inventions,all,det)
phraseDepTag(inventions,American,amod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'AmericanInventions'))]
PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:AmericanInventions . }


How high is the Mount Everest? 
[u'How', u'high', u'is', u'the', u'Mount', u'Everest', u'?']
PhraseIndex(How,1,1)
PhraseIndex(High,2,2)
PhraseIndex(Is,3,3)
PhraseIndex(The,4,4)
PhraseIndex(Mount,5,5)
PhraseIndex(Everest,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(high,JJ)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(Mount,NNP)
PhrasePosTag(Everest,NNP)
phraseDepTag(Everest,is,root)
phraseDepTag(high,How,advmod)
phraseDepTag(is,high,dep)
phraseDepTag(is,Everest,nsubj)
phraseDepTag(Everest,the,det)
phraseDepTag(Everest,Mount,compound)
[(('http://dbpedia.org/resource/', 'Mount_Everest'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('num'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Mount_Everest dbo:elevation ?num. }


Who created the comic Captain America? 
[u'Who', u'created', u'the', u'comic', u'Captain', u'America', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Created,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Comic,4,4)
PhraseIndex(Captain,5,5)
PhraseIndex(America,6,6)
PhrasePosTag(Who,WP)
PhrasePosTag(created,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(comic,JJ)
PhrasePosTag(Captain,NNP)
PhrasePosTag(America,NNP)
phraseDepTag(America,created,root)
phraseDepTag(created,Who,nsubj)
phraseDepTag(created,America,dobj)
phraseDepTag(America,the,det)
phraseDepTag(America,comic,amod)
phraseDepTag(America,Captain,compound)
[(('http://dbpedia.org/resource/', 'Captain_America'), ('http://dbpedia.org/ontology/', 'creator'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri . }


How many people live in the capital of Australia? 
[u'How', u'many', u'people', u'live', u'in', u'the', u'capital', u'of', u'Australia', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(People,3,3)
PhraseIndex(Live,4,4)
PhraseIndex(In,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Capital,7,7)
PhraseIndex(Of,8,8)
PhraseIndex(Australia,9,9)
PhrasePosTag(How,WRB)
PhrasePosTag(many,JJ)
PhrasePosTag(people,NNS)
PhrasePosTag(live,VBP)
PhrasePosTag(in,IN)
PhrasePosTag(the,DT)
PhrasePosTag(capital,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Australia,NNP)
phraseDepTag(Australia,live,root)
phraseDepTag(many,How,advmod)
phraseDepTag(people,many,amod)
phraseDepTag(live,people,nsubj)
phraseDepTag(live,capital,nmod:in)
phraseDepTag(capital,in,case)
phraseDepTag(capital,the,det)
phraseDepTag(capital,Australia,nmod:of)
phraseDepTag(Australia,of,case)
[(('http://dbpedia.org/resource/', 'Australia'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('num'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num . }


What is the largest city in Australia? 
[u'What', u'is', u'the', u'largest', u'city', u'in', u'Australia', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Largest,4,4)
PhraseIndex(City,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Australia,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(largest,JJS)
PhrasePosTag(city,NN)
PhrasePosTag(in,IN)
PhrasePosTag(Australia,NNP)
phraseDepTag(Australia,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,city,nsubj)
phraseDepTag(city,the,det)
phraseDepTag(city,largest,amod)
phraseDepTag(city,Australia,nmod:in)
phraseDepTag(Australia,in,case)
[(('http://dbpedia.org/resource/', 'Australia'), ('http://dbpedia.org/ontology/', 'largestCity'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Australia dbo:largestCity ?uri . }


Who composed the music for Harold and Maude? 
[u'Who', u'composed', u'the', u'music', u'for', u'Harold', u'and', u'Maude', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Composed,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Music,4,4)
PhraseIndex(For,5,5)
PhraseIndex(Harold,6,6)
PhraseIndex(And,7,7)
PhraseIndex(Maude,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(composed,VBN)
PhrasePosTag(the,DT)
PhrasePosTag(music,NN)
PhrasePosTag(for,IN)
PhrasePosTag(Harold,NNP)
PhrasePosTag(and,CC)
PhrasePosTag(Maude,NNP)
phraseDepTag(Maude,composed,root)
phraseDepTag(composed,Who,nsubj)
phraseDepTag(composed,music,dobj)
phraseDepTag(music,the,det)
phraseDepTag(music,Harold,nmod:for)
phraseDepTag(music,Maude,nmod:for)
phraseDepTag(Harold,for,case)
phraseDepTag(Harold,and,cc)
[(('http://dbpedia.org/resource/', 'Harold_and_Maude'), ('http://dbpedia.org/ontology/', 'musicComposer'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Harold_and_Maude dbo:musicComposer ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(Films,2,2)
PhraseIndex(Starring,3,3)
PhraseIndex(Clint,4,4)
PhraseIndex(Eastwood,5,5)
PhraseIndex(Did,6,6)
PhraseIndex(He,7,7)
PhraseIndex(Direct,8,8)
PhraseIndex(Himself,9,9)

[u'Which', u'films', u'starring', u'Clint', u'Eastwood', u'did', u'he', u'direct', u'himself']
Which films starring Clint Eastwood did he direct himself?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(films,NNS)
PhrasePosTag(starring,VBG)
PhrasePosTag(Clint,NNP)
PhrasePosTag(Eastwood,NNP)
PhrasePosTag(did,VBD)
PhrasePosTag(he,PRP)
PhrasePosTag(direct,VB)
PhrasePosTag(himself,PRP)
phraseDepTag(himself,direct,root)
phraseDepTag(films,Which,det)
phraseDepTag(films,Eastwood,nmod:starring)
phraseDepTag(Eastwood,starring,case)
phraseDepTag(Eastwood,Clint,compound)
phraseDepTag(direct,films,dep)
phraseDepTag(direct,did,aux)
phraseDepTag(direct,he,nsubj)
phraseDepTag(direct,himself,dobj)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Clint_Eastwood')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Clint_Eastwood'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Clint_Eastwood . ?uri dbo:starring res:Clint_Eastwood . }


PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(City,3,3)
PhraseIndex(Was,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Former,6,6)
PhraseIndex(Dutch,7,7)
PhraseIndex(Queen,8,8)
PhraseIndex(Juliana,9,9)
PhraseIndex(Buried,10,10)

[u'In', u'which', u'city', u'was', u'the', u'former', u'Dutch', u'queen', u'Juliana', u'buried']
In which city was the former Dutch queen Juliana buried?
	 La ligne est isolée 
PhrasePosTag(In,IN)
PhrasePosTag(which,WDT)
PhrasePosTag(city,NN)
PhrasePosTag(was,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(former,JJ)
PhrasePosTag(Dutch,NNP)
PhrasePosTag(queen,NN)
PhrasePosTag(Juliana,NNP)
PhrasePosTag(buried,VBN)
phraseDepTag(buried,buried,root)
phraseDepTag(city,In,case)
phraseDepTag(city,which,det)
phraseDepTag(Juliana,the,det)
phraseDepTag(Juliana,former,amod)
phraseDepTag(Juliana,Dutch,compound)
phraseDepTag(Juliana,queen,compound)
phraseDepTag(buried,city,nmod:in)
phraseDepTag(buried,was,auxpass)
phraseDepTag(buried,Juliana,nsubjpass)
[(('http://dbpedia.org/resource/', 'Juliana_of_the_Netherlands'), ('http://dbpedia.org/ontology/', 'restingPlace'), SparqlVar('uri')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Settlement'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Juliana_of_the_Netherlands dbo:restingPlace ?uri. ?uri rdf:type dbo:Settlement . }


Is Egypts largest city also its capital? 
[u'Is', u'Egypts', u'largest', u'city', u'also', u'its', u'capital', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(Egypts,2,2)
PhraseIndex(Largest,3,3)
PhraseIndex(City,4,4)
PhraseIndex(Also,5,5)
PhraseIndex(Its,6,6)
PhraseIndex(Capital,7,7)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Egypts,RB)
PhrasePosTag(largest,JJS)
PhrasePosTag(city,NN)
PhrasePosTag(also,RB)
PhrasePosTag(its,PRP$)
PhrasePosTag(capital,NN)
phraseDepTag(capital,city,root)
phraseDepTag(largest,Egypts,advmod)
phraseDepTag(city,Is,cop)
phraseDepTag(city,largest,amod)
phraseDepTag(city,capital,nmod)
phraseDepTag(capital,also,advmod)
phraseDepTag(capital,its,nmod:poss)
[(('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'largestCity'), SparqlVar('large')), (('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('capital')), (('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'largestCity'), SparqlVar('large')), (('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('capital'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> ASK WHERE { res:Egypt dbo:largestCity ?large . res:Egypt dbo:capital ?capital . FILTER (?large = ?capital) }


PhraseIndex(Where,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Residence,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Prime,7,7)
PhraseIndex(Minister,8,8)
PhraseIndex(Of,9,9)
PhraseIndex(Spain,10,10)

[u'Where', u'is', u'the', u'residence', u'of', u'the', u'prime', u'minister', u'of', u'Spain']
Where is the residence of the prime minister of Spain?
	 La ligne est isolée 
PhrasePosTag(Where,WRB)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(residence,NN)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(prime,JJ)
PhrasePosTag(minister,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Spain,NNP)
phraseDepTag(Spain,is,root)
phraseDepTag(is,Where,advmod)
phraseDepTag(is,residence,nsubj)
phraseDepTag(residence,the,det)
phraseDepTag(residence,minister,nmod:of)
phraseDepTag(minister,of,case)
phraseDepTag(minister,the,det)
phraseDepTag(minister,prime,amod)
phraseDepTag(minister,Spain,nmod:of)
phraseDepTag(Spain,of,case)
[(('http://dbpedia.org/resource/', 'Prime_Minister_of_Spain'), ('http://dbpedia.org/property/', 'residence'), SparqlVar('uri'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Prime_Minister_of_Spain dbp:residence ?uri . }


Which U.S. state has the abbreviation MN? 
[u'Which', u'U.S.', u'state', u'has', u'the', u'abbreviation', u'MN', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(U.S.,2,2)
PhraseIndex(State,3,3)
PhraseIndex(Has,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Abbreviation,6,6)
PhraseIndex(Mn,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(state,NN)
PhrasePosTag(has,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(abbreviation,NN)
PhrasePosTag(MN,NN)
phraseDepTag(MN,has,root)
phraseDepTag(state,Which,det)
phraseDepTag(state,U.S.,compound)
phraseDepTag(has,state,nsubj)
phraseDepTag(has,MN,dobj)
phraseDepTag(MN,the,det)
phraseDepTag(MN,abbreviation,compound)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Akira_Kurosawa')), (('http://dbpedia.org/resource/', 'Rashomon'), ('http://dbpedia.org/ontology/', 'releaseDate'), SparqlVar('y')), (('http://dbpedia.org/resource/', 'Rashomon'), ('http://dbpedia.org/ontology/', 'releaseDate'), SparqlVar('y'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:director res:Akira_Kurosawa . { ?uri dbo:releaseDate ?x . } UNION { ?uri dbp:released ?x . } res:Rashomon dbo:releaseDate ?y . FILTER (?y > ?x) }


PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Founding,4,4)
PhraseIndex(Year,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(The,7,7)
PhraseIndex(Brewery,8,8)
PhraseIndex(That,9,9)
PhraseIndex(Produces,10,10)
PhraseIndex(Pilsner,11,11)
PhraseIndex(Urquell,12,12)

[u'What', u'is', u'the', u'founding', u'year', u'of', u'the', u'brewery', u'that', u'produces', u'Pilsner', u'Urquell']
What is the founding year of the brewery that produces Pilsner Urquell?
	 La ligne est isolée 
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(founding,NN)
PhrasePosTag(year,NN)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(brewery,NN)
PhrasePosTag(that,WDT)
PhrasePosTag(produces,VBZ)
PhrasePosTag(Pilsner,NNP)
PhrasePosTag(Urquell,NNP)
phraseDepTag(Urquell,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,year,nsubj)
phraseDepTag(year,the,det)
phraseDepTag(year,founding,compound)
phraseDepTag(year,brewery,nmod:of)
phraseDepTag(brewery,of,case)
phraseDepTag(brewery,the,det)
phraseDepTag(brewery,produces,acl:relcl)
phraseDepTag(produces,that,nsubj)
phraseDepTag(produces,Urquell,dobj)
phraseDepTag(Urquell,Pilsner,compound)
[(('http://dbpedia.org/resource/', 'Pilsner_Urquell'), ('http://dbpedia.org/property/', 'brewery'), SparqlVar('uri')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'foundation'), SparqlVar('num'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Pilsner_Urquell dbp:brewery ?uri . ?uri dbp:foundation ?num . }


PhraseIndex(Who,1,1)
PhraseIndex(Wrote,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Lyrics,4,4)
PhraseIndex(For,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Polish,7,7)
PhraseIndex(National,8,8)
PhraseIndex(Anthem,9,9)

[u'Who', u'wrote', u'the', u'lyrics', u'for', u'the', u'Polish', u'national', u'anthem']
Who wrote the lyrics for the Polish national anthem?
	 La ligne est isolée 
PhrasePosTag(Who,WP)
PhrasePosTag(wrote,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(lyrics,NNS)
PhrasePosTag(for,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Polish,JJ)
PhrasePosTag(national,JJ)
PhrasePosTag(anthem,NN)
phraseDepTag(anthem,wrote,root)
phraseDepTag(wrote,Who,nsubj)
phraseDepTag(wrote,lyrics,dobj)
phraseDepTag(wrote,anthem,nmod:for)
phraseDepTag(lyrics,the,det)
phraseDepTag(anthem,for,case)
phraseDepTag(anthem,the,det)
phraseDepTag(anthem,Polish,amod)
phraseDepTag(anthem,national,amod)
[(('http://dbpedia.org/resource/', 'Poland'), ('http://dbpedia.org/ontology/', 'anthem'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/property/', 'author'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Poland dbo:anthem ?x . ?x dbp:author ?uri . }


Give me all B-sides of the Ramones. 
[u'Give', u'me', u'all', u'B-sides', u'of', u'the', u'Ramones', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(B-Sides,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Ramones,7,7)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(B-sides,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Ramones,NNPS)
phraseDepTag(Ramones,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,B-sides,dobj)
phraseDepTag(B-sides,all,det)
phraseDepTag(B-sides,Ramones,nmod:of)
phraseDepTag(Ramones,of,case)
phraseDepTag(Ramones,the,det)
[(SparqlVar('x'), ('http://dbpedia.org/ontology/', 'musicalArtist'), ('http://dbpedia.org/resource/', 'Ramones')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'bSide'), SparqlVar('string'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { ?x dbo:musicalArtist res:Ramones . ?x dbo:bSide ?string . }


Who painted The Storm on the Sea of Galilee? 
[u'Who', u'painted', u'The', u'Storm', u'on', u'the', u'Sea', u'of', u'Galilee', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Painted,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Storm,4,4)
PhraseIndex(On,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Sea,7,7)
PhraseIndex(Of,8,8)
PhraseIndex(Galilee,9,9)
PhrasePosTag(Who,WP)
PhrasePosTag(painted,VBD)
PhrasePosTag(The,DT)
PhrasePosTag(Storm,NN)
PhrasePosTag(on,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Sea,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Galilee,NNP)
phraseDepTag(Galilee,painted,root)
phraseDepTag(painted,Who,nsubj)
phraseDepTag(painted,Storm,dobj)
phraseDepTag(painted,Sea,nmod:on)
phraseDepTag(Storm,The,det)
phraseDepTag(Sea,on,case)
phraseDepTag(Sea,the,det)
phraseDepTag(Sea,Galilee,nmod:of)
phraseDepTag(Galilee,of,case)
[(('http://dbpedia.org/resource/', 'The_Storm_on_the_Sea_of_Galilee'), ('http://dbpedia.org/ontology/', 'author'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Storm_on_the_Sea_of_Galilee dbo:author ?uri . }


Which country does the creator of Miffy come from? 
[u'Which', u'country', u'does', u'the', u'creator', u'of', u'Miffy', u'come', u'from', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Country,2,2)
PhraseIndex(Does,3,3)
PhraseIndex(The,4,4)
PhraseIndex(Creator,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Miffy,7,7)
PhraseIndex(Come,8,8)
PhraseIndex(From,9,9)
PhrasePosTag(Which,WDT)
PhrasePosTag(country,NN)
PhrasePosTag(does,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(creator,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Miffy,NNP)
PhrasePosTag(come,VB)
PhrasePosTag(from,IN)
phraseDepTag(from,come,root)
phraseDepTag(country,Which,det)
phraseDepTag(country,from,case)
phraseDepTag(creator,the,det)
phraseDepTag(creator,Miffy,nmod:of)
phraseDepTag(Miffy,of,case)
phraseDepTag(come,country,nmod:from)
phraseDepTag(come,does,aux)
phraseDepTag(come,creator,nsubj)
[(('http://dbpedia.org/resource/', 'Miffy'), ('http://dbpedia.org/ontology/', 'creator'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'nationality'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Miffy dbo:creator ?x . ?x dbo:nationality ?uri . }


For which label did Elvis record his first album? 
[u'For', u'which', u'label', u'did', u'Elvis', u'record', u'his', u'first', u'album', u'?']
PhraseIndex(For,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Label,3,3)
PhraseIndex(Did,4,4)
PhraseIndex(Elvis,5,5)
PhraseIndex(Record,6,6)
PhraseIndex(His,7,7)
PhraseIndex(First,8,8)
PhraseIndex(Album,9,9)
PhrasePosTag(For,IN)
PhrasePosTag(which,WDT)
PhrasePosTag(label,NN)
PhrasePosTag(did,VBD)
PhrasePosTag(Elvis,NNP)
PhrasePosTag(record,VB)
PhrasePosTag(his,PRP$)
PhrasePosTag(first,JJ)
PhrasePosTag(album,NN)
phraseDepTag(album,record,root)
phraseDepTag(label,For,case)
phraseDepTag(label,which,det)
phraseDepTag(record,label,nmod:for)
phraseDepTag(record,did,aux)
phraseDepTag(record,Elvis,nsubj)
phraseDepTag(record,album,dobj)
phraseDepTag(album,his,nmod:poss)
phraseDepTag(album,first,amod)
[(SparqlVar('x'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Album')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'artist'), ('http://dbpedia.org/resource/', 'Elvis_Presley')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'releaseDate'), SparqlVar('y')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'recordLabel'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album . ?x dbo:artist res:Elvis_Presley . ?x dbo:releaseDate ?y . ?x dbo:recordLabel ?uri . } ORDER BY ASC(?y) OFFSET 0 LIMIT 1


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Birthdays,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(All,6,6)
PhraseIndex(Actors,7,7)
PhraseIndex(Of,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Television,10,10)
PhraseIndex(Show,11,11)
PhraseIndex(Charmed,12,12)

[u'Give', u'me', u'the', u'birthdays', u'of', u'all', u'actors', u'of', u'the', u'television', u'show', u'Charmed']
Give me the birthdays of all actors of the television show Charmed.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(the,DT)
PhrasePosTag(birthdays,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(all,DT)
PhrasePosTag(actors,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(television,NN)
PhrasePosTag(show,NN)
PhrasePosTag(Charmed,NNP)
phraseDepTag(Charmed,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,birthdays,dobj)
phraseDepTag(birthdays,the,det)
phraseDepTag(birthdays,actors,nmod:of)
phraseDepTag(actors,of,case)
phraseDepTag(actors,all,det)
phraseDepTag(actors,Charmed,nmod:of)
phraseDepTag(Charmed,of,case)
phraseDepTag(Charmed,the,det)
phraseDepTag(Charmed,television,compound)
phraseDepTag(Charmed,show,compound)
[(('http://dbpedia.org/resource/', 'Charmed'), ('http://dbpedia.org/ontology/', 'starring'), SparqlVar('actor')), (SparqlVar('actor'), ('http://dbpedia.org/ontology/', 'birthDate'), SparqlVar('date'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Charmed dbo:starring ?actor . ?actor dbo:birthDate ?date . }


How many employees does IBM have? 
[u'How', u'many', u'employees', u'does', u'IBM', u'have', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Employees,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(Ibm,5,5)
PhraseIndex(Have,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(many,JJ)
PhrasePosTag(employees,NNS)
PhrasePosTag(does,VBZ)
PhrasePosTag(IBM,NNP)
PhrasePosTag(have,VB)
phraseDepTag(have,have,root)
phraseDepTag(many,How,advmod)
phraseDepTag(employees,many,amod)
phraseDepTag(have,employees,dobj)
phraseDepTag(have,does,aux)
phraseDepTag(have,IBM,nsubj)
[(('http://dbpedia.org/resource/', 'IBM'), ('http://dbpedia.org/ontology/', 'numberOfEmployees'), SparqlVar('number'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?number WHERE { res:IBM dbo:numberOfEmployees ?number . }


Which states border Illinois? 
[u'Which', u'states', u'border', u'Illinois', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(States,2,2)
PhraseIndex(Border,3,3)
PhraseIndex(Illinois,4,4)
PhrasePosTag(Which,WDT)
PhrasePosTag(states,NNS)
PhrasePosTag(border,VBP)
PhrasePosTag(Illinois,NNP)
phraseDepTag(Illinois,border,root)
phraseDepTag(states,Which,det)
phraseDepTag(border,states,nsubj)
phraseDepTag(border,Illinois,dobj)
[(('http://dbpedia.org/resource/', 'Illinois'), ('http://dbpedia.org/property/', 'borderingstates'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Illinois dbp:borderingstates ?uri . }


In which country is the Limerick Lake? 
[u'In', u'which', u'country', u'is', u'the', u'Limerick', u'Lake', u'?']
PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Country,3,3)
PhraseIndex(Is,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Limerick,6,6)
PhraseIndex(Lake,7,7)
PhrasePosTag(In,IN)
PhrasePosTag(which,WDT)
PhrasePosTag(country,NN)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(Limerick,NNP)
PhrasePosTag(Lake,NNP)
phraseDepTag(Lake,is,root)
phraseDepTag(country,In,case)
phraseDepTag(country,which,det)
phraseDepTag(is,country,nmod:in)
phraseDepTag(is,Lake,nsubj)
phraseDepTag(Lake,the,det)
phraseDepTag(Lake,Limerick,compound)
[(('http://dbpedia.org/resource/', 'Limerick_Lake'), ('http://dbpedia.org/ontology/', 'country'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(Television,2,2)
PhraseIndex(Shows,3,3)
PhraseIndex(Were,4,4)
PhraseIndex(Created,5,5)
PhraseIndex(By,6,6)
PhraseIndex(Walt,7,7)
PhraseIndex(Disney,8,8)

[u'Which', u'television', u'shows', u'were', u'created', u'by', u'Walt', u'Disney']
Which television shows were created by Walt Disney?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(television,NN)
PhrasePosTag(shows,NNS)
PhrasePosTag(were,VBD)
PhrasePosTag(created,VBN)
PhrasePosTag(by,IN)
PhrasePosTag(Walt,NNP)
PhrasePosTag(Disney,NNP)
phraseDepTag(Disney,created,root)
phraseDepTag(television,Which,det)
phraseDepTag(television,shows,dep)
phraseDepTag(created,television,nsubjpass)
phraseDepTag(created,were,auxpass)
phraseDepTag(created,Disney,nmod:agent)
phraseDepTag(Disney,by,case)
phraseDepTag(Disney,Walt,compound)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'TelevisionShow')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'creator'), ('http://dbpedia.org/resource/', 'Walt_Disney'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow . ?uri dbo:creator res:Walt_Disney . }


Which mountain is the highest after the Annapurna? 
[u'Which', u'mountain', u'is', u'the', u'highest', u'after', u'the', u'Annapurna', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Mountain,2,2)
PhraseIndex(Is,3,3)
PhraseIndex(The,4,4)
PhraseIndex(Highest,5,5)
PhraseIndex(After,6,6)
PhraseIndex(The,7,7)
PhraseIndex(Annapurna,8,8)
PhrasePosTag(Which,WDT)
PhrasePosTag(mountain,NN)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(highest,JJS)
PhrasePosTag(after,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Annapurna,NNP)
phraseDepTag(Annapurna,is,root)
phraseDepTag(mountain,Which,det)
phraseDepTag(is,mountain,dep)
phraseDepTag(is,highest,nsubj)
phraseDepTag(highest,the,det)
phraseDepTag(highest,Annapurna,nmod:after)
phraseDepTag(Annapurna,after,case)
phraseDepTag(Annapurna,the,det)
[(('http://dbpedia.org/resource/', 'Annapurna'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('otherelevation')), (('http://dbpedia.org/resource/', 'Annapurna'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('otherelevation'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Annapurna dbo:elevation ?elevation . ?uri rdf:type dbo:Mountain . ?uri dbo:elevation ?otherelevation . FILTER (?otherelevation < ?elevation) . } ORDER BY DESC(?otherelevation) OFFSET 0 LIMIT 1


PhraseIndex(In,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Films,3,3)
PhraseIndex(Directed,4,4)
PhraseIndex(By,5,5)
PhraseIndex(Garry,6,6)
PhraseIndex(Marshall,7,7)
PhraseIndex(Was,8,8)
PhraseIndex(Julia,9,9)
PhraseIndex(Roberts,10,10)
PhraseIndex(Starring,11,11)

[u'In', u'which', u'films', u'directed', u'by', u'Garry', u'Marshall', u'was', u'Julia', u'Roberts', u'starring']
In which films directed by Garry Marshall was Julia Roberts starring?
	 La ligne est isolée 
PhrasePosTag(In,IN)
PhrasePosTag(which,WDT)
PhrasePosTag(films,NNS)
PhrasePosTag(directed,VBN)
PhrasePosTag(by,IN)
PhrasePosTag(Garry,NNP)
PhrasePosTag(Marshall,NNP)
PhrasePosTag(was,VBD)
PhrasePosTag(Julia,NNP)
PhrasePosTag(Roberts,NNP)
PhrasePosTag(starring,VBG)
phraseDepTag(starring,directed,root)
phraseDepTag(films,In,case)
phraseDepTag(films,which,det)
phraseDepTag(directed,films,nmod:in)
phraseDepTag(directed,Marshall,nmod:by)
phraseDepTag(Marshall,by,case)
phraseDepTag(Marshall,Garry,compound)
phraseDepTag(Marshall,Roberts,acl:relcl)
phraseDepTag(Roberts,was,cop)
phraseDepTag(Roberts,Julia,compound)
phraseDepTag(Roberts,starring,acl)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Julia_Roberts')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Garry_Marshall'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:starring res:Julia_Roberts . ?uri dbo:director res:Garry_Marshall . }


PhraseIndex(Which,1,1)
PhraseIndex(Bridges,2,2)
PhraseIndex(Are,3,3)
PhraseIndex(Of,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Same,6,6)
PhraseIndex(Type,7,7)
PhraseIndex(As,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Manhattan,10,10)
PhraseIndex(Bridge,11,11)

[u'Which', u'bridges', u'are', u'of', u'the', u'same', u'type', u'as', u'the', u'Manhattan', u'Bridge']
Which bridges are of the same type as the Manhattan Bridge?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(bridges,NNS)
PhrasePosTag(are,VBP)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(same,JJ)
PhrasePosTag(type,NN)
PhrasePosTag(as,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Manhattan,NNP)
PhrasePosTag(Bridge,NNP)
phraseDepTag(Bridge,are,root)
phraseDepTag(bridges,Which,det)
phraseDepTag(are,bridges,nsubj)
phraseDepTag(are,type,nmod:of)
phraseDepTag(type,of,case)
phraseDepTag(type,the,det)
phraseDepTag(type,same,amod)
phraseDepTag(type,Bridge,nmod:as)
phraseDepTag(Bridge,as,case)
phraseDepTag(Bridge,the,det)
phraseDepTag(Bridge,Manhattan,compound)
[(('http://dbpedia.org/resource/', 'Andrew_Jackson'), ('http://dbpedia.org/ontology/', 'battle'), SparqlVar('battle'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Andrew_Jackson dbo:battle ?battle . }


Give me all communist countries. 
[u'Give', u'me', u'all', u'communist', u'countries', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Communist,4,4)
PhraseIndex(Countries,5,5)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(communist,JJ)
PhrasePosTag(countries,NNS)
phraseDepTag(countries,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,countries,dobj)
phraseDepTag(countries,all,det)
phraseDepTag(countries,communist,amod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country . { ?uri dbo:governmentType res:Communism . } UNION { ?uri dbo:governmentType res:Communist_state . } }


Which awards did WikiLeaks win? 
[u'Which', u'awards', u'did', u'WikiLeaks', u'win', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Awards,2,2)
PhraseIndex(Did,3,3)
PhraseIndex(Wikileaks,4,4)
PhraseIndex(Win,5,5)
PhrasePosTag(Which,WDT)
PhrasePosTag(awards,NNS)
PhrasePosTag(did,VBD)
PhrasePosTag(WikiLeaks,NNP)
PhrasePosTag(win,VB)
phraseDepTag(win,win,root)
phraseDepTag(awards,Which,det)
phraseDepTag(win,awards,dobj)
phraseDepTag(win,did,aux)
phraseDepTag(win,WikiLeaks,nsubj)
[(('http://dbpedia.org/resource/', 'WikiLeaks'), ('http://dbpedia.org/property/', 'awards'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:WikiLeaks dbp:awards ?uri . }


Who is the daughter of Ingrid Bergman married to? 
[u'Who', u'is', u'the', u'daughter', u'of', u'Ingrid', u'Bergman', u'married', u'to', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Daughter,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Ingrid,6,6)
PhraseIndex(Bergman,7,7)
PhraseIndex(Married,8,8)
PhraseIndex(To,9,9)
PhrasePosTag(Who,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(daughter,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Ingrid,NNP)
PhrasePosTag(Bergman,NNP)
PhrasePosTag(married,VBN)
PhrasePosTag(to,TO)
phraseDepTag(to,married,root)
phraseDepTag(daughter,the,det)
phraseDepTag(daughter,Bergman,nmod:of)
phraseDepTag(Bergman,of,case)
phraseDepTag(Bergman,Ingrid,compound)
phraseDepTag(married,Who,dep)
phraseDepTag(married,is,auxpass)
phraseDepTag(married,daughter,nsubjpass)
phraseDepTag(married,to,xcomp)
[(('http://dbpedia.org/resource/', 'Ingrid_Bergman'), ('http://dbpedia.org/ontology/', 'child'), SparqlVar('child')), (SparqlVar('child'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child dbo:spouse ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(U.S.,2,2)
PhraseIndex(State,3,3)
PhraseIndex(Has,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Highest,6,6)
PhraseIndex(Population,7,7)
PhraseIndex(Density,8,8)

[u'Which', u'U.S.', u'state', u'has', u'the', u'highest', u'population', u'density']
Which U.S. state has the highest population density?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(state,NN)
PhrasePosTag(has,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(highest,JJS)
PhrasePosTag(population,NN)
PhrasePosTag(density,NN)
phraseDepTag(density,has,root)
phraseDepTag(state,Which,det)
phraseDepTag(state,U.S.,compound)
phraseDepTag(has,state,nsubj)
phraseDepTag(has,density,dobj)
phraseDepTag(density,the,det)
phraseDepTag(density,highest,amod)
phraseDepTag(density,population,compound)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'densityrank'), SparqlVar('rank'))]
PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:densityrank ?rank . } ORDER BY ASC(?rank) OFFSET 0 LIMIT 1


What is the currency of the Czech Republic? 
[u'What', u'is', u'the', u'currency', u'of', u'the', u'Czech', u'Republic', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Currency,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Czech,7,7)
PhraseIndex(Republic,8,8)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(currency,NN)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(Czech,NNP)
PhrasePosTag(Republic,NNP)
phraseDepTag(Republic,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,currency,nsubj)
phraseDepTag(currency,the,det)
phraseDepTag(currency,Republic,nmod:of)
phraseDepTag(Republic,of,case)
phraseDepTag(Republic,the,det)
phraseDepTag(Republic,Czech,compound)
[(('http://dbpedia.org/resource/', 'Czech_Republic'), ('http://dbpedia.org/ontology/', 'currency'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri . }


Which countries adopted the Euro? 
[u'Which', u'countries', u'adopted', u'the', u'Euro', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Countries,2,2)
PhraseIndex(Adopted,3,3)
PhraseIndex(The,4,4)
PhraseIndex(Euro,5,5)
PhrasePosTag(Which,WDT)
PhrasePosTag(countries,NNS)
PhrasePosTag(adopted,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(Euro,NNP)
phraseDepTag(Euro,adopted,root)
phraseDepTag(countries,Which,det)
phraseDepTag(adopted,countries,nsubj)
phraseDepTag(adopted,Euro,dobj)
phraseDepTag(Euro,the,det)
[(('http://dbpedia.org/resource/', 'Berlin'), ('http://dbpedia.org/ontology/', 'areaCode'), SparqlVar('string'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Berlin dbo:areaCode ?string . }


PhraseIndex(Which,1,1)
PhraseIndex(Countries,2,2)
PhraseIndex(Have,3,3)
PhraseIndex(More,4,4)
PhraseIndex(Than,5,5)
PhraseIndex(Two,6,6)
PhraseIndex(Official,7,7)
PhraseIndex(Languages,8,8)

[u'Which', u'countries', u'have', u'more', u'than', u'two', u'official', u'languages']
Which countries have more than two official languages?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(countries,NNS)
PhrasePosTag(have,VBP)
PhrasePosTag(more,JJR)
PhrasePosTag(than,IN)
PhrasePosTag(two,CD)
PhrasePosTag(official,JJ)
PhrasePosTag(languages,NNS)
phraseDepTag(languages,have,root)
phraseDepTag(countries,Which,det)
phraseDepTag(have,countries,nsubj)
phraseDepTag(have,languages,dobj)
phraseDepTag(more,than,mwe)
phraseDepTag(two,more,advmod)
phraseDepTag(languages,two,nummod)
phraseDepTag(languages,official,amod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'officialLanguage'), SparqlVar('language'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country . ?uri dbo:officialLanguage ?language . } GROUP BY ?uri HAVING (COUNT(?language) > 2)


Who is the owner of Universal Studios? 
[u'Who', u'is', u'the', u'owner', u'of', u'Universal', u'Studios', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Owner,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Universal,6,6)
PhraseIndex(Studios,7,7)
PhrasePosTag(Who,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(owner,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Universal,NNP)
PhrasePosTag(Studios,NNP)
phraseDepTag(Studios,Who,root)
phraseDepTag(Who,is,cop)
phraseDepTag(Who,owner,nsubj)
phraseDepTag(owner,the,det)
phraseDepTag(owner,Studios,nmod:of)
phraseDepTag(Studios,of,case)
phraseDepTag(Studios,Universal,compound)
[(('http://dbpedia.org/resource/', 'Universal_Studios'), ('http://dbpedia.org/ontology/', 'owner'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri . }


PhraseIndex(Through,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Countries,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Yenisei,6,6)
PhraseIndex(River,7,7)
PhraseIndex(Flow,8,8)

[u'Through', u'which', u'countries', u'does', u'the', u'Yenisei', u'river', u'flow']
Through which countries does the Yenisei river flow?
	 La ligne est isolée 
PhrasePosTag(Through,IN)
PhrasePosTag(which,WDT)
PhrasePosTag(countries,NNS)
PhrasePosTag(does,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(Yenisei,NNP)
PhrasePosTag(river,NN)
PhrasePosTag(flow,NN)
phraseDepTag(flow,does,root)
phraseDepTag(which,Through,case)
phraseDepTag(does,which,nmod:through)
phraseDepTag(does,countries,nsubj)
phraseDepTag(does,flow,dobj)
phraseDepTag(flow,the,det)
phraseDepTag(flow,Yenisei,compound)
phraseDepTag(flow,river,compound)
[(('http://dbpedia.org/resource/', 'Yenisei_River'), ('http://dbpedia.org/ontology/', 'country'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Yenisei_River dbo:country ?uri . }


When did Latvia join the EU? 
[u'When', u'did', u'Latvia', u'join', u'the', u'EU', u'?']
PhraseIndex(When,1,1)
PhraseIndex(Did,2,2)
PhraseIndex(Latvia,3,3)
PhraseIndex(Join,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Eu,6,6)
PhrasePosTag(When,WRB)
PhrasePosTag(did,VBD)
PhrasePosTag(Latvia,NNP)
PhrasePosTag(join,VB)
PhrasePosTag(the,DT)
PhrasePosTag(EU,NNP)
phraseDepTag(EU,join,root)
phraseDepTag(join,When,advmod)
phraseDepTag(join,did,aux)
phraseDepTag(join,Latvia,nsubj)
phraseDepTag(join,EU,dobj)
phraseDepTag(EU,the,det)
[(('http://dbpedia.org/resource/', 'Latvia'), ('http://dbpedia.org/property/', 'accessioneudate'), SparqlVar('date'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?date WHERE { res:Latvia dbp:accessioneudate ?date . }


Which monarchs were married to a German? 
[u'Which', u'monarchs', u'were', u'married', u'to', u'a', u'German', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Monarchs,2,2)
PhraseIndex(Were,3,3)
PhraseIndex(Married,4,4)
PhraseIndex(To,5,5)
PhraseIndex(A,6,6)
PhraseIndex(German,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(monarchs,NNS)
PhrasePosTag(were,VBD)
PhrasePosTag(married,VBN)
PhrasePosTag(to,TO)
PhrasePosTag(a,DT)
PhrasePosTag(German,JJ)
phraseDepTag(German,married,root)
phraseDepTag(monarchs,Which,det)
phraseDepTag(married,monarchs,nsubjpass)
phraseDepTag(married,were,auxpass)
phraseDepTag(married,German,nmod:to)
phraseDepTag(German,to,case)
phraseDepTag(German,a,det)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Monarch')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('spouse')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Monarch')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('spouse'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch . ?uri dbo:spouse ?spouse . { ?spouse dbo:birthPlace res:Germany. } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany. } }


When was the Battle of Gettysburg? 
[u'When', u'was', u'the', u'Battle', u'of', u'Gettysburg', u'?']
PhraseIndex(When,1,1)
PhraseIndex(Was,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Battle,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Gettysburg,6,6)
PhrasePosTag(When,WRB)
PhrasePosTag(was,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(Battle,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Gettysburg,NNP)
phraseDepTag(Gettysburg,was,root)
phraseDepTag(was,When,advmod)
phraseDepTag(was,Battle,nsubj)
phraseDepTag(Battle,the,det)
phraseDepTag(Battle,Gettysburg,nmod:of)
phraseDepTag(Gettysburg,of,case)
[(('http://dbpedia.org/resource/', 'Battle_of_Gettysburg'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('date'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Battle_of_Gettysburg dbo:date ?date . }


Which river does the Brooklyn Bridge cross? 
[u'Which', u'river', u'does', u'the', u'Brooklyn', u'Bridge', u'cross', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(River,2,2)
PhraseIndex(Does,3,3)
PhraseIndex(The,4,4)
PhraseIndex(Brooklyn,5,5)
PhraseIndex(Bridge,6,6)
PhraseIndex(Cross,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(river,NN)
PhrasePosTag(does,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(Brooklyn,NNP)
PhrasePosTag(Bridge,NNP)
PhrasePosTag(cross,VB)
phraseDepTag(cross,cross,root)
phraseDepTag(river,Which,det)
phraseDepTag(Bridge,the,det)
phraseDepTag(Bridge,Brooklyn,compound)
phraseDepTag(cross,river,dobj)
phraseDepTag(cross,does,aux)
phraseDepTag(cross,Bridge,nsubj)
[(('http://dbpedia.org/resource/', 'Brooklyn_Bridge'), ('http://dbpedia.org/ontology/', 'crosses'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri . }


What is the highest mountain in Australia? 
[u'What', u'is', u'the', u'highest', u'mountain', u'in', u'Australia', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Highest,4,4)
PhraseIndex(Mountain,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Australia,7,7)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(highest,JJS)
PhrasePosTag(mountain,NN)
PhrasePosTag(in,IN)
PhrasePosTag(Australia,NNP)
phraseDepTag(Australia,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,mountain,nsubj)
phraseDepTag(mountain,the,det)
phraseDepTag(mountain,highest,amod)
phraseDepTag(mountain,Australia,nmod:in)
phraseDepTag(Australia,in,case)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'locatedInArea'), ('http://dbpedia.org/resource/', 'Australia')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain . ?uri dbo:locatedInArea res:Australia . ?uri dbo:elevation ?elevation . } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1


Give me all soccer clubs in Spain. 
[u'Give', u'me', u'all', u'soccer', u'clubs', u'in', u'Spain', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Soccer,4,4)
PhraseIndex(Clubs,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Spain,7,7)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(soccer,NN)
PhrasePosTag(clubs,NNS)
PhrasePosTag(in,IN)
PhrasePosTag(Spain,NNP)
phraseDepTag(Spain,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,clubs,dobj)
phraseDepTag(clubs,all,det)
phraseDepTag(clubs,soccer,compound)
phraseDepTag(clubs,Spain,nmod:in)
phraseDepTag(Spain,in,case)
[(('http://dbpedia.org/resource/', 'Suriname'), ('http://dbpedia.org/ontology/', 'officialLanguage'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Suriname dbo:officialLanguage ?uri . }


Who is the mayor of Tel Aviv? 
[u'Who', u'is', u'the', u'mayor', u'of', u'Tel', u'Aviv', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Mayor,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Tel,6,6)
PhraseIndex(Aviv,7,7)
PhrasePosTag(Who,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(mayor,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Tel,NNP)
PhrasePosTag(Aviv,NNP)
phraseDepTag(Aviv,Who,root)
phraseDepTag(Who,is,cop)
phraseDepTag(Who,mayor,nsubj)
phraseDepTag(mayor,the,det)
phraseDepTag(mayor,Aviv,nmod:of)
phraseDepTag(Aviv,of,case)
phraseDepTag(Aviv,Tel,compound)
[(('http://dbpedia.org/resource/', 'Tel_Aviv'), ('http://dbpedia.org/ontology/', 'leaderName'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Tel_Aviv dbo:leaderName ?uri . }


Who designed the Brooklyn Bridge? 
[u'Who', u'designed', u'the', u'Brooklyn', u'Bridge', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Designed,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Brooklyn,4,4)
PhraseIndex(Bridge,5,5)
PhrasePosTag(Who,WP)
PhrasePosTag(designed,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(Brooklyn,NNP)
PhrasePosTag(Bridge,NNP)
phraseDepTag(Bridge,designed,root)
phraseDepTag(designed,Who,nsubj)
phraseDepTag(designed,Bridge,dobj)
phraseDepTag(Bridge,the,det)
phraseDepTag(Bridge,Brooklyn,compound)
[(('http://dbpedia.org/resource/', 'Brooklyn_Bridge'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbp:designer ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(Telecommunications,2,2)
PhraseIndex(Organizations,3,3)
PhraseIndex(Are,4,4)
PhraseIndex(Located,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Belgium,7,7)

[u'Which', u'telecommunications', u'organizations', u'are', u'located', u'in', u'Belgium']
Which telecommunications organizations are located in Belgium?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(telecommunications,NNS)
PhrasePosTag(organizations,NNS)
PhrasePosTag(are,VBP)
PhrasePosTag(located,JJ)
PhrasePosTag(in,IN)
PhrasePosTag(Belgium,NNP)
phraseDepTag(Belgium,located,root)
phraseDepTag(telecommunications,Which,det)
phraseDepTag(telecommunications,organizations,dep)
phraseDepTag(located,telecommunications,nsubj)
phraseDepTag(located,are,cop)
phraseDepTag(located,Belgium,nmod:in)
phraseDepTag(Belgium,in,case)
[(('http://dbpedia.org/resource/', 'Ural_Mountains'), ('http://dbpedia.org/ontology/', 'highestPlace'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ural_Mountains dbo:highestPlace ?uri . }


Who is the editor of Forbes? 
[u'Who', u'is', u'the', u'editor', u'of', u'Forbes', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Editor,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Forbes,6,6)
PhrasePosTag(Who,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(editor,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Forbes,NNP)
phraseDepTag(Forbes,Who,root)
phraseDepTag(Who,is,cop)
phraseDepTag(Who,editor,nsubj)
phraseDepTag(editor,the,det)
phraseDepTag(editor,Forbes,nmod:of)
phraseDepTag(Forbes,of,case)
[(('http://dbpedia.org/resource/', 'Forbes'), ('http://dbpedia.org/ontology/', 'editor'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Forbes dbo:editor ?uri . }


Give me all companies in the advertising industry. 
[u'Give', u'me', u'all', u'companies', u'in', u'the', u'advertising', u'industry', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Companies,4,4)
PhraseIndex(In,5,5)
PhraseIndex(The,6,6)
PhraseIndex(Advertising,7,7)
PhraseIndex(Industry,8,8)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(companies,NNS)
PhrasePosTag(in,IN)
PhrasePosTag(the,DT)
PhrasePosTag(advertising,NN)
PhrasePosTag(industry,NN)
phraseDepTag(industry,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,companies,dobj)
phraseDepTag(companies,all,det)
phraseDepTag(companies,industry,nmod:in)
phraseDepTag(industry,in,case)
phraseDepTag(industry,the,det)
phraseDepTag(industry,advertising,compound)
[(('http://dbpedia.org/resource/', 'Bruce_Carver'), ('http://dbpedia.org/ontology/', 'deathCause'), SparqlVar('uri'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Bruce_Carver dbo:deathCause ?uri . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Libraries,4,4)
PhraseIndex(Established,5,5)
PhraseIndex(Earlier,6,6)
PhraseIndex(Than,7,7)
PhraseIndex(1400,8,8)

[u'Give', u'me', u'all', u'libraries', u'established', u'earlier', u'than', u'1400']
Give me all libraries established earlier than 1400.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(libraries,NNS)
PhrasePosTag(established,VBN)
PhrasePosTag(earlier,JJR)
PhrasePosTag(than,IN)
PhrasePosTag(1400,CD)
phraseDepTag(1400,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,libraries,dobj)
phraseDepTag(libraries,all,det)
phraseDepTag(libraries,established,acl)
phraseDepTag(established,earlier,advmod)
phraseDepTag(established,1400,nmod:than)
phraseDepTag(1400,than,case)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Library')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'established'), SparqlVar('year')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Library')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'established'), SparqlVar('year'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Library . ?uri dbp:established ?year . FILTER (?year < 1400) }


Which presidents were born in 1945? 
[u'Which', u'presidents', u'were', u'born', u'in', u'1945', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Presidents,2,2)
PhraseIndex(Were,3,3)
PhraseIndex(Born,4,4)
PhraseIndex(In,5,5)
PhraseIndex(1945,6,6)
PhrasePosTag(Which,WDT)
PhrasePosTag(presidents,NNS)
PhrasePosTag(were,VBD)
PhrasePosTag(born,VBN)
PhrasePosTag(in,IN)
PhrasePosTag(1945,CD)
phraseDepTag(1945,born,root)
phraseDepTag(presidents,Which,det)
phraseDepTag(born,presidents,nsubjpass)
phraseDepTag(born,were,auxpass)
phraseDepTag(born,1945,nmod:in)
phraseDepTag(1945,in,case)
[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'office'), ('http://dbpedia.org/resource/', 'Chancellor_of_Germany'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbp:office res:Chancellor_of_Germany . }


Who was the wife of U.S. president Lincoln? 
[u'Who', u'was', u'the', u'wife', u'of', u'U.S.', u'president', u'Lincoln', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Was,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Wife,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(U.S.,6,6)
PhraseIndex(President,7,7)
PhraseIndex(Lincoln,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(was,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(wife,NN)
PhrasePosTag(of,IN)
PhrasePosTag(U.S.,NNP)
PhrasePosTag(president,NN)
PhrasePosTag(Lincoln,NNP)
phraseDepTag(Lincoln,Who,root)
phraseDepTag(Who,was,cop)
phraseDepTag(Who,wife,nsubj)
phraseDepTag(wife,the,det)
phraseDepTag(wife,Lincoln,nmod:of)
phraseDepTag(Lincoln,of,case)
phraseDepTag(Lincoln,U.S.,compound)
phraseDepTag(Lincoln,president,compound)
[(('http://dbpedia.org/resource/', 'Abraham_Lincoln'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:spouse ?uri. }


Who developed the video game World of Warcraft? 
[u'Who', u'developed', u'the', u'video', u'game', u'World', u'of', u'Warcraft', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Developed,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Video,4,4)
PhraseIndex(Game,5,5)
PhraseIndex(World,6,6)
PhraseIndex(Of,7,7)
PhraseIndex(Warcraft,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(developed,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(video,NN)
PhrasePosTag(game,NN)
PhrasePosTag(World,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Warcraft,NNP)
phraseDepTag(Warcraft,developed,root)
phraseDepTag(developed,Who,nsubj)
phraseDepTag(developed,World,dobj)
phraseDepTag(World,the,det)
phraseDepTag(World,video,compound)
phraseDepTag(World,game,compound)
phraseDepTag(World,Warcraft,nmod:of)
phraseDepTag(Warcraft,of,case)
[(('http://dbpedia.org/resource/', 'World_of_Warcraft'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri . }


What is the official website of Tom Cruise? 
[u'What', u'is', u'the', u'official', u'website', u'of', u'Tom', u'Cruise', u'?']
PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Official,4,4)
PhraseIndex(Website,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Tom,7,7)
PhraseIndex(Cruise,8,8)
PhrasePosTag(What,WP)
PhrasePosTag(is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(official,JJ)
PhrasePosTag(website,NN)
PhrasePosTag(of,IN)
PhrasePosTag(Tom,NNP)
PhrasePosTag(Cruise,NNP)
phraseDepTag(Cruise,What,root)
phraseDepTag(What,is,cop)
phraseDepTag(What,website,nsubj)
phraseDepTag(website,the,det)
phraseDepTag(website,official,amod)
phraseDepTag(website,Cruise,nmod:of)
phraseDepTag(Cruise,of,case)
phraseDepTag(Cruise,Tom,compound)
[(('http://dbpedia.org/resource/', 'Tom_Cruise'), ('http://dbpedia.org/property/', 'website'), SparqlVar('string'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Tom_Cruise dbp:website ?string . }


PhraseIndex(List,1,1)
PhraseIndex(All,2,2)
PhraseIndex(Episodes,3,3)
PhraseIndex(Of,4,4)
PhraseIndex(The,5,5)
PhraseIndex(First,6,6)
PhraseIndex(Season,7,7)
PhraseIndex(Of,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Hbo,10,10)
PhraseIndex(Television,11,11)
PhraseIndex(Series,12,12)
PhraseIndex(The,13,13)
PhraseIndex(Sopranos,14,14)

[u'List', u'all', u'episodes', u'of', u'the', u'first', u'season', u'of', u'the', u'HBO', u'television', u'series', u'The', u'Sopranos']
List all episodes of the first season of the HBO television series The Sopranos.
	 La ligne est isolée 
PhrasePosTag(List,VB)
PhrasePosTag(all,DT)
PhrasePosTag(episodes,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(first,JJ)
PhrasePosTag(season,NN)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(HBO,NNP)
PhrasePosTag(television,NN)
PhrasePosTag(series,NN)
PhrasePosTag(The,DT)
PhrasePosTag(Sopranos,NNPS)
phraseDepTag(Sopranos,List,root)
phraseDepTag(List,Sopranos,xcomp)
phraseDepTag(episodes,all,det)
phraseDepTag(episodes,season,nmod:of)
phraseDepTag(season,of,case)
phraseDepTag(season,the,det)
phraseDepTag(season,first,amod)
phraseDepTag(season,series,nmod:of)
phraseDepTag(series,of,case)
phraseDepTag(series,the,det)
phraseDepTag(series,HBO,compound)
phraseDepTag(series,television,compound)
phraseDepTag(Sopranos,episodes,nsubj)
phraseDepTag(Sopranos,The,det)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'series'), ('http://dbpedia.org/resource/', 'The_Sopranos')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'seasonNumber'), '1')]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos . ?uri dbo:seasonNumber 1 . }


Who produced the most films? 
[u'Who', u'produced', u'the', u'most', u'films', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Produced,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Most,4,4)
PhraseIndex(Films,5,5)
PhrasePosTag(Who,WP)
PhrasePosTag(produced,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(most,RBS)
PhrasePosTag(films,NNS)
phraseDepTag(films,produced,root)
phraseDepTag(produced,Who,nsubj)
phraseDepTag(produced,most,advmod)
phraseDepTag(produced,films,dobj)
phraseDepTag(most,the,det)
[(('http://dbpedia.org/resource/', 'John_F._Kennedy'), ('http://dbpedia.org/ontology/', 'deathPlace'), SparqlVar('uri')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:deathPlace ?uri . ?uri rdf:type dbo:City . }


Is there a video game called Battle Chess? 
[u'Is', u'there', u'a', u'video', u'game', u'called', u'Battle', u'Chess', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(There,2,2)
PhraseIndex(A,3,3)
PhraseIndex(Video,4,4)
PhraseIndex(Game,5,5)
PhraseIndex(Called,6,6)
PhraseIndex(Battle,7,7)
PhraseIndex(Chess,8,8)
PhrasePosTag(Is,VBZ)
PhrasePosTag(there,EX)
PhrasePosTag(a,DT)
PhrasePosTag(video,NN)
PhrasePosTag(game,NN)
PhrasePosTag(called,VBN)
PhrasePosTag(Battle,NNP)
PhrasePosTag(Chess,NNP)
phraseDepTag(Chess,Is,root)
phraseDepTag(Is,there,expl)
phraseDepTag(Is,game,nsubj)
phraseDepTag(game,a,det)
phraseDepTag(game,video,compound)
phraseDepTag(game,called,acl)
phraseDepTag(called,Chess,dobj)
phraseDepTag(Chess,Battle,compound)
[(('http://dbpedia.org/resource/', 'Nanga_Parbat'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (('http://dbpedia.org/resource/', 'Nanga_Parbat'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (('http://dbpedia.org/resource/', 'Nanga_Parbat'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Nanga_Parbat dbo:elevation ?elevation . ?uri rdf:type dbo:Mountain . { ?uri dbo:elevation ?otherelevation . } UNION { ?uri dbp:elevationM ?otherelevation . } FILTER (?otherelevation > ?elevation) . }


Who created Wikipedia? 
[u'Who', u'created', u'Wikipedia', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Created,2,2)
PhraseIndex(Wikipedia,3,3)
PhrasePosTag(Who,WP)
PhrasePosTag(created,VBD)
PhrasePosTag(Wikipedia,NNP)
phraseDepTag(Wikipedia,created,root)
phraseDepTag(created,Who,nsubj)
phraseDepTag(created,Wikipedia,dobj)
[(('http://dbpedia.org/resource/', 'Wikipedia'), ('http://dbpedia.org/ontology/', 'author'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Wikipedia dbo:author ?uri . }


Give me all actors starring in Last Action Hero. 
[u'Give', u'me', u'all', u'actors', u'starring', u'in', u'Last', u'Action', u'Hero', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Actors,4,4)
PhraseIndex(Starring,5,5)
PhraseIndex(In,6,6)
PhraseIndex(Last,7,7)
PhraseIndex(Action,8,8)
PhraseIndex(Hero,9,9)
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(actors,NNS)
PhrasePosTag(starring,VBG)
PhrasePosTag(in,IN)
PhrasePosTag(Last,JJ)
PhrasePosTag(Action,NNP)
PhrasePosTag(Hero,NNP)
phraseDepTag(Hero,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,actors,dobj)
phraseDepTag(actors,all,det)
phraseDepTag(actors,starring,acl)
phraseDepTag(starring,Hero,nmod:in)
phraseDepTag(Hero,in,case)
phraseDepTag(Hero,Last,amod)
phraseDepTag(Hero,Action,compound)
[(('http://dbpedia.org/resource/', 'Last_Action_Hero'), ('http://dbpedia.org/ontology/', 'starring'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Last_Action_Hero dbo:starring ?uri . }


PhraseIndex(Which,1,1)
PhraseIndex(Software,2,2)
PhraseIndex(Has,3,3)
PhraseIndex(Been,4,4)
PhraseIndex(Developed,5,5)
PhraseIndex(By,6,6)
PhraseIndex(Organizations,7,7)
PhraseIndex(Founded,8,8)
PhraseIndex(In,9,9)
PhraseIndex(California,10,10)

[u'Which', u'software', u'has', u'been', u'developed', u'by', u'organizations', u'founded', u'in', u'California']
Which software has been developed by organizations founded in California?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(software,NN)
PhrasePosTag(has,VBZ)
PhrasePosTag(been,VBN)
PhrasePosTag(developed,VBN)
PhrasePosTag(by,IN)
PhrasePosTag(organizations,NNS)
PhrasePosTag(founded,VBN)
PhrasePosTag(in,IN)
PhrasePosTag(California,NNP)
phraseDepTag(California,developed,root)
phraseDepTag(software,Which,det)
phraseDepTag(developed,software,nsubjpass)
phraseDepTag(developed,has,aux)
phraseDepTag(developed,been,auxpass)
phraseDepTag(developed,organizations,nmod:agent)
phraseDepTag(organizations,by,case)
phraseDepTag(organizations,founded,acl)
phraseDepTag(founded,California,nmod:in)
phraseDepTag(California,in,case)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Software')), (SparqlVar('company'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('company')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Software')), (SparqlVar('company'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('company'))]
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Software . ?company rdf:type dbo:Company . ?uri dbo:developer ?company . { ?company dbo:foundationPlace res:California . } UNION { ?company dbp:foundation res:California . } }


PhraseIndex(Which,1,1)
PhraseIndex(Companies,2,2)
PhraseIndex(Work,3,3)
PhraseIndex(In,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Aerospace,6,6)
PhraseIndex(Industry,7,7)
PhraseIndex(As,8,8)
PhraseIndex(Well,9,9)
PhraseIndex(As,10,10)
PhraseIndex(In,11,11)
PhraseIndex(Medicine,12,12)

[u'Which', u'companies', u'work', u'in', u'the', u'aerospace', u'industry', u'as', u'well', u'as', u'in', u'medicine']
Which companies work in the aerospace industry as well as in medicine?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(companies,NNS)
PhrasePosTag(work,VBP)
PhrasePosTag(in,IN)
PhrasePosTag(the,DT)
PhrasePosTag(aerospace,NN)
PhrasePosTag(industry,NN)
PhrasePosTag(as,RB)
PhrasePosTag(well,RB)
PhrasePosTag(as,IN)
PhrasePosTag(in,IN)
PhrasePosTag(medicine,NN)
phraseDepTag(medicine,work,root)
phraseDepTag(work,Which,dobj)
phraseDepTag(work,companies,nsubj)
phraseDepTag(work,work,conj:and)
phraseDepTag(work,industry,nmod:in)
phraseDepTag(work,as,cc)
phraseDepTag(work,companies,nsubj)
phraseDepTag(work,medicine,nmod:in)
phraseDepTag(industry,in,case)
phraseDepTag(industry,the,det)
phraseDepTag(industry,aerospace,compound)
phraseDepTag(as,well,mwe)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'industry'), ('http://dbpedia.org/resource/', 'Aerospace')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'industry'), ('http://dbpedia.org/resource/', 'Medicine'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company . ?uri dbo:industry res:Aerospace . ?uri dbo:industry res:Medicine . }


Is Christian Bale starring in Velvet Goldmine? 
[u'Is', u'Christian', u'Bale', u'starring', u'in', u'Velvet', u'Goldmine', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(Christian,2,2)
PhraseIndex(Bale,3,3)
PhraseIndex(Starring,4,4)
PhraseIndex(In,5,5)
PhraseIndex(Velvet,6,6)
PhraseIndex(Goldmine,7,7)
PhrasePosTag(Is,VBZ)
PhrasePosTag(Christian,NNP)
PhrasePosTag(Bale,NNP)
PhrasePosTag(starring,VBG)
PhrasePosTag(in,IN)
PhrasePosTag(Velvet,NNP)
PhrasePosTag(Goldmine,NNP)
phraseDepTag(Goldmine,starring,root)
phraseDepTag(Bale,Christian,compound)
phraseDepTag(starring,Is,aux)
phraseDepTag(starring,Bale,nsubj)
phraseDepTag(starring,Goldmine,nmod:in)
phraseDepTag(Goldmine,in,case)
phraseDepTag(Goldmine,Velvet,compound)
[(('http://dbpedia.org/resource/', 'Velvet_Goldmine'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Christian_Bale'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Velvet_Goldmine dbo:starring res:Christian_Bale . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Websites,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Companies,6,6)
PhraseIndex(With,7,7)
PhraseIndex(More,8,8)
PhraseIndex(Than,9,9)
PhraseIndex(500000,10,10)
PhraseIndex(Employees,11,11)

[u'Give', u'me', u'the', u'websites', u'of', u'companies', u'with', u'more', u'than', u'500000', u'employees']
Give me the websites of companies with more than 500000 employees.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(the,DT)
PhrasePosTag(websites,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(companies,NNS)
PhrasePosTag(with,IN)
PhrasePosTag(more,JJR)
PhrasePosTag(than,IN)
PhrasePosTag(500000,CD)
PhrasePosTag(employees,NNS)
phraseDepTag(employees,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,websites,dobj)
phraseDepTag(websites,the,det)
phraseDepTag(websites,companies,nmod:of)
phraseDepTag(companies,of,case)
phraseDepTag(companies,employees,nmod:with)
phraseDepTag(more,than,mwe)
phraseDepTag(500000,more,advmod)
phraseDepTag(employees,with,case)
phraseDepTag(employees,500000,nummod)
[(SparqlVar('c'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('c'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('c'), ('http://dbpedia.org/property/', 'homepage'), SparqlVar('string'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> SELECT DISTINCT ?string WHERE { ?c rdf:type dbo:Company . { ?c dbo:numberOfEmployees ?employees . } UNION { ?c dbp:numEmployees ?employees . } FILTER( xsd:integer(?employees) > 500000 ) . ?c dbp:homepage ?string . }


Which actors were born in Germany? 
[u'Which', u'actors', u'were', u'born', u'in', u'Germany', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Actors,2,2)
PhraseIndex(Were,3,3)
PhraseIndex(Born,4,4)
PhraseIndex(In,5,5)
PhraseIndex(Germany,6,6)
PhrasePosTag(Which,WDT)
PhrasePosTag(actors,NNS)
PhrasePosTag(were,VBD)
PhrasePosTag(born,VBN)
PhrasePosTag(in,IN)
PhrasePosTag(Germany,NNP)
phraseDepTag(Germany,born,root)
phraseDepTag(actors,Which,det)
phraseDepTag(born,actors,nsubjpass)
phraseDepTag(born,were,auxpass)
phraseDepTag(born,Germany,nmod:in)
phraseDepTag(Germany,in,case)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Actor')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Actor'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Actor . { ?uri dbo:birthPlace res:Germany . } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country res:Germany . } }


Which caves have more than 3 entrances? 
[u'Which', u'caves', u'have', u'more', u'than', u'3', u'entrances', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Caves,2,2)
PhraseIndex(Have,3,3)
PhraseIndex(More,4,4)
PhraseIndex(Than,5,5)
PhraseIndex(3,6,6)
PhraseIndex(Entrances,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(caves,NNS)
PhrasePosTag(have,VBP)
PhrasePosTag(more,JJR)
PhrasePosTag(than,IN)
PhrasePosTag(3,CD)
PhrasePosTag(entrances,NNS)
phraseDepTag(entrances,have,root)
phraseDepTag(caves,Which,det)
phraseDepTag(have,caves,nsubj)
phraseDepTag(have,entrances,dobj)
phraseDepTag(more,than,mwe)
phraseDepTag(3,more,advmod)
phraseDepTag(entrances,3,nummod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'entranceCount'), SparqlVar('entrance')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'entranceCount'), SparqlVar('entrance'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Cave . ?uri dbp:entranceCount ?entrance . FILTER (?entrance > 3) . }


Is the wife of president Obama called Michelle? 
[u'Is', u'the', u'wife', u'of', u'president', u'Obama', u'called', u'Michelle', u'?']
PhraseIndex(Is,1,1)
PhraseIndex(The,2,2)
PhraseIndex(Wife,3,3)
PhraseIndex(Of,4,4)
PhraseIndex(President,5,5)
PhraseIndex(Obama,6,6)
PhraseIndex(Called,7,7)
PhraseIndex(Michelle,8,8)
PhrasePosTag(Is,VBZ)
PhrasePosTag(the,DT)
PhrasePosTag(wife,NN)
PhrasePosTag(of,IN)
PhrasePosTag(president,NN)
PhrasePosTag(Obama,NNP)
PhrasePosTag(called,VBD)
PhrasePosTag(Michelle,NNP)
phraseDepTag(Michelle,Obama,root)
phraseDepTag(wife,the,det)
phraseDepTag(Obama,Is,cop)
phraseDepTag(Obama,wife,nsubj)
phraseDepTag(Obama,of,advmod)
phraseDepTag(Obama,president,dep)
phraseDepTag(Obama,called,acl:relcl)
phraseDepTag(called,Michelle,dobj)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'producer'), ('http://dbpedia.org/resource/', 'Hal_Roach'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:producer res:Hal_Roach . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Video,4,4)
PhraseIndex(Games,5,5)
PhraseIndex(Published,6,6)
PhraseIndex(By,7,7)
PhraseIndex(Mean,8,8)
PhraseIndex(Hamster,9,9)
PhraseIndex(Software,10,10)

[u'Give', u'me', u'all', u'video', u'games', u'published', u'by', u'Mean', u'Hamster', u'Software']
Give me all video games published by Mean Hamster Software.
	 La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(me,PRP)
PhrasePosTag(all,DT)
PhrasePosTag(video,NN)
PhrasePosTag(games,NNS)
PhrasePosTag(published,VBN)
PhrasePosTag(by,IN)
PhrasePosTag(Mean,NN)
PhrasePosTag(Hamster,NNP)
PhrasePosTag(Software,NNP)
phraseDepTag(Software,Give,root)
phraseDepTag(Give,me,iobj)
phraseDepTag(Give,games,dobj)
phraseDepTag(games,all,det)
phraseDepTag(games,video,compound)
phraseDepTag(games,published,acl)
phraseDepTag(published,Software,nmod:by)
phraseDepTag(Software,by,case)
phraseDepTag(Software,Mean,compound)
phraseDepTag(Software,Hamster,compound)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'VideoGame')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'publisher'), ('http://dbpedia.org/resource/', 'Mean_Hamster_Software'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:VideoGame . ?uri dbo:publisher res:Mean_Hamster_Software . }


Which languages are spoken in Estonia? 
[u'Which', u'languages', u'are', u'spoken', u'in', u'Estonia', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Languages,2,2)
PhraseIndex(Are,3,3)
PhraseIndex(Spoken,4,4)
PhraseIndex(In,5,5)
PhraseIndex(Estonia,6,6)
PhrasePosTag(Which,WDT)
PhrasePosTag(languages,NNS)
PhrasePosTag(are,VBP)
PhrasePosTag(spoken,VBN)
PhrasePosTag(in,IN)
PhrasePosTag(Estonia,NNP)
phraseDepTag(Estonia,spoken,root)
phraseDepTag(languages,Which,det)
phraseDepTag(spoken,languages,nsubjpass)
phraseDepTag(spoken,are,auxpass)
phraseDepTag(spoken,Estonia,nmod:in)
phraseDepTag(Estonia,in,case)
[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'spokenIn'), ('http://dbpedia.org/resource/', 'Estonia'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:spokenIn res:Estonia . }


How many Aldi stores are there? 
[u'How', u'many', u'Aldi', u'stores', u'are', u'there', u'?']
PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Aldi,3,3)
PhraseIndex(Stores,4,4)
PhraseIndex(Are,5,5)
PhraseIndex(There,6,6)
PhrasePosTag(How,WRB)
PhrasePosTag(many,JJ)
PhrasePosTag(Aldi,NNP)
PhrasePosTag(stores,NNS)
PhrasePosTag(are,VBP)
PhrasePosTag(there,EX)
phraseDepTag(there,are,root)
phraseDepTag(many,How,advmod)
phraseDepTag(Aldi,many,amod)
phraseDepTag(Aldi,stores,dep)
phraseDepTag(are,Aldi,nsubj)
phraseDepTag(are,there,expl)
[(('http://dbpedia.org/resource/', 'Aldi'), ('http://dbpedia.org/ontology/', 'numberOfLocations'), SparqlVar('number'))]
PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?number WHERE { res:Aldi dbo:numberOfLocations ?number . }


PhraseIndex(Which,1,1)
PhraseIndex(Capitals,2,2)
PhraseIndex(In,3,3)
PhraseIndex(Europe,4,4)
PhraseIndex(Were,5,5)
PhraseIndex(Host,6,6)
PhraseIndex(Cities,7,7)
PhraseIndex(Of,8,8)
PhraseIndex(The,9,9)
PhraseIndex(Summer,10,10)
PhraseIndex(Olympic,11,11)
PhraseIndex(Games,12,12)

[u'Which', u'capitals', u'in', u'Europe', u'were', u'host', u'cities', u'of', u'the', u'summer', u'olympic', u'games']
Which capitals in Europe were host cities of the summer olympic games?
	 La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(capitals,NNS)
PhrasePosTag(in,IN)
PhrasePosTag(Europe,NNP)
PhrasePosTag(were,VBD)
PhrasePosTag(host,NN)
PhrasePosTag(cities,NNS)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(summer,NN)
PhrasePosTag(olympic,JJ)
PhrasePosTag(games,NNS)
phraseDepTag(games,were,root)
phraseDepTag(capitals,Which,det)
phraseDepTag(capitals,Europe,nmod:in)
phraseDepTag(Europe,in,case)
phraseDepTag(were,capitals,dep)
phraseDepTag(were,cities,nsubj)
phraseDepTag(cities,host,compound)
phraseDepTag(cities,games,nmod:of)
phraseDepTag(games,of,case)
phraseDepTag(games,the,det)
phraseDepTag(games,summer,compound)
phraseDepTag(games,olympic,amod)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'CapitalsInEurope')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'HostCitiesOfTheSummerOlympicGames'))]
PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:CapitalsInEurope . ?uri rdf:type yago:HostCitiesOfTheSummerOlympicGames . }


Who was the first president of the United States? 
[u'Who', u'was', u'the', u'first', u'president', u'of', u'the', u'United', u'States', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(Was,2,2)
PhraseIndex(The,3,3)
PhraseIndex(First,4,4)
PhraseIndex(President,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(The,7,7)
PhraseIndex(United,8,8)
PhraseIndex(States,9,9)
PhrasePosTag(Who,WP)
PhrasePosTag(was,VBD)
PhrasePosTag(the,DT)
PhrasePosTag(first,JJ)
PhrasePosTag(president,NN)
PhrasePosTag(of,IN)
PhrasePosTag(the,DT)
PhrasePosTag(United,NNP)
PhrasePosTag(States,NNPS)
phraseDepTag(States,Who,root)
phraseDepTag(Who,was,cop)
phraseDepTag(Who,president,nsubj)
phraseDepTag(president,the,det)
phraseDepTag(president,first,amod)
phraseDepTag(president,States,nmod:of)
phraseDepTag(States,of,case)
phraseDepTag(States,the,det)
phraseDepTag(States,United,compound)
[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Book')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'author'), ('http://dbpedia.org/resource/', 'Danielle_Steel'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book . ?uri dbo:author res:Danielle_Steel . }


Which airports are located in California, USA? 
[u'Which', u'airports', u'are', u'located', u'in', u'California', u',', u'USA', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(Airports,2,2)
PhraseIndex(Are,3,3)
PhraseIndex(Located,4,4)
PhraseIndex(In,5,5)
PhraseIndex(California,6,6)
PhraseIndex(Usa,8,8)
PhrasePosTag(Which,WDT)
PhrasePosTag(airports,NNS)
PhrasePosTag(are,VBP)
PhrasePosTag(located,JJ)
PhrasePosTag(in,IN)
PhrasePosTag(California,NNP)
PhrasePosTag(USA,,)
phraseDepTag(USA,located,root)
phraseDepTag(airports,Which,det)
phraseDepTag(located,airports,nsubj)
phraseDepTag(located,are,cop)
