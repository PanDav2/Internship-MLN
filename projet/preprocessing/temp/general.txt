//Give me all cosmonauts. 
//[u'Give', u'me', u'all', u'cosmonauts', u'.']
PhraseIndex(Give[2],1,1)
PhraseIndex(Me[2],2,2)
PhraseIndex(All[2],3,3)
PhraseIndex(Cosmonauts[2],4,4)
PhrasePosTag(Give[2],VB)
PhrasePosTag(Me[2],PRP)
PhrasePosTag(All[2],DT)
PhrasePosTag(Cosmonauts[2],NNS)
PhraseDepTag(Cosmonauts[2],Give[2],root)
PhraseDepTag(Give[2],Me[2],iobj)
PhraseDepTag(Give[2],Cosmonauts[2],dobj)
PhraseDepTag(Cosmonauts[2],All[2],det)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Astronaut')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Astronaut'))]

ResourceType(Astronaut[2],Class)
0.63 PriorMatchScore(Astronaut[2],Cosmonauts[2])


ResourceType(Astronaut[2],Class)
0.63 PriorMatchScore(Astronaut[2],Cosmonauts[2])

//PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Astronaut . { ?uri dbo:nationality res:Russia . } UNION { ?uri dbo:nationality res:Soviet_Union . } }


//In which country does the Nile start? 
//[u'In', u'which', u'country', u'does', u'the', u'Nile', u'start', u'?']
PhraseIndex(In[3],1,1)
PhraseIndex(Which[3],2,2)
PhraseIndex(Country[3],3,3)
PhraseIndex(Does[3],4,4)
PhraseIndex(The[3],5,5)
PhraseIndex(Nile[3],6,6)
PhraseIndex(Start[3],7,7)
PhrasePosTag(In[3],IN)
PhrasePosTag(Which[3],WDT)
PhrasePosTag(Country[3],NN)
PhrasePosTag(Does[3],VBZ)
PhrasePosTag(The[3],DT)
PhrasePosTag(Nile[3],NNP)
PhrasePosTag(Start[3],VB)
PhraseDepTag(Start[3],Start[3],root)
PhraseDepTag(Country[3],In[3],case)
PhraseDepTag(Country[3],Which[3],det)
PhraseDepTag(Nile[3],The[3],det)
PhraseDepTag(Start[3],Country[3],nmod:in)
PhraseDepTag(Start[3],Does[3],aux)
PhraseDepTag(Start[3],Nile[3],nsubj)
//[(('http://dbpedia.org/resource/', 'Nile'), ('http://dbpedia.org/ontology/', 'sourceCountry'), SparqlVar('uri'))]

ResourceType(Dbr_Nile[3],Entity)
1.0 PriorMatchScore(Dbr_Nile[3],Nile[3])


ResourceType(Dbo_Sourcecountry[3],Relation)
0.7 PriorMatchScore(Dbo_Sourcecountry[3],Country[3])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Nile dbo:sourceCountry ?uri . }


PhraseIndex(When[4],1,1)
PhraseIndex(Is[4],2,2)
PhraseIndex(The[4],3,3)
PhraseIndex(Movie[4],4,4)
PhraseIndex(Worst[4],5,5)
PhraseIndex(Case[4],6,6)
PhraseIndex(Scenario[4],7,7)
PhraseIndex(Going[4],8,8)
PhraseIndex(To[4],9,9)
PhraseIndex(Be[4],10,10)
PhraseIndex(In[4],11,11)
PhraseIndex(Cinemas[4],12,12)
PhraseIndex(In[4],13,13)
PhraseIndex(The[4],14,14)
PhraseIndex(Netherlands[4],15,15)

//[u'When', u'Is', u'The', u'Movie', u'Worst', u'Case', u'Scenario', u'Going', u'To', u'Be', u'In', u'Cinemas', u'In', u'The', u'Netherlands']
//When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?

//La ligne est isolée 
PhrasePosTag(When[4],WRB)
PhrasePosTag(Is[4],VBZ)
PhrasePosTag(The[4],DT)
PhrasePosTag(Movie[4],NN)
PhrasePosTag(Worst[4],JJS)
PhrasePosTag(Case[4],NN)
PhrasePosTag(Scenario[4],NN)
PhrasePosTag(Going[4],VBG)
PhrasePosTag(To[4],TO)
PhrasePosTag(Be[4],VB)
PhrasePosTag(In[4],IN)
PhrasePosTag(Cinemas[4],NNS)
PhrasePosTag(In[4],IN)
PhrasePosTag(The[4],DT)
PhrasePosTag(Netherlands[4],NNP)
PhraseDepTag(Netherlands[4],Going[4],root)
PhraseDepTag(Movie[4],The[4],det)
PhraseDepTag(Movie[4],Scenario[4],dep)
PhraseDepTag(Scenario[4],Worst[4],amod)
PhraseDepTag(Scenario[4],Case[4],compound)
PhraseDepTag(Going[4],When[4],advmod)
PhraseDepTag(Going[4],Is[4],aux)
PhraseDepTag(Going[4],Movie[4],nsubj)
PhraseDepTag(Going[4],Cinemas[4],xcomp)
PhraseDepTag(Cinemas[4],To[4],mark)
PhraseDepTag(Cinemas[4],Be[4],cop)
PhraseDepTag(Cinemas[4],In[4],case)
PhraseDepTag(Cinemas[4],Netherlands[4],nmod:in)
PhraseDepTag(Netherlands[4],In[4],case)
PhraseDepTag(Netherlands[4],The[4],det)
PhraseIndex(Which[5],1,1)
PhraseIndex(German[5],2,2)
PhraseIndex(Cities[5],3,3)
PhraseIndex(Have[5],4,4)
PhraseIndex(More[5],5,5)
PhraseIndex(Than[5],6,6)
PhraseIndex(250000[5],7,7)
PhraseIndex(Inhabitants[5],8,8)

//[u'Which', u'German', u'Cities', u'Have', u'More', u'Than', u'250000', u'Inhabitants']
//Which German cities have more than 250000 inhabitants?

//La ligne est isolée 
PhrasePosTag(Which[5],WDT)
PhrasePosTag(German[5],JJ)
PhrasePosTag(Cities[5],NNS)
PhrasePosTag(Have[5],VBP)
PhrasePosTag(More[5],JJR)
PhrasePosTag(Than[5],IN)
PhrasePosTag(250000[5],CD)
PhrasePosTag(Inhabitants[5],NNS)
PhraseDepTag(Inhabitants[5],Have[5],root)
PhraseDepTag(Cities[5],Which[5],det)
PhraseDepTag(Cities[5],German[5],amod)
PhraseDepTag(Have[5],Cities[5],nsubj)
PhraseDepTag(Have[5],Inhabitants[5],dobj)
PhraseDepTag(More[5],Than[5],mwe)
PhraseDepTag(250000[5],More[5],advmod)
PhraseDepTag(Inhabitants[5],250000[5],nummod)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Germany')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('population')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Germany')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('population'))]

ResourceType(Dbo_Country[5],Relation)

ResourceType(Dbr_Germany[5],Entity)
0.92 PriorMatchScore(Dbr_Germany[5],German[5])


ResourceType(Dbo_Populationtotal[5],Relation)

ResourceType(Dbo_Country[5],Relation)

ResourceType(Dbr_Germany[5],Entity)
0.92 PriorMatchScore(Dbr_Germany[5],German[5])


ResourceType(Dbo_Populationtotal[5],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { { ?uri rdf:type dbo:City . } UNION { ?uri rdf:type dbo:Town . } ?uri dbo:country res:Germany . ?uri dbo:populationTotal ?population . FILTER ( ?population > 250000 ) }


//Who was John F. Kennedy's vice president? 
//[u'Who', u'was', u'John', u'F.', u'Kennedy', u"'s", u'vice', u'president', u'?']
PhraseIndex(Who[6],1,1)
PhraseIndex(Was[6],2,2)
PhraseIndex(John[6],3,3)
PhraseIndex(F.[6],4,4)
PhraseIndex(Kennedy[6],5,5)
PhraseIndex('S[6],6,6)
PhraseIndex(Vice[6],7,7)
PhraseIndex(President[6],8,8)
PhrasePosTag(Who[6],WP)
PhrasePosTag(Was[6],VBD)
PhrasePosTag(John[6],NNP)
PhrasePosTag(F.[6],NNP)
PhrasePosTag(Kennedy[6],NNP)
PhrasePosTag('S[6],POS)
PhrasePosTag(Vice[6],NN)
PhrasePosTag(President[6],NN)
PhraseDepTag(President[6],Who[6],root)
PhraseDepTag(Who[6],Was[6],cop)
PhraseDepTag(Who[6],President[6],nsubj)
PhraseDepTag(Kennedy[6],John[6],compound)
PhraseDepTag(Kennedy[6],F.[6],compound)
PhraseDepTag(Kennedy[6],'S[6],case)
PhraseDepTag(President[6],Kennedy[6],nmod:poss)
PhraseDepTag(President[6],Vice[6],compound)
//[(('http://dbpedia.org/resource/', 'John_F._Kennedy'), ('http://dbpedia.org/ontology/', 'vicePresident'), SparqlVar('uri'))]

ResourceType(Dbr_John_F._Kennedy[6],Entity)
0.63 PriorMatchScore(Dbr_John_F._Kennedy[6],Kennedy[6])


ResourceType(Dbo_Vicepresident[6],Relation)
0.81 PriorMatchScore(Dbo_Vicepresident[6],President[6])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:vicePresident ?uri . }


//Who is the mayor of Berlin? 
//[u'Who', u'is', u'the', u'mayor', u'of', u'Berlin', u'?']
PhraseIndex(Who[7],1,1)
PhraseIndex(Is[7],2,2)
PhraseIndex(The[7],3,3)
PhraseIndex(Mayor[7],4,4)
PhraseIndex(Of[7],5,5)
PhraseIndex(Berlin[7],6,6)
PhrasePosTag(Who[7],WP)
PhrasePosTag(Is[7],VBZ)
PhrasePosTag(The[7],DT)
PhrasePosTag(Mayor[7],NN)
PhrasePosTag(Of[7],IN)
PhrasePosTag(Berlin[7],NNP)
PhraseDepTag(Berlin[7],Who[7],root)
PhraseDepTag(Who[7],Is[7],cop)
PhraseDepTag(Who[7],Mayor[7],nsubj)
PhraseDepTag(Mayor[7],The[7],det)
PhraseDepTag(Mayor[7],Berlin[7],nmod:of)
PhraseDepTag(Berlin[7],Of[7],case)
//[(('http://dbpedia.org/resource/', 'Berlin'), ('http://dbpedia.org/ontology/', 'leader'), SparqlVar('uri'))]

ResourceType(Dbr_Berlin[7],Entity)
1.0 PriorMatchScore(Dbr_Berlin[7],Berlin[7])


ResourceType(Dbo_Leader[7],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Berlin dbo:leader ?uri . }


PhraseIndex(How[8],1,1)
PhraseIndex(Many[8],2,2)
PhraseIndex(Students[8],3,3)
PhraseIndex(Does[8],4,4)
PhraseIndex(The[8],5,5)
PhraseIndex(Free[8],6,6)
PhraseIndex(University[8],7,7)
PhraseIndex(In[8],8,8)
PhraseIndex(Amsterdam[8],9,9)
PhraseIndex(Have[8],10,10)

//[u'How', u'Many', u'Students', u'Does', u'The', u'Free', u'University', u'In', u'Amsterdam', u'Have']
//How many students does the Free University in Amsterdam have?

//La ligne est isolée 
PhrasePosTag(How[8],WRB)
PhrasePosTag(Many[8],JJ)
PhrasePosTag(Students[8],NNS)
PhrasePosTag(Does[8],VBZ)
PhrasePosTag(The[8],DT)
PhrasePosTag(Free[8],NNP)
PhrasePosTag(University[8],NNP)
PhrasePosTag(In[8],IN)
PhrasePosTag(Amsterdam[8],NNP)
PhrasePosTag(Have[8],VB)
PhraseDepTag(Have[8],Have[8],root)
PhraseDepTag(Many[8],How[8],advmod)
PhraseDepTag(Students[8],Many[8],amod)
PhraseDepTag(University[8],The[8],det)
PhraseDepTag(University[8],Free[8],compound)
PhraseDepTag(University[8],Amsterdam[8],nmod:in)
PhraseDepTag(Amsterdam[8],In[8],case)
PhraseDepTag(Have[8],Students[8],dobj)
PhraseDepTag(Have[8],Does[8],aux)
PhraseDepTag(Have[8],University[8],nsubj)
//[(('http://dbpedia.org/resource/', 'Vrije_Universiteit'), ('http://dbpedia.org/ontology/', 'numberOfStudents'), SparqlVar('num'))]

ResourceType(Dbr_Vrije_Universiteit[8],Entity)
0.64 PriorMatchScore(Dbr_Vrije_Universiteit[8],University[8])


ResourceType(Dbo_Numberofstudents[8],Relation)
0.66 PriorMatchScore(Dbo_Numberofstudents[8],Students[8])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Vrije_Universiteit dbo:numberOfStudents ?num . }


//What is the second highest mountain on Earth? 
//[u'What', u'is', u'the', u'second', u'highest', u'mountain', u'on', u'Earth', u'?']
PhraseIndex(What[9],1,1)
PhraseIndex(Is[9],2,2)
PhraseIndex(The[9],3,3)
PhraseIndex(Second[9],4,4)
PhraseIndex(Highest[9],5,5)
PhraseIndex(Mountain[9],6,6)
PhraseIndex(On[9],7,7)
PhraseIndex(Earth[9],8,8)
PhrasePosTag(What[9],WP)
PhrasePosTag(Is[9],VBZ)
PhrasePosTag(The[9],DT)
PhrasePosTag(Second[9],JJ)
PhrasePosTag(Highest[9],JJS)
PhrasePosTag(Mountain[9],NN)
PhrasePosTag(On[9],IN)
PhrasePosTag(Earth[9],NNP)
PhraseDepTag(Earth[9],What[9],root)
PhraseDepTag(What[9],Is[9],cop)
PhraseDepTag(What[9],Mountain[9],nsubj)
PhraseDepTag(What[9],Earth[9],dep)
PhraseDepTag(Mountain[9],The[9],det)
PhraseDepTag(Mountain[9],Second[9],amod)
PhraseDepTag(Mountain[9],Highest[9],amod)
PhraseDepTag(Earth[9],On[9],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation'))]

ResourceType(Mountain[9],Class)
1.0 PriorMatchScore(Mountain[9],Mountain[9])


ResourceType(Dbo_Elevation[9],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain . ?uri dbo:elevation ?elevation . } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1


PhraseIndex(Give[10],1,1)
PhraseIndex(Me[10],2,2)
PhraseIndex(All[10],3,3)
PhraseIndex(Professional[10],4,4)
PhraseIndex(Skateboarders[10],5,5)
PhraseIndex(From[10],6,6)
PhraseIndex(Sweden[10],7,7)

//[u'Give', u'Me', u'All', u'Professional', u'Skateboarders', u'From', u'Sweden']
//Give me all professional skateboarders from Sweden.

//La ligne est isolée 
PhrasePosTag(Give[10],VB)
PhrasePosTag(Me[10],PRP)
PhrasePosTag(All[10],DT)
PhrasePosTag(Professional[10],JJ)
PhrasePosTag(Skateboarders[10],NNS)
PhrasePosTag(From[10],IN)
PhrasePosTag(Sweden[10],NNP)
PhraseDepTag(Sweden[10],Give[10],root)
PhraseDepTag(Give[10],Me[10],iobj)
PhraseDepTag(Give[10],Skateboarders[10],dobj)
PhraseDepTag(Skateboarders[10],All[10],det)
PhraseDepTag(Skateboarders[10],Professional[10],amod)
PhraseDepTag(Skateboarders[10],Sweden[10],nmod:from)
PhraseDepTag(Sweden[10],From[10],case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Skateboarding')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Skateboarding'))]

ResourceType(Dbo_Occupation[10],Relation)

ResourceType(Dbr_Skateboarding[10],Entity)
0.76 PriorMatchScore(Dbr_Skateboarding[10],Skateboarders[10])


ResourceType(Dbo_Occupation[10],Relation)

ResourceType(Dbr_Skateboarding[10],Entity)
0.76 PriorMatchScore(Dbr_Skateboarding[10],Skateboarders[10])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Skateboarding . { ?uri dbo:birthPlace res:Sweden . } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country res:Sweden . } }


//When was Alberta admitted as province? 
//[u'When', u'was', u'Alberta', u'admitted', u'as', u'province', u'?']
PhraseIndex(When[11],1,1)
PhraseIndex(Was[11],2,2)
PhraseIndex(Alberta[11],3,3)
PhraseIndex(Admitted[11],4,4)
PhraseIndex(As[11],5,5)
PhraseIndex(Province[11],6,6)
PhrasePosTag(When[11],WRB)
PhrasePosTag(Was[11],VBD)
PhrasePosTag(Alberta[11],NNP)
PhrasePosTag(Admitted[11],VBD)
PhrasePosTag(As[11],IN)
PhrasePosTag(Province[11],NN)
PhraseDepTag(Province[11],Was[11],root)
PhraseDepTag(Was[11],When[11],advmod)
PhraseDepTag(Was[11],Alberta[11],nsubj)
PhraseDepTag(Alberta[11],Admitted[11],acl:relcl)
PhraseDepTag(Admitted[11],Province[11],nmod:as)
PhraseDepTag(Province[11],As[11],case)
//[(('http://dbpedia.org/resource/', 'Alberta'), ('http://dbpedia.org/property/', 'admittancedate'), SparqlVar('date'))]

ResourceType(Dbr_Alberta[11],Entity)
1.0 PriorMatchScore(Dbr_Alberta[11],Alberta[11])


ResourceType(Admittancedate[11],Class)
0.63 PriorMatchScore(Admittancedate[11],Admitted[11])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Alberta dbp:admittancedate ?date . }


PhraseIndex(To[12],1,1)
PhraseIndex(Which[12],2,2)
PhraseIndex(Countries[12],3,3)
PhraseIndex(Does[12],4,4)
PhraseIndex(The[12],5,5)
PhraseIndex(Himalayan[12],6,6)
PhraseIndex(Mountain[12],7,7)
PhraseIndex(System[12],8,8)
PhraseIndex(Extend[12],9,9)

//[u'To', u'Which', u'Countries', u'Does', u'The', u'Himalayan', u'Mountain', u'System', u'Extend']
//To which countries does the Himalayan mountain system extend?

//La ligne est isolée 
PhrasePosTag(To[12],TO)
PhrasePosTag(Which[12],WDT)
PhrasePosTag(Countries[12],NNS)
PhrasePosTag(Does[12],VBZ)
PhrasePosTag(The[12],DT)
PhrasePosTag(Himalayan[12],JJ)
PhrasePosTag(Mountain[12],NN)
PhrasePosTag(System[12],NN)
PhrasePosTag(Extend[12],VB)
PhraseDepTag(Extend[12],Extend[12],root)
PhraseDepTag(Countries[12],To[12],case)
PhraseDepTag(Countries[12],Which[12],det)
PhraseDepTag(System[12],The[12],det)
PhraseDepTag(System[12],Himalayan[12],amod)
PhraseDepTag(System[12],Mountain[12],compound)
PhraseDepTag(Extend[12],Countries[12],nmod:to)
PhraseDepTag(Extend[12],Does[12],aux)
PhraseDepTag(Extend[12],System[12],nsubj)
//[(('http://dbpedia.org/resource/', 'Himalayas'), ('http://dbpedia.org/property/', 'country'), SparqlVar('uri'))]

ResourceType(Dbr_Himalayas[12],Entity)
0.88 PriorMatchScore(Dbr_Himalayas[12],Himalayan[12])


ResourceType(Country[12],Class)
0.62 PriorMatchScore(Country[12],Countries[12])

0.53 PriorMatchScore(Country[12],Mountain[12])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Himalayas dbp:country ?uri . }


PhraseIndex(Give[13],1,1)
PhraseIndex(Me[13],2,2)
PhraseIndex(A[13],3,3)
PhraseIndex(List[13],4,4)
PhraseIndex(Of[13],5,5)
PhraseIndex(All[13],6,6)
PhraseIndex(Bandleaders[13],7,7)
PhraseIndex(That[13],8,8)
PhraseIndex(Play[13],9,9)
PhraseIndex(Trumpet[13],10,10)

//[u'Give', u'Me', u'A', u'List', u'Of', u'All', u'Bandleaders', u'That', u'Play', u'Trumpet']
//Give me a list of all bandleaders that play trumpet.

//La ligne est isolée 
PhrasePosTag(Give[13],VB)
PhrasePosTag(Me[13],PRP)
PhrasePosTag(A[13],DT)
PhrasePosTag(List[13],NN)
PhrasePosTag(Of[13],IN)
PhrasePosTag(All[13],DT)
PhrasePosTag(Bandleaders[13],NNS)
PhrasePosTag(That[13],WDT)
PhrasePosTag(Play[13],VBP)
PhrasePosTag(Trumpet[13],NN)
PhraseDepTag(Trumpet[13],Give[13],root)
PhraseDepTag(Give[13],Me[13],iobj)
PhraseDepTag(Give[13],List[13],dobj)
PhraseDepTag(List[13],A[13],det)
PhraseDepTag(List[13],Bandleaders[13],nmod:of)
PhraseDepTag(Bandleaders[13],Of[13],case)
PhraseDepTag(Bandleaders[13],All[13],det)
PhraseDepTag(Bandleaders[13],Play[13],acl:relcl)
PhraseDepTag(Play[13],That[13],nsubj)
PhraseDepTag(Play[13],Trumpet[13],dobj)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Bandleader')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'instrument'), ('http://dbpedia.org/resource/', 'Trumpet'))]

ResourceType(Dbo_Occupation[13],Relation)

ResourceType(Dbr_Bandleader[13],Entity)
0.95 PriorMatchScore(Dbr_Bandleader[13],Bandleaders[13])


ResourceType(Dbo_Instrument[13],Relation)
0.58 PriorMatchScore(Dbo_Instrument[13],Trumpet[13])


ResourceType(Dbr_Trumpet[13],Entity)
1.0 PriorMatchScore(Dbr_Trumpet[13],Trumpet[13])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader . ?uri dbo:instrument res:Trumpet . }


//Which countries have more than ten caves? 
//[u'Which', u'countries', u'have', u'more', u'than', u'ten', u'caves', u'?']
PhraseIndex(Which[14],1,1)
PhraseIndex(Countries[14],2,2)
PhraseIndex(Have[14],3,3)
PhraseIndex(More[14],4,4)
PhraseIndex(Than[14],5,5)
PhraseIndex(Ten[14],6,6)
PhraseIndex(Caves[14],7,7)
PhrasePosTag(Which[14],WDT)
PhrasePosTag(Countries[14],NNS)
PhrasePosTag(Have[14],VBP)
PhrasePosTag(More[14],JJR)
PhrasePosTag(Than[14],IN)
PhrasePosTag(Ten[14],CD)
PhrasePosTag(Caves[14],NNS)
PhraseDepTag(Caves[14],Have[14],root)
PhraseDepTag(Countries[14],Which[14],det)
PhraseDepTag(Have[14],Countries[14],nsubj)
PhraseDepTag(Have[14],Caves[14],dobj)
PhraseDepTag(More[14],Than[14],mwe)
PhraseDepTag(Ten[14],More[14],advmod)
PhraseDepTag(Caves[14],Ten[14],nummod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('cave'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('cave'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave'))]

ResourceType(Country[14],Class)
0.75 PriorMatchScore(Country[14],Countries[14])


ResourceType(Cave[14],Class)
0.75 PriorMatchScore(Cave[14],Have[14])

0.88 PriorMatchScore(Cave[14],Caves[14])


ResourceType(Country[14],Class)
0.75 PriorMatchScore(Country[14],Countries[14])


ResourceType(Cave[14],Class)
0.75 PriorMatchScore(Cave[14],Have[14])

0.88 PriorMatchScore(Cave[14],Caves[14])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country . ?cave rdf:type dbo:Cave . { ?cave dbo:location ?uri . } UNION { ?cave dbo:location ?loc . ?loc dbo:country ?uri . } } GROUP BY ?uri HAVING(COUNT(?cave) > 10)


PhraseIndex(What[15],1,1)
PhraseIndex(Is[15],2,2)
PhraseIndex(The[15],3,3)
PhraseIndex(Total[15],4,4)
PhraseIndex(Amount[15],5,5)
PhraseIndex(Of[15],6,6)
PhraseIndex(Men[15],7,7)
PhraseIndex(And[15],8,8)
PhraseIndex(Women[15],9,9)
PhraseIndex(Serving[15],10,10)
PhraseIndex(In[15],11,11)
PhraseIndex(The[15],12,12)
PhraseIndex(Fdny[15],13,13)

//[u'What', u'Is', u'The', u'Total', u'Amount', u'Of', u'Men', u'And', u'Women', u'Serving', u'In', u'The', u'Fdny']
//What is the total amount of men and women serving in the FDNY?

//La ligne est isolée 
PhrasePosTag(What[15],WP)
PhrasePosTag(Is[15],VBZ)
PhrasePosTag(The[15],DT)
PhrasePosTag(Total[15],JJ)
PhrasePosTag(Amount[15],NN)
PhrasePosTag(Of[15],IN)
PhrasePosTag(Men[15],NNS)
PhrasePosTag(And[15],CC)
PhrasePosTag(Women[15],NNS)
PhrasePosTag(Serving[15],VBG)
PhrasePosTag(In[15],IN)
PhrasePosTag(The[15],DT)
PhrasePosTag(Fdny[15],NNP)
PhraseDepTag(Fdny[15],Serving[15],root)
PhraseDepTag(Amount[15],The[15],det)
PhraseDepTag(Amount[15],Total[15],amod)
PhraseDepTag(Amount[15],Men[15],nmod:of)
PhraseDepTag(Amount[15],Women[15],nmod:of)
PhraseDepTag(Men[15],Of[15],case)
PhraseDepTag(Men[15],And[15],cc)
PhraseDepTag(Men[15],Women[15],conj:and)
PhraseDepTag(Serving[15],What[15],dobj)
PhraseDepTag(Serving[15],Is[15],aux)
PhraseDepTag(Serving[15],Amount[15],nsubj)
PhraseDepTag(Serving[15],Fdny[15],nmod:in)
PhraseDepTag(Fdny[15],In[15],case)
//[(('http://dbpedia.org/resource/', 'New_York_City_Fire_Department'), ('http://dbpedia.org/property/', 'strength'), SparqlVar('num'))]

ResourceType(Dbr_New_York_City_Fire_Department[15],Entity)

ResourceType(Strength[15],Class)
//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:New_York_City_Fire_Department dbp:strength ?num . }


//Who produces Orangina? 
//[u'Who', u'produces', u'Orangina', u'?']
PhraseIndex(Who[16],1,1)
PhraseIndex(Produces[16],2,2)
PhraseIndex(Orangina[16],3,3)
PhrasePosTag(Who[16],WP)
PhrasePosTag(Produces[16],VBZ)
PhrasePosTag(Orangina[16],NNP)
PhraseDepTag(Orangina[16],Produces[16],root)
PhraseDepTag(Produces[16],Who[16],nsubj)
PhraseDepTag(Produces[16],Orangina[16],dobj)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'product'), ('http://dbpedia.org/resource/', 'Orangina'))]

ResourceType(Dbo_Product[16],Relation)
0.66 PriorMatchScore(Dbo_Product[16],Produces[16])


ResourceType(Dbr_Orangina[16],Entity)
1.0 PriorMatchScore(Dbr_Orangina[16],Orangina[16])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:product res:Orangina . }


PhraseIndex(Who[17],1,1)
PhraseIndex(Is[17],2,2)
PhraseIndex(The[17],3,3)
PhraseIndex(Formula[17],4,4)
PhraseIndex(1[17],5,5)
PhraseIndex(Race[17],6,6)
PhraseIndex(Driver[17],7,7)
PhraseIndex(With[17],8,8)
PhraseIndex(The[17],9,9)
PhraseIndex(Most[17],10,10)
PhraseIndex(Races[17],11,11)

//[u'Who', u'Is', u'The', u'Formula', u'1', u'Race', u'Driver', u'With', u'The', u'Most', u'Races']
//Who is the Formula 1 race driver with the most races?

//La ligne est isolée 
PhrasePosTag(Who[17],WP)
PhrasePosTag(Is[17],VBZ)
PhrasePosTag(The[17],DT)
PhrasePosTag(Formula[17],NN)
PhrasePosTag(1[17],CD)
PhrasePosTag(Race[17],NN)
PhrasePosTag(Driver[17],NN)
PhrasePosTag(With[17],IN)
PhrasePosTag(The[17],DT)
PhrasePosTag(Most[17],RBS)
PhrasePosTag(Races[17],NNS)
PhraseDepTag(Races[17],Who[17],root)
PhraseDepTag(Who[17],Is[17],cop)
PhraseDepTag(Who[17],Driver[17],nsubj)
PhraseDepTag(Driver[17],The[17],det)
PhraseDepTag(Driver[17],Formula[17],compound)
PhraseDepTag(Driver[17],1[17],nummod)
PhraseDepTag(Driver[17],Race[17],compound)
PhraseDepTag(Driver[17],The[17],nmod:with)
PhraseDepTag(The[17],With[17],case)
PhraseDepTag(The[17],Most[17],advmod)
PhraseDepTag(The[17],Races[17],dep)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'FormulaOneRacer')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'races'), SparqlVar('x'))]

ResourceType(FormulaOneRacer[17],Class)
0.63 PriorMatchScore(FormulaOneRacer[17],Formula[17])


ResourceType(Dbo_Races[17],Relation)
0.66 PriorMatchScore(Dbo_Races[17],Race[17])

0.8 PriorMatchScore(Dbo_Races[17],Races[17])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:FormulaOneRacer . ?uri dbo:races ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1


PhraseIndex(Give[18],1,1)
PhraseIndex(Me[18],2,2)
PhraseIndex(All[18],3,3)
PhraseIndex(World[18],4,4)
PhraseIndex(Heritage[18],5,5)
PhraseIndex(Sites[18],6,6)
PhraseIndex(Designated[18],7,7)
PhraseIndex(Within[18],8,8)
PhraseIndex(The[18],9,9)
PhraseIndex(Past[18],10,10)
PhraseIndex(Two[18],11,11)
PhraseIndex(Years[18],12,12)

//[u'Give', u'Me', u'All', u'World', u'Heritage', u'Sites', u'Designated', u'Within', u'The', u'Past', u'Two', u'Years']
//Give me all world heritage sites designated within the past two years.

//La ligne est isolée 
PhrasePosTag(Give[18],VB)
PhrasePosTag(Me[18],PRP)
PhrasePosTag(All[18],DT)
PhrasePosTag(World[18],NN)
PhrasePosTag(Heritage[18],NN)
PhrasePosTag(Sites[18],NNS)
PhrasePosTag(Designated[18],VBN)
PhrasePosTag(Within[18],IN)
PhrasePosTag(The[18],DT)
PhrasePosTag(Past[18],JJ)
PhrasePosTag(Two[18],CD)
PhrasePosTag(Years[18],NNS)
PhraseDepTag(Years[18],Give[18],root)
PhraseDepTag(Give[18],Me[18],iobj)
PhraseDepTag(Give[18],Sites[18],dobj)
PhraseDepTag(Sites[18],All[18],det)
PhraseDepTag(Sites[18],World[18],compound)
PhraseDepTag(Sites[18],Heritage[18],compound)
PhraseDepTag(Sites[18],Designated[18],acl)
PhraseDepTag(Designated[18],Years[18],nmod:within)
PhraseDepTag(Years[18],Within[18],case)
PhraseDepTag(Years[18],The[18],det)
PhraseDepTag(Years[18],Past[18],amod)
PhraseDepTag(Years[18],Two[18],nummod)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'team'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'league'), ('http://dbpedia.org/resource/', 'Premier_League')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthDate'), SparqlVar('y'))]

ResourceType(Dbo_Team[19],Relation)

ResourceType(Dbo_League[19],Relation)
0.57 PriorMatchScore(Dbo_League[19],Heritage[19])


ResourceType(Dbr_Premier_League[19],Entity)

ResourceType(Dbo_Birthdate[19],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:team ?x . ?x dbo:league res:Premier_League . ?uri dbo:birthDate ?y . } ORDER BY DESC(?y) OFFSET 0 LIMIT 1


//Give me all members of Prodigy. 
//[u'Give', u'me', u'all', u'members', u'of', u'Prodigy', u'.']
PhraseIndex(Give[20],1,1)
PhraseIndex(Me[20],2,2)
PhraseIndex(All[20],3,3)
PhraseIndex(Members[20],4,4)
PhraseIndex(Of[20],5,5)
PhraseIndex(Prodigy[20],6,6)
PhrasePosTag(Give[20],VB)
PhrasePosTag(Me[20],PRP)
PhrasePosTag(All[20],DT)
PhrasePosTag(Members[20],NNS)
PhrasePosTag(Of[20],IN)
PhrasePosTag(Prodigy[20],NNP)
PhraseDepTag(Prodigy[20],Give[20],root)
PhraseDepTag(Give[20],Me[20],iobj)
PhraseDepTag(Give[20],Members[20],dobj)
PhraseDepTag(Members[20],All[20],det)
PhraseDepTag(Members[20],Prodigy[20],nmod:of)
PhraseDepTag(Prodigy[20],Of[20],case)
//[(('http://dbpedia.org/resource/', 'The_Prodigy'), ('http://dbpedia.org/ontology/', 'bandMember'), SparqlVar('uri'))]

ResourceType(Dbr_The_Prodigy[20],Entity)
0.77 PriorMatchScore(Dbr_The_Prodigy[20],Prodigy[20])


ResourceType(Dbo_Bandmember[20],Relation)
0.70 PriorMatchScore(Dbo_Bandmember[20],Members[20])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Prodigy dbo:bandMember ?uri . }


//What is the longest river? 
//[u'What', u'is', u'the', u'longest', u'river', u'?']
PhraseIndex(What[21],1,1)
PhraseIndex(Is[21],2,2)
PhraseIndex(The[21],3,3)
PhraseIndex(Longest[21],4,4)
PhraseIndex(River[21],5,5)
PhrasePosTag(What[21],WP)
PhrasePosTag(Is[21],VBZ)
PhrasePosTag(The[21],DT)
PhrasePosTag(Longest[21],JJS)
PhrasePosTag(River[21],NN)
PhraseDepTag(River[21],What[21],root)
PhraseDepTag(What[21],Is[21],cop)
PhraseDepTag(What[21],River[21],nsubj)
PhraseDepTag(River[21],The[21],det)
PhraseDepTag(River[21],Longest[21],amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'River')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'River'))]

ResourceType(River[21],Class)
1.0 PriorMatchScore(River[21],River[21])


ResourceType(River[21],Class)
1.0 PriorMatchScore(River[21],River[21])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:River . { ?uri dbo:length ?l . } UNION { ?uri dbp:length ?l . } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1


PhraseIndex(Does[22],1,1)
PhraseIndex(Breaking[22],2,2)
PhraseIndex(Bad[22],3,3)
PhraseIndex(Have[22],4,4)
PhraseIndex(More[22],5,5)
PhraseIndex(Episodes[22],6,6)
PhraseIndex(Than[22],7,7)
PhraseIndex(Game[22],8,8)
PhraseIndex(Of[22],9,9)
PhraseIndex(Thrones[22],10,10)

//[u'Does', u'Breaking', u'Bad', u'Have', u'More', u'Episodes', u'Than', u'Game', u'Of', u'Thrones']
//Does Breaking Bad have more episodes than Game of Thrones?

//La ligne est isolée 
PhrasePosTag(Does[22],VBZ)
PhrasePosTag(Breaking[22],VBG)
PhrasePosTag(Bad[22],JJ)
PhrasePosTag(Have[22],VBP)
PhrasePosTag(More[22],JJR)
PhrasePosTag(Episodes[22],NNS)
PhrasePosTag(Than[22],IN)
PhrasePosTag(Game[22],NN)
PhrasePosTag(Of[22],IN)
PhrasePosTag(Thrones[22],NNPS)
PhraseDepTag(Thrones[22],Have[22],root)
PhraseDepTag(Does[22],Breaking[22],xcomp)
PhraseDepTag(Breaking[22],Bad[22],xcomp)
PhraseDepTag(Have[22],Does[22],csubj)
PhraseDepTag(Have[22],Episodes[22],dobj)
PhraseDepTag(Have[22],Game[22],nmod:than)
PhraseDepTag(Episodes[22],More[22],amod)
PhraseDepTag(Game[22],Than[22],case)
PhraseDepTag(Game[22],Thrones[22],nmod:of)
PhraseDepTag(Thrones[22],Of[22],case)
//[(('http://dbpedia.org/resource/', 'Breaking_Bad'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Game_of_Thrones'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('y')), (('http://dbpedia.org/resource/', 'Breaking_Bad'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Game_of_Thrones'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('y'))]

ResourceType(Dbr_Breaking_Bad[22],Entity)
0.8 PriorMatchScore(Dbr_Breaking_Bad[22],Breaking[22])


ResourceType(Dbo_Numberofepisodes[22],Relation)
0.66 PriorMatchScore(Dbo_Numberofepisodes[22],Episodes[22])


ResourceType(Dbr_Game_Of_Thrones[22],Entity)
0.63 PriorMatchScore(Dbr_Game_Of_Thrones[22],Thrones[22])


ResourceType(Dbo_Numberofepisodes[22],Relation)
0.66 PriorMatchScore(Dbo_Numberofepisodes[22],Episodes[22])


ResourceType(Dbr_Breaking_Bad[22],Entity)
0.8 PriorMatchScore(Dbr_Breaking_Bad[22],Breaking[22])


ResourceType(Dbo_Numberofepisodes[22],Relation)
0.66 PriorMatchScore(Dbo_Numberofepisodes[22],Episodes[22])


ResourceType(Dbr_Game_Of_Thrones[22],Entity)
0.63 PriorMatchScore(Dbr_Game_Of_Thrones[22],Thrones[22])


ResourceType(Dbo_Numberofepisodes[22],Relation)
0.66 PriorMatchScore(Dbo_Numberofepisodes[22],Episodes[22])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Breaking_Bad dbo:numberOfEpisodes ?x . res:Game_of_Thrones dbo:numberOfEpisodes ?y . FILTER (?y > ?x) }


//Give me all cars that are produced in Germany. 
//[u'Give', u'me', u'all', u'cars', u'that', u'are', u'produced', u'in', u'Germany', u'.']
PhraseIndex(Give[23],1,1)
PhraseIndex(Me[23],2,2)
PhraseIndex(All[23],3,3)
PhraseIndex(Cars[23],4,4)
PhraseIndex(That[23],5,5)
PhraseIndex(Are[23],6,6)
PhraseIndex(Produced[23],7,7)
PhraseIndex(In[23],8,8)
PhraseIndex(Germany[23],9,9)
PhrasePosTag(Give[23],VB)
PhrasePosTag(Me[23],PRP)
PhrasePosTag(All[23],DT)
PhrasePosTag(Cars[23],NNS)
PhrasePosTag(That[23],WDT)
PhrasePosTag(Are[23],VBP)
PhrasePosTag(Produced[23],VBN)
PhrasePosTag(In[23],IN)
PhrasePosTag(Germany[23],NNP)
PhraseDepTag(Germany[23],Give[23],root)
PhraseDepTag(Give[23],Me[23],iobj)
PhraseDepTag(Give[23],Cars[23],dobj)
PhraseDepTag(Cars[23],All[23],det)
PhraseDepTag(Cars[23],Produced[23],acl:relcl)
PhraseDepTag(Produced[23],That[23],nsubjpass)
PhraseDepTag(Produced[23],Are[23],auxpass)
PhraseDepTag(Produced[23],Germany[23],nmod:in)
PhraseDepTag(Germany[23],In[23],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Automobile')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Automobile'))]

ResourceType(Automobile[23],Class)

ResourceType(Automobile[23],Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Automobile . { ?uri dbo:assembly res:Germany . } UNION { ?uri dbp:assembly res:Germany . } UNION { { ?uri dbo:manufacturer ?x . } UNION { ?uri dbp:manufacturer ?x . } { ?x dbo:locationCountry res:Germany . } UNION { ?x dbo:location res:Germany . } } }


PhraseIndex(What[24],1,1)
PhraseIndex(Were[24],2,2)
PhraseIndex(The[24],3,3)
PhraseIndex(Main[24],4,4)
PhraseIndex(Discoveries[24],5,5)
PhraseIndex(Of[24],6,6)
PhraseIndex(The[24],7,7)
PhraseIndex(Mars[24],8,8)
PhraseIndex(Rover[24],9,9)
PhraseIndex(Curiosity[24],10,10)

//[u'What', u'Were', u'The', u'Main', u'Discoveries', u'Of', u'The', u'Mars', u'Rover', u'Curiosity']
//What were the main discoveries of the Mars rover Curiosity?

//La ligne est isolée 
PhrasePosTag(What[24],WP)
PhrasePosTag(Were[24],VBD)
PhrasePosTag(The[24],DT)
PhrasePosTag(Main[24],JJ)
PhrasePosTag(Discoveries[24],NNS)
PhrasePosTag(Of[24],IN)
PhrasePosTag(The[24],DT)
PhrasePosTag(Mars[24],NNP)
PhrasePosTag(Rover[24],NN)
PhrasePosTag(Curiosity[24],NN)
PhraseDepTag(Curiosity[24],What[24],root)
PhraseDepTag(What[24],Were[24],cop)
PhraseDepTag(What[24],Discoveries[24],nsubj)
PhraseDepTag(Discoveries[24],The[24],det)
PhraseDepTag(Discoveries[24],Main[24],amod)
PhraseDepTag(Discoveries[24],Curiosity[24],nmod:of)
PhraseDepTag(Curiosity[24],Of[24],case)
PhraseDepTag(Curiosity[24],The[24],det)
PhraseDepTag(Curiosity[24],Mars[24],compound)
PhraseDepTag(Curiosity[24],Rover[24],compound)
PhraseIndex(Give[25],1,1)
PhraseIndex(Me[25],2,2)
PhraseIndex(All[25],3,3)
PhraseIndex(People[25],4,4)
PhraseIndex(That[25],5,5)
PhraseIndex(Were[25],6,6)
PhraseIndex(Born[25],7,7)
PhraseIndex(In[25],8,8)
PhraseIndex(Vienna[25],9,9)
PhraseIndex(And[25],10,10)
PhraseIndex(Died[25],11,11)
PhraseIndex(In[25],12,12)
PhraseIndex(Berlin[25],13,13)

//[u'Give', u'Me', u'All', u'People', u'That', u'Were', u'Born', u'In', u'Vienna', u'And', u'Died', u'In', u'Berlin']
//Give me all people that were born in Vienna and died in Berlin.

//La ligne est isolée 
PhrasePosTag(Give[25],VB)
PhrasePosTag(Me[25],PRP)
PhrasePosTag(All[25],DT)
PhrasePosTag(People[25],NNS)
PhrasePosTag(That[25],WDT)
PhrasePosTag(Were[25],VBD)
PhrasePosTag(Born[25],VBN)
PhrasePosTag(In[25],IN)
PhrasePosTag(Vienna[25],NNP)
PhrasePosTag(And[25],CC)
PhrasePosTag(Died[25],VBD)
PhrasePosTag(In[25],IN)
PhrasePosTag(Berlin[25],NNP)
PhraseDepTag(Berlin[25],Give[25],root)
PhraseDepTag(Give[25],Me[25],iobj)
PhraseDepTag(Give[25],People[25],dobj)
PhraseDepTag(Give[25],And[25],cc)
PhraseDepTag(Give[25],Died[25],conj:and)
PhraseDepTag(People[25],All[25],det)
PhraseDepTag(People[25],Born[25],acl:relcl)
PhraseDepTag(Born[25],That[25],nsubjpass)
PhraseDepTag(Born[25],Were[25],auxpass)
PhraseDepTag(Born[25],Vienna[25],nmod:in)
PhraseDepTag(Vienna[25],In[25],case)
PhraseDepTag(Died[25],Berlin[25],nmod:in)
PhraseDepTag(Berlin[25],In[25],case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), ('http://dbpedia.org/resource/', 'Vienna')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'deathPlace'), ('http://dbpedia.org/resource/', 'Berlin'))]

ResourceType(Dbo_Birthplace[25],Relation)

ResourceType(Dbr_Vienna[25],Entity)
1.0 PriorMatchScore(Dbr_Vienna[25],Vienna[25])


ResourceType(Dbo_Deathplace[25],Relation)

ResourceType(Dbr_Berlin[25],Entity)
0.6 PriorMatchScore(Dbr_Berlin[25],Born[25])

1.0 PriorMatchScore(Dbr_Berlin[25],Berlin[25])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:birthPlace res:Vienna . ?uri dbo:deathPlace res:Berlin . }


//Is proinsulin a protein? 
//[u'Is', u'proinsulin', u'a', u'protein', u'?']
PhraseIndex(Is[26],1,1)
PhraseIndex(Proinsulin[26],2,2)
PhraseIndex(A[26],3,3)
PhraseIndex(Protein[26],4,4)
PhrasePosTag(Is[26],VBZ)
PhrasePosTag(Proinsulin[26],NN)
PhrasePosTag(A[26],DT)
PhrasePosTag(Protein[26],NN)
PhraseDepTag(Protein[26],Protein[26],root)
PhraseDepTag(Protein[26],Is[26],cop)
PhraseDepTag(Protein[26],Proinsulin[26],nsubj)
PhraseDepTag(Protein[26],A[26],det)
//[(('http://dbpedia.org/resource/', 'Proinsulin'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Protein'))]

ResourceType(Protein[26],Class)
0.58 PriorMatchScore(Protein[26],Proinsulin[26])

1.0 PriorMatchScore(Protein[26],Protein[26])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ASK WHERE { res:Proinsulin rdf:type dbo:Protein . }


//How tall is Michael Jordan? 
//[u'How', u'tall', u'is', u'Michael', u'Jordan', u'?']
PhraseIndex(How[27],1,1)
PhraseIndex(Tall[27],2,2)
PhraseIndex(Is[27],3,3)
PhraseIndex(Michael[27],4,4)
PhraseIndex(Jordan[27],5,5)
PhrasePosTag(How[27],WRB)
PhrasePosTag(Tall[27],JJ)
PhrasePosTag(Is[27],VBZ)
PhrasePosTag(Michael[27],NNP)
PhrasePosTag(Jordan[27],NNP)
PhraseDepTag(Jordan[27],Is[27],root)
PhraseDepTag(Tall[27],How[27],advmod)
PhraseDepTag(Is[27],Tall[27],dep)
PhraseDepTag(Is[27],Jordan[27],nsubj)
PhraseDepTag(Jordan[27],Michael[27],compound)
//[(('http://dbpedia.org/resource/', 'Michael_Jordan'), ('http://dbpedia.org/ontology/', 'height'), SparqlVar('num'))]

ResourceType(Dbr_Michael_Jordan[27],Entity)
0.66 PriorMatchScore(Dbr_Michael_Jordan[27],Michael[27])

0.6 PriorMatchScore(Dbr_Michael_Jordan[27],Jordan[27])


ResourceType(Dbo_Height[27],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Michael_Jordan dbo:height ?num . }


//What is the capital of Canada? 
//[u'What', u'is', u'the', u'capital', u'of', u'Canada', u'?']
PhraseIndex(What[28],1,1)
PhraseIndex(Is[28],2,2)
PhraseIndex(The[28],3,3)
PhraseIndex(Capital[28],4,4)
PhraseIndex(Of[28],5,5)
PhraseIndex(Canada[28],6,6)
PhrasePosTag(What[28],WP)
PhrasePosTag(Is[28],VBZ)
PhrasePosTag(The[28],DT)
PhrasePosTag(Capital[28],NN)
PhrasePosTag(Of[28],IN)
PhrasePosTag(Canada[28],NNP)
PhraseDepTag(Canada[28],What[28],root)
PhraseDepTag(What[28],Is[28],cop)
PhraseDepTag(What[28],Capital[28],nsubj)
PhraseDepTag(Capital[28],The[28],det)
PhraseDepTag(Capital[28],Canada[28],nmod:of)
PhraseDepTag(Canada[28],Of[28],case)
//[(('http://dbpedia.org/resource/', 'Canada'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('uri'))]

ResourceType(Dbr_Canada[28],Entity)
1.0 PriorMatchScore(Dbr_Canada[28],Canada[28])


ResourceType(Dbo_Capital[28],Relation)
0.85 PriorMatchScore(Dbo_Capital[28],Capital[28])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Canada dbo:capital ?uri . }


//Who is the governor of Wyoming? 
//[u'Who', u'is', u'the', u'governor', u'of', u'Wyoming', u'?']
PhraseIndex(Who[29],1,1)
PhraseIndex(Is[29],2,2)
PhraseIndex(The[29],3,3)
PhraseIndex(Governor[29],4,4)
PhraseIndex(Of[29],5,5)
PhraseIndex(Wyoming[29],6,6)
PhrasePosTag(Who[29],WP)
PhrasePosTag(Is[29],VBZ)
PhrasePosTag(The[29],DT)
PhrasePosTag(Governor[29],NN)
PhrasePosTag(Of[29],IN)
PhrasePosTag(Wyoming[29],NNP)
PhraseDepTag(Wyoming[29],Who[29],root)
PhraseDepTag(Who[29],Is[29],cop)
PhraseDepTag(Who[29],Governor[29],nsubj)
PhraseDepTag(Governor[29],The[29],det)
PhraseDepTag(Governor[29],Wyoming[29],nmod:of)
PhraseDepTag(Wyoming[29],Of[29],case)
//[(('http://dbpedia.org/resource/', 'Wyoming'), ('http://dbpedia.org/property/', 'governor'), SparqlVar('uri'))]

ResourceType(Dbr_Wyoming[29],Entity)
1.0 PriorMatchScore(Dbr_Wyoming[29],Wyoming[29])


ResourceType(Governor[29],Class)
0.87 PriorMatchScore(Governor[29],Governor[29])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Wyoming dbp:governor ?uri . }


PhraseIndex(Do[30],1,1)
PhraseIndex(Prince[30],2,2)
PhraseIndex(Harry[30],3,3)
PhraseIndex(And[30],4,4)
PhraseIndex(Prince[30],5,5)
PhraseIndex(William[30],6,6)
PhraseIndex(Have[30],7,7)
PhraseIndex(The[30],8,8)
PhraseIndex(Same[30],9,9)
PhraseIndex(Mother[30],10,10)

//[u'Do', u'Prince', u'Harry', u'And', u'Prince', u'William', u'Have', u'The', u'Same', u'Mother']
//Do Prince Harry and Prince William have the same mother?

//La ligne est isolée 
PhrasePosTag(Do[30],VB)
PhrasePosTag(Prince[30],NNP)
PhrasePosTag(Harry[30],NNP)
PhrasePosTag(And[30],CC)
PhrasePosTag(Prince[30],NNP)
PhrasePosTag(William[30],NNP)
PhrasePosTag(Have[30],VBP)
PhrasePosTag(The[30],DT)
PhrasePosTag(Same[30],JJ)
PhrasePosTag(Mother[30],NN)
PhraseDepTag(Mother[30],Do[30],root)
PhraseDepTag(Do[30],Have[30],ccomp)
PhraseDepTag(Harry[30],Prince[30],compound)
PhraseDepTag(Harry[30],And[30],cc)
PhraseDepTag(Harry[30],William[30],conj:and)
PhraseDepTag(William[30],Prince[30],compound)
PhraseDepTag(Have[30],Harry[30],nsubj)
PhraseDepTag(Have[30],William[30],nsubj)
PhraseDepTag(Have[30],Mother[30],dobj)
PhraseDepTag(Mother[30],The[30],det)
//[('<http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('x')), ('<http://dbpedia.org/resource/Prince_Harry_of_Wales>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('y')), ('<http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('x')), ('<http://dbpedia.org/resource/Prince_Harry_of_Wales>', ('http://dbpedia.org/property/', 'mother'), SparqlVar('y'))]

ResourceType(Mother[30],Class)
0.83 PriorMatchScore(Mother[30],Mother[30])


ResourceType(Mother[30],Class)
0.83 PriorMatchScore(Mother[30],Mother[30])


ResourceType(Mother[30],Class)
0.83 PriorMatchScore(Mother[30],Mother[30])


ResourceType(Mother[30],Class)
0.83 PriorMatchScore(Mother[30],Mother[30])

//PREFIX dbp: <http://dbpedia.org/property/> ASK WHERE { <http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge> dbp:mother ?x . <http://dbpedia.org/resource/Prince_Harry_of_Wales> dbp:mother ?y . FILTER (?x = ?y) }


//Who was the father of Queen Elizabeth II? 
//[u'Who', u'was', u'the', u'father', u'of', u'Queen', u'Elizabeth', u'II', u'?']
PhraseIndex(Who[31],1,1)
PhraseIndex(Was[31],2,2)
PhraseIndex(The[31],3,3)
PhraseIndex(Father[31],4,4)
PhraseIndex(Of[31],5,5)
PhraseIndex(Queen[31],6,6)
PhraseIndex(Elizabeth[31],7,7)
PhraseIndex(Ii[31],8,8)
PhrasePosTag(Who[31],WP)
PhrasePosTag(Was[31],VBD)
PhrasePosTag(The[31],DT)
PhrasePosTag(Father[31],NN)
PhrasePosTag(Of[31],IN)
PhrasePosTag(Queen[31],NNP)
PhrasePosTag(Elizabeth[31],NNP)
PhrasePosTag(Ii[31],NNP)
PhraseDepTag(Ii[31],Who[31],root)
PhraseDepTag(Who[31],Was[31],cop)
PhraseDepTag(Who[31],Father[31],nsubj)
PhraseDepTag(Father[31],The[31],det)
PhraseDepTag(Father[31],Ii[31],nmod:of)
PhraseDepTag(Ii[31],Of[31],case)
PhraseDepTag(Ii[31],Queen[31],compound)
PhraseDepTag(Ii[31],Elizabeth[31],compound)
//[(('http://dbpedia.org/resource/', 'Elizabeth_II'), ('http://dbpedia.org/property/', 'father'), SparqlVar('uri'))]

ResourceType(Dbr_Elizabeth_Ii[31],Entity)
0.85 PriorMatchScore(Dbr_Elizabeth_Ii[31],Elizabeth[31])


ResourceType(Father[31],Class)
0.83 PriorMatchScore(Father[31],Father[31])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Elizabeth_II dbp:father ?uri . }


//Which U.S. state has been admitted latest? 
//[u'Which', u'U.S.', u'state', u'has', u'been', u'admitted', u'latest', u'?']
PhraseIndex(Which[32],1,1)
PhraseIndex(U.S.[32],2,2)
PhraseIndex(State[32],3,3)
PhraseIndex(Has[32],4,4)
PhraseIndex(Been[32],5,5)
PhraseIndex(Admitted[32],6,6)
PhraseIndex(Latest[32],7,7)
PhrasePosTag(Which[32],WDT)
PhrasePosTag(U.S.[32],NNP)
PhrasePosTag(State[32],NN)
PhrasePosTag(Has[32],VBZ)
PhrasePosTag(Been[32],VBN)
PhrasePosTag(Admitted[32],VBN)
PhrasePosTag(Latest[32],JJS)
PhraseDepTag(Latest[32],Admitted[32],root)
PhraseDepTag(State[32],Which[32],det)
PhraseDepTag(State[32],U.S.[32],compound)
PhraseDepTag(Admitted[32],State[32],nsubjpass)
PhraseDepTag(Admitted[32],Has[32],aux)
PhraseDepTag(Admitted[32],Been[32],auxpass)
PhraseDepTag(Admitted[32],Latest[32],xcomp)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'admittancedate'), SparqlVar('x'))]

ResourceType(StatesOfTheUnitedStates[32],Class)

ResourceType(Admittancedate[32],Class)
0.63 PriorMatchScore(Admittancedate[32],Admitted[32])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:admittancedate ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1


//How many languages are spoken in Turkmenistan? 
//[u'How', u'many', u'languages', u'are', u'spoken', u'in', u'Turkmenistan', u'?']
PhraseIndex(How[33],1,1)
PhraseIndex(Many[33],2,2)
PhraseIndex(Languages[33],3,3)
PhraseIndex(Are[33],4,4)
PhraseIndex(Spoken[33],5,5)
PhraseIndex(In[33],6,6)
PhraseIndex(Turkmenistan[33],7,7)
PhrasePosTag(How[33],WRB)
PhrasePosTag(Many[33],JJ)
PhrasePosTag(Languages[33],NNS)
PhrasePosTag(Are[33],VBP)
PhrasePosTag(Spoken[33],VBN)
PhrasePosTag(In[33],IN)
PhrasePosTag(Turkmenistan[33],NNP)
PhraseDepTag(Turkmenistan[33],Spoken[33],root)
PhraseDepTag(Many[33],How[33],advmod)
PhraseDepTag(Languages[33],Many[33],amod)
PhraseDepTag(Spoken[33],Languages[33],nsubjpass)
PhraseDepTag(Spoken[33],Are[33],auxpass)
PhraseDepTag(Spoken[33],Turkmenistan[33],nmod:in)
PhraseDepTag(Turkmenistan[33],In[33],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'governor'), ('http://dbpedia.org/resource/', 'Sean_Parnell'))]

ResourceType(StatesOfTheUnitedStates[34],Class)

ResourceType(Governor[34],Class)

ResourceType(Dbr_Sean_Parnell[34],Entity)
//PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:governor res:Sean_Parnell . }


PhraseIndex(Give[35],1,1)
PhraseIndex(Me[35],2,2)
PhraseIndex(All[35],3,3)
PhraseIndex(Movies[35],4,4)
PhraseIndex(Directed[35],5,5)
PhraseIndex(By[35],6,6)
PhraseIndex(Francis[35],7,7)
PhraseIndex(Ford[35],8,8)
PhraseIndex(Coppola[35],9,9)

//[u'Give', u'Me', u'All', u'Movies', u'Directed', u'By', u'Francis', u'Ford', u'Coppola']
//Give me all movies directed by Francis Ford Coppola.

//La ligne est isolée 
PhrasePosTag(Give[35],VB)
PhrasePosTag(Me[35],PRP)
PhrasePosTag(All[35],DT)
PhrasePosTag(Movies[35],NNS)
PhrasePosTag(Directed[35],VBN)
PhrasePosTag(By[35],IN)
PhrasePosTag(Francis[35],NNP)
PhrasePosTag(Ford[35],NNP)
PhrasePosTag(Coppola[35],NNP)
PhraseDepTag(Coppola[35],Give[35],root)
PhraseDepTag(Give[35],Me[35],iobj)
PhraseDepTag(Give[35],Movies[35],dobj)
PhraseDepTag(Movies[35],All[35],det)
PhraseDepTag(Movies[35],Directed[35],acl)
PhraseDepTag(Directed[35],Coppola[35],nmod:by)
PhraseDepTag(Coppola[35],By[35],case)
PhraseDepTag(Coppola[35],Francis[35],compound)
PhraseDepTag(Coppola[35],Ford[35],compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Francis_Ford_Coppola'))]

ResourceType(Film[35],Class)

ResourceType(Dbo_Director[35],Relation)
0.62 PriorMatchScore(Dbo_Director[35],Directed[35])


ResourceType(Dbr_Francis_Ford_Coppola[35],Entity)
0.51 PriorMatchScore(Dbr_Francis_Ford_Coppola[35],Francis[35])

0.51 PriorMatchScore(Dbr_Francis_Ford_Coppola[35],Coppola[35])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:director res:Francis_Ford_Coppola . }


PhraseIndex(Give[36],1,1)
PhraseIndex(Me[36],2,2)
PhraseIndex(All[36],3,3)
PhraseIndex(Actors[36],4,4)
PhraseIndex(Starring[36],5,5)
PhraseIndex(In[36],6,6)
PhraseIndex(Movies[36],7,7)
PhraseIndex(Directed[36],8,8)
PhraseIndex(By[36],9,9)
PhraseIndex(William[36],10,10)
PhraseIndex(Shatner[36],11,11)

//[u'Give', u'Me', u'All', u'Actors', u'Starring', u'In', u'Movies', u'Directed', u'By', u'William', u'Shatner']
//Give me all actors starring in movies directed by William Shatner.

//La ligne est isolée 
PhrasePosTag(Give[36],VB)
PhrasePosTag(Me[36],PRP)
PhrasePosTag(All[36],DT)
PhrasePosTag(Actors[36],NNS)
PhrasePosTag(Starring[36],VBG)
PhrasePosTag(In[36],IN)
PhrasePosTag(Movies[36],NNS)
PhrasePosTag(Directed[36],VBN)
PhrasePosTag(By[36],IN)
PhrasePosTag(William[36],NNP)
PhrasePosTag(Shatner[36],NNP)
PhraseDepTag(Shatner[36],Give[36],root)
PhraseDepTag(Give[36],Me[36],iobj)
PhraseDepTag(Give[36],Actors[36],dobj)
PhraseDepTag(Actors[36],All[36],det)
PhraseDepTag(Actors[36],Starring[36],acl)
PhraseDepTag(Starring[36],Movies[36],nmod:in)
PhraseDepTag(Movies[36],In[36],case)
PhraseDepTag(Movies[36],Directed[36],acl)
PhraseDepTag(Directed[36],Shatner[36],nmod:by)
PhraseDepTag(Shatner[36],By[36],case)
PhraseDepTag(Shatner[36],William[36],compound)
//[(SparqlVar('x'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'William_Shatner')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'starring'), SparqlVar('uri'))]

ResourceType(Dbo_Director[36],Relation)
0.57 PriorMatchScore(Dbo_Director[36],Actors[36])

0.62 PriorMatchScore(Dbo_Director[36],Directed[36])


ResourceType(Dbr_William_Shatner[36],Entity)
0.63 PriorMatchScore(Dbr_William_Shatner[36],William[36])

0.63 PriorMatchScore(Dbr_William_Shatner[36],Shatner[36])


ResourceType(Dbo_Starring[36],Relation)
0.87 PriorMatchScore(Dbo_Starring[36],Starring[36])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner . ?x dbo:starring ?uri . }


//Are tree frogs a type of amphibian? 
//[u'Are', u'tree', u'frogs', u'a', u'type', u'of', u'amphibian', u'?']
PhraseIndex(Are[37],1,1)
PhraseIndex(Tree[37],2,2)
PhraseIndex(Frogs[37],3,3)
PhraseIndex(A[37],4,4)
PhraseIndex(Type[37],5,5)
PhraseIndex(Of[37],6,6)
PhraseIndex(Amphibian[37],7,7)
PhrasePosTag(Are[37],VBP)
PhrasePosTag(Tree[37],NN)
PhrasePosTag(Frogs[37],NNS)
PhrasePosTag(A[37],DT)
PhrasePosTag(Type[37],NN)
PhrasePosTag(Of[37],IN)
PhrasePosTag(Amphibian[37],NN)
PhraseDepTag(Amphibian[37],Are[37],root)
PhraseDepTag(Are[37],Frogs[37],nsubj)
PhraseDepTag(Are[37],Type[37],nmod)
PhraseDepTag(Frogs[37],Tree[37],compound)
PhraseDepTag(Type[37],A[37],det)
PhraseDepTag(Type[37],Amphibian[37],nmod:of)
PhraseDepTag(Amphibian[37],Of[37],case)
//[(('http://dbpedia.org/resource/', 'Hylidae'), ('http://dbpedia.org/ontology/', 'class'), ('http://dbpedia.org/resource/', 'Amphibian'))]

ResourceType(Dbr_Hylidae[37],Entity)

ResourceType(Dbo_Class[37],Relation)

ResourceType(Dbr_Amphibian[37],Entity)
1.0 PriorMatchScore(Dbr_Amphibian[37],Amphibian[37])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Hylidae dbo:class res:Amphibian . }


//What is the birth name of Angela Merkel? 
//[u'What', u'is', u'the', u'birth', u'name', u'of', u'Angela', u'Merkel', u'?']
PhraseIndex(What[38],1,1)
PhraseIndex(Is[38],2,2)
PhraseIndex(The[38],3,3)
PhraseIndex(Birth[38],4,4)
PhraseIndex(Name[38],5,5)
PhraseIndex(Of[38],6,6)
PhraseIndex(Angela[38],7,7)
PhraseIndex(Merkel[38],8,8)
PhrasePosTag(What[38],WP)
PhrasePosTag(Is[38],VBZ)
PhrasePosTag(The[38],DT)
PhrasePosTag(Birth[38],NN)
PhrasePosTag(Name[38],NN)
PhrasePosTag(Of[38],IN)
PhrasePosTag(Angela[38],NNP)
PhrasePosTag(Merkel[38],NNP)
PhraseDepTag(Merkel[38],What[38],root)
PhraseDepTag(What[38],Is[38],cop)
PhraseDepTag(What[38],Name[38],nsubj)
PhraseDepTag(Name[38],The[38],det)
PhraseDepTag(Name[38],Birth[38],compound)
PhraseDepTag(Name[38],Merkel[38],nmod:of)
PhraseDepTag(Merkel[38],Of[38],case)
PhraseDepTag(Merkel[38],Angela[38],compound)
//[(('http://dbpedia.org/resource/', 'Angela_Merkel'), ('http://dbpedia.org/property/', 'birthName'), SparqlVar('string'))]

ResourceType(Dbr_Angela_Merkel[38],Entity)
0.63 PriorMatchScore(Dbr_Angela_Merkel[38],Angela[38])

0.63 PriorMatchScore(Dbr_Angela_Merkel[38],Merkel[38])


ResourceType(Birthname[38],Class)
0.57 PriorMatchScore(Birthname[38],Birth[38])

0.61 PriorMatchScore(Birthname[38],Name[38])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Angela_Merkel dbp:birthName ?string . }


//Give me all Methodist politicians. 
//[u'Give', u'me', u'all', u'Methodist', u'politicians', u'.']
PhraseIndex(Give[39],1,1)
PhraseIndex(Me[39],2,2)
PhraseIndex(All[39],3,3)
PhraseIndex(Methodist[39],4,4)
PhraseIndex(Politicians[39],5,5)
PhrasePosTag(Give[39],VB)
PhrasePosTag(Me[39],PRP)
PhrasePosTag(All[39],DT)
PhrasePosTag(Methodist[39],JJ)
PhrasePosTag(Politicians[39],NNS)
PhraseDepTag(Politicians[39],Give[39],root)
PhraseDepTag(Give[39],Me[39],iobj)
PhraseDepTag(Give[39],Politicians[39],dobj)
PhraseDepTag(Politicians[39],All[39],det)
PhraseDepTag(Politicians[39],Methodist[39],amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Politician')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'religion'), ('http://dbpedia.org/resource/', 'Methodism'))]

ResourceType(Politician[39],Class)
0.95 PriorMatchScore(Politician[39],Politicians[39])


ResourceType(Dbo_Religion[39],Relation)

ResourceType(Dbr_Methodism[39],Entity)
0.88 PriorMatchScore(Dbr_Methodism[39],Methodist[39])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Politician . ?uri dbo:religion res:Methodism . }


//How often did Jane Fonda marry? 
//[u'How', u'often', u'did', u'Jane', u'Fonda', u'marry', u'?']
PhraseIndex(How[40],1,1)
PhraseIndex(Often[40],2,2)
PhraseIndex(Did[40],3,3)
PhraseIndex(Jane[40],4,4)
PhraseIndex(Fonda[40],5,5)
PhraseIndex(Marry[40],6,6)
PhrasePosTag(How[40],WRB)
PhrasePosTag(Often[40],RB)
PhrasePosTag(Did[40],VBD)
PhrasePosTag(Jane[40],NNP)
PhrasePosTag(Fonda[40],NNP)
PhrasePosTag(Marry[40],VB)
PhraseDepTag(Marry[40],Marry[40],root)
PhraseDepTag(Often[40],How[40],advmod)
PhraseDepTag(Fonda[40],Jane[40],compound)
PhraseDepTag(Marry[40],Often[40],advmod)
PhraseDepTag(Marry[40],Did[40],aux)
PhraseDepTag(Marry[40],Fonda[40],nsubj)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'type'), ('http://dbpedia.org/resource/', 'Nonprofit_organization')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'type'), ('http://dbpedia.org/resource/', 'Nonprofit_organization'))]

ResourceType(Dbo_Type[41],Relation)

ResourceType(Dbr_Nonprofit_Organization[41],Entity)

ResourceType(Dbo_Type[41],Relation)

ResourceType(Dbr_Nonprofit_Organization[41],Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:type res:Nonprofit_organization . { ?uri dbo:locationCountry res:Australia . } UNION { ?uri dbo:location ?x . ?x dbo:country res:Australia . } }


PhraseIndex(In[42],1,1)
PhraseIndex(Which[42],2,2)
PhraseIndex(Military[42],3,3)
PhraseIndex(Conflicts[42],4,4)
PhraseIndex(Did[42],5,5)
PhraseIndex(Lawrence[42],6,6)
PhraseIndex(Of[42],7,7)
PhraseIndex(Arabia[42],8,8)
PhraseIndex(Participate[42],9,9)

//[u'In', u'Which', u'Military', u'Conflicts', u'Did', u'Lawrence', u'Of', u'Arabia', u'Participate']
//In which military conflicts did Lawrence of Arabia participate?

//La ligne est isolée 
PhrasePosTag(In[42],IN)
PhrasePosTag(Which[42],WDT)
PhrasePosTag(Military[42],JJ)
PhrasePosTag(Conflicts[42],NNS)
PhrasePosTag(Did[42],VBD)
PhrasePosTag(Lawrence[42],NNP)
PhrasePosTag(Of[42],IN)
PhrasePosTag(Arabia[42],NNP)
PhrasePosTag(Participate[42],VB)
PhraseDepTag(Participate[42],Participate[42],root)
PhraseDepTag(Conflicts[42],In[42],case)
PhraseDepTag(Conflicts[42],Which[42],det)
PhraseDepTag(Conflicts[42],Military[42],amod)
PhraseDepTag(Lawrence[42],Arabia[42],nmod:of)
PhraseDepTag(Arabia[42],Of[42],case)
PhraseDepTag(Participate[42],Conflicts[42],nmod:in)
PhraseDepTag(Participate[42],Did[42],aux)
PhraseDepTag(Participate[42],Lawrence[42],nsubj)
//[(('http://dbpedia.org/resource/', 'T._E._Lawrence'), ('http://dbpedia.org/ontology/', 'battle'), SparqlVar('uri'))]

ResourceType(Dbr_T._E._Lawrence[42],Entity)
0.72 PriorMatchScore(Dbr_T._E._Lawrence[42],Lawrence[42])


ResourceType(Dbo_Battle[42],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:T._E._Lawrence dbo:battle ?uri . }


//Who developed Minecraft? 
//[u'Who', u'developed', u'Minecraft', u'?']
PhraseIndex(Who[43],1,1)
PhraseIndex(Developed[43],2,2)
PhraseIndex(Minecraft[43],3,3)
PhrasePosTag(Who[43],WP)
PhrasePosTag(Developed[43],VBD)
PhrasePosTag(Minecraft[43],NNP)
PhraseDepTag(Minecraft[43],Developed[43],root)
PhraseDepTag(Developed[43],Who[43],nsubj)
PhraseDepTag(Developed[43],Minecraft[43],dobj)
//[(('http://dbpedia.org/resource/', 'Minecraft'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('uri'))]

ResourceType(Dbr_Minecraft[43],Entity)
1.0 PriorMatchScore(Dbr_Minecraft[43],Minecraft[43])


ResourceType(Dbo_Developer[43],Relation)
0.77 PriorMatchScore(Dbo_Developer[43],Developed[43])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Minecraft dbo:developer ?uri . }


//What is the melting point of copper? 
//[u'What', u'is', u'the', u'melting', u'point', u'of', u'copper', u'?']
PhraseIndex(What[44],1,1)
PhraseIndex(Is[44],2,2)
PhraseIndex(The[44],3,3)
PhraseIndex(Melting[44],4,4)
PhraseIndex(Point[44],5,5)
PhraseIndex(Of[44],6,6)
PhraseIndex(Copper[44],7,7)
PhrasePosTag(What[44],WP)
PhrasePosTag(Is[44],VBZ)
PhrasePosTag(The[44],DT)
PhrasePosTag(Melting[44],JJ)
PhrasePosTag(Point[44],NN)
PhrasePosTag(Of[44],IN)
PhrasePosTag(Copper[44],NN)
PhraseDepTag(Copper[44],What[44],root)
PhraseDepTag(What[44],Is[44],cop)
PhraseDepTag(What[44],Point[44],nsubj)
PhraseDepTag(Point[44],The[44],det)
PhraseDepTag(Point[44],Melting[44],amod)
PhraseDepTag(Point[44],Copper[44],nmod:of)
PhraseDepTag(Copper[44],Of[44],case)
//Give me all sister cities of Brno. 
//[u'Give', u'me', u'all', u'sister', u'cities', u'of', u'Brno', u'.']
PhraseIndex(Give[45],1,1)
PhraseIndex(Me[45],2,2)
PhraseIndex(All[45],3,3)
PhraseIndex(Sister[45],4,4)
PhraseIndex(Cities[45],5,5)
PhraseIndex(Of[45],6,6)
PhraseIndex(Brno[45],7,7)
PhrasePosTag(Give[45],VB)
PhrasePosTag(Me[45],PRP)
PhrasePosTag(All[45],DT)
PhrasePosTag(Sister[45],NN)
PhrasePosTag(Cities[45],NNS)
PhrasePosTag(Of[45],IN)
PhrasePosTag(Brno[45],NNP)
PhraseDepTag(Brno[45],Give[45],root)
PhraseDepTag(Give[45],Me[45],iobj)
PhraseDepTag(Give[45],Cities[45],dobj)
PhraseDepTag(Cities[45],All[45],det)
PhraseDepTag(Cities[45],Sister[45],compound)
PhraseDepTag(Cities[45],Brno[45],nmod:of)
PhraseDepTag(Brno[45],Of[45],case)
//How many inhabitants does Maribor have? 
//[u'How', u'many', u'inhabitants', u'does', u'Maribor', u'have', u'?']
PhraseIndex(How[46],1,1)
PhraseIndex(Many[46],2,2)
PhraseIndex(Inhabitants[46],3,3)
PhraseIndex(Does[46],4,4)
PhraseIndex(Maribor[46],5,5)
PhraseIndex(Have[46],6,6)
PhrasePosTag(How[46],WRB)
PhrasePosTag(Many[46],JJ)
PhrasePosTag(Inhabitants[46],NNS)
PhrasePosTag(Does[46],VBZ)
PhrasePosTag(Maribor[46],NNP)
PhrasePosTag(Have[46],VB)
PhraseDepTag(Have[46],Have[46],root)
PhraseDepTag(Many[46],How[46],advmod)
PhraseDepTag(Inhabitants[46],Many[46],amod)
PhraseDepTag(Have[46],Inhabitants[46],dobj)
PhraseDepTag(Have[46],Does[46],aux)
PhraseDepTag(Have[46],Maribor[46],nsubj)
//[(('http://dbpedia.org/resource/', 'Maribor'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('num'))]

ResourceType(Dbr_Maribor[46],Entity)
1.0 PriorMatchScore(Dbr_Maribor[46],Maribor[46])


ResourceType(Dbo_Populationtotal[46],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Maribor dbo:populationTotal ?num . }


//Give me all companies in Munich. 
//[u'Give', u'me', u'all', u'companies', u'in', u'Munich', u'.']
PhraseIndex(Give[47],1,1)
PhraseIndex(Me[47],2,2)
PhraseIndex(All[47],3,3)
PhraseIndex(Companies[47],4,4)
PhraseIndex(In[47],5,5)
PhraseIndex(Munich[47],6,6)
PhrasePosTag(Give[47],VB)
PhrasePosTag(Me[47],PRP)
PhrasePosTag(All[47],DT)
PhrasePosTag(Companies[47],NNS)
PhrasePosTag(In[47],IN)
PhrasePosTag(Munich[47],NNP)
PhraseDepTag(Munich[47],Give[47],root)
PhraseDepTag(Give[47],Me[47],iobj)
PhraseDepTag(Give[47],Companies[47],dobj)
PhraseDepTag(Companies[47],All[47],det)
PhraseDepTag(Companies[47],Munich[47],nmod:in)
PhraseDepTag(Munich[47],In[47],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company'))]

ResourceType(Company[47],Class)
0.75 PriorMatchScore(Company[47],Companies[47])


ResourceType(Company[47],Class)
0.75 PriorMatchScore(Company[47],Companies[47])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company . { ?uri dbo:location res:Munich . } UNION { ?uri dbo:headquarter res:Munich . } UNION { ?uri dbo:locationCity res:Munich . } }


//How tall is Claudia Schiffer? 
//[u'How', u'tall', u'is', u'Claudia', u'Schiffer', u'?']
PhraseIndex(How[48],1,1)
PhraseIndex(Tall[48],2,2)
PhraseIndex(Is[48],3,3)
PhraseIndex(Claudia[48],4,4)
PhraseIndex(Schiffer[48],5,5)
PhrasePosTag(How[48],WRB)
PhrasePosTag(Tall[48],JJ)
PhrasePosTag(Is[48],VBZ)
PhrasePosTag(Claudia[48],NNP)
PhrasePosTag(Schiffer[48],NNP)
PhraseDepTag(Schiffer[48],Is[48],root)
PhraseDepTag(Tall[48],How[48],advmod)
PhraseDepTag(Is[48],Tall[48],dep)
PhraseDepTag(Is[48],Schiffer[48],nsubj)
PhraseDepTag(Schiffer[48],Claudia[48],compound)
//[(('http://dbpedia.org/resource/', 'Claudia_Schiffer'), ('http://dbpedia.org/ontology/', 'height'), SparqlVar('height'))]

ResourceType(Dbr_Claudia_Schiffer[48],Entity)
0.60 PriorMatchScore(Dbr_Claudia_Schiffer[48],Claudia[48])

0.66 PriorMatchScore(Dbr_Claudia_Schiffer[48],Schiffer[48])


ResourceType(Dbo_Height[48],Relation)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?height WHERE { res:Claudia_Schiffer dbo:height ?height . }


//List all games by GMT. 
//[u'List', u'all', u'games', u'by', u'GMT', u'.']
PhraseIndex(List[49],1,1)
PhraseIndex(All[49],2,2)
PhraseIndex(Games[49],3,3)
PhraseIndex(By[49],4,4)
PhraseIndex(Gmt[49],5,5)
PhrasePosTag(List[49],VB)
PhrasePosTag(All[49],DT)
PhrasePosTag(Games[49],NNS)
PhrasePosTag(By[49],IN)
PhrasePosTag(Gmt[49],NNP)
PhraseDepTag(Gmt[49],List[49],root)
PhraseDepTag(List[49],Games[49],dobj)
PhraseDepTag(List[49],Gmt[49],nmod:by)
PhraseDepTag(Games[49],All[49],det)
PhraseDepTag(Gmt[49],By[49],case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'publisher'), ('http://dbpedia.org/resource/', 'GMT_Games'))]

ResourceType(Dbo_Publisher[49],Relation)

ResourceType(Dbr_Gmt_Games[49],Entity)
0.71 PriorMatchScore(Dbr_Gmt_Games[49],Games[49])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:publisher res:GMT_Games . }


//Who founded Intel? 
//[u'Who', u'founded', u'Intel', u'?']
PhraseIndex(Who[50],1,1)
PhraseIndex(Founded[50],2,2)
PhraseIndex(Intel[50],3,3)
PhrasePosTag(Who[50],WP)
PhrasePosTag(Founded[50],VBD)
PhrasePosTag(Intel[50],NNP)
PhraseDepTag(Intel[50],Founded[50],root)
PhraseDepTag(Founded[50],Who[50],nsubj)
PhraseDepTag(Founded[50],Intel[50],dobj)
//[(('http://dbpedia.org/resource/', 'Intel'), ('http://dbpedia.org/ontology/', 'foundedBy'), SparqlVar('uri'))]

ResourceType(Dbr_Intel[50],Entity)
1.0 PriorMatchScore(Dbr_Intel[50],Intel[50])


ResourceType(Dbo_Foundedby[50],Relation)
0.75 PriorMatchScore(Dbo_Foundedby[50],Founded[50])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Intel dbo:foundedBy ?uri . }


//Who is the husband of Amanda Palmer? 
//[u'Who', u'is', u'the', u'husband', u'of', u'Amanda', u'Palmer', u'?']
PhraseIndex(Who[51],1,1)
PhraseIndex(Is[51],2,2)
PhraseIndex(The[51],3,3)
PhraseIndex(Husband[51],4,4)
PhraseIndex(Of[51],5,5)
PhraseIndex(Amanda[51],6,6)
PhraseIndex(Palmer[51],7,7)
PhrasePosTag(Who[51],WP)
PhrasePosTag(Is[51],VBZ)
PhrasePosTag(The[51],DT)
PhrasePosTag(Husband[51],NN)
PhrasePosTag(Of[51],IN)
PhrasePosTag(Amanda[51],NNP)
PhrasePosTag(Palmer[51],NNP)
PhraseDepTag(Palmer[51],Who[51],root)
PhraseDepTag(Who[51],Is[51],cop)
PhraseDepTag(Who[51],Husband[51],nsubj)
PhraseDepTag(Husband[51],The[51],det)
PhraseDepTag(Husband[51],Palmer[51],nmod:of)
PhraseDepTag(Palmer[51],Of[51],case)
PhraseDepTag(Palmer[51],Amanda[51],compound)
//[(('http://dbpedia.org/resource/', 'Amanda_Palmer'), ('http://dbpedia.org/property/', 'spouse'), SparqlVar('uri'))]

ResourceType(Dbr_Amanda_Palmer[51],Entity)
0.63 PriorMatchScore(Dbr_Amanda_Palmer[51],Amanda[51])

0.63 PriorMatchScore(Dbr_Amanda_Palmer[51],Palmer[51])


ResourceType(Spouse[51],Class)
//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Amanda_Palmer dbp:spouse ?uri . }


//Give me all breeds of the German Shepherd dog. 
//[u'Give', u'me', u'all', u'breeds', u'of', u'the', u'German', u'Shepherd', u'dog', u'.']
PhraseIndex(Give[52],1,1)
PhraseIndex(Me[52],2,2)
PhraseIndex(All[52],3,3)
PhraseIndex(Breeds[52],4,4)
PhraseIndex(Of[52],5,5)
PhraseIndex(The[52],6,6)
PhraseIndex(German[52],7,7)
PhraseIndex(Shepherd[52],8,8)
PhraseIndex(Dog[52],9,9)
PhrasePosTag(Give[52],VB)
PhrasePosTag(Me[52],PRP)
PhrasePosTag(All[52],DT)
PhrasePosTag(Breeds[52],NNS)
PhrasePosTag(Of[52],IN)
PhrasePosTag(The[52],DT)
PhrasePosTag(German[52],JJ)
PhrasePosTag(Shepherd[52],NNP)
PhrasePosTag(Dog[52],NN)
PhraseDepTag(Dog[52],Give[52],root)
PhraseDepTag(Give[52],Me[52],iobj)
PhraseDepTag(Give[52],Breeds[52],dobj)
PhraseDepTag(Breeds[52],All[52],det)
PhraseDepTag(Breeds[52],Dog[52],nmod:of)
PhraseDepTag(Dog[52],Of[52],case)
PhraseDepTag(Dog[52],The[52],det)
PhraseDepTag(Dog[52],German[52],amod)
PhraseDepTag(Dog[52],Shepherd[52],compound)
//[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'breed'), ('http://dbpedia.org/resource/', 'German_Shepherd'))]

ResourceType(Breed[52],Class)
0.72 PriorMatchScore(Breed[52],Breeds[52])


ResourceType(Dbr_German_Shepherd[52],Entity)
0.57 PriorMatchScore(Dbr_German_Shepherd[52],German[52])

0.69 PriorMatchScore(Dbr_German_Shepherd[52],Shepherd[52])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbp:breed res:German_Shepherd . }


//Which cities does the Weser flow through? 
//[u'Which', u'cities', u'does', u'the', u'Weser', u'flow', u'through', u'?']
PhraseIndex(Which[53],1,1)
PhraseIndex(Cities[53],2,2)
PhraseIndex(Does[53],3,3)
PhraseIndex(The[53],4,4)
PhraseIndex(Weser[53],5,5)
PhraseIndex(Flow[53],6,6)
PhraseIndex(Through[53],7,7)
PhrasePosTag(Which[53],WDT)
PhrasePosTag(Cities[53],NNS)
PhrasePosTag(Does[53],VBZ)
PhrasePosTag(The[53],DT)
PhrasePosTag(Weser[53],NNP)
PhrasePosTag(Flow[53],NN)
PhrasePosTag(Through[53],IN)
PhraseDepTag(Through[53],Does[53],root)
PhraseDepTag(Cities[53],Which[53],det)
PhraseDepTag(Cities[53],Through[53],case)
PhraseDepTag(Does[53],Cities[53],nmod:through)
PhraseDepTag(Does[53],Flow[53],dobj)
PhraseDepTag(Flow[53],The[53],det)
PhraseDepTag(Flow[53],Weser[53],compound)
//[(('http://dbpedia.org/resource/', 'Weser'), ('http://dbpedia.org/ontology/', 'city'), SparqlVar('uri'))]

ResourceType(Dbr_Weser[53],Entity)
1.0 PriorMatchScore(Dbr_Weser[53],Weser[53])


ResourceType(Dbo_City[53],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Weser dbo:city ?uri . }


//Which countries are connected by the Rhine? 
//[u'Which', u'countries', u'are', u'connected', u'by', u'the', u'Rhine', u'?']
PhraseIndex(Which[54],1,1)
PhraseIndex(Countries[54],2,2)
PhraseIndex(Are[54],3,3)
PhraseIndex(Connected[54],4,4)
PhraseIndex(By[54],5,5)
PhraseIndex(The[54],6,6)
PhraseIndex(Rhine[54],7,7)
PhrasePosTag(Which[54],WDT)
PhrasePosTag(Countries[54],NNS)
PhrasePosTag(Are[54],VBP)
PhrasePosTag(Connected[54],VBN)
PhrasePosTag(By[54],IN)
PhrasePosTag(The[54],DT)
PhrasePosTag(Rhine[54],NNP)
PhraseDepTag(Rhine[54],Connected[54],root)
PhraseDepTag(Countries[54],Which[54],det)
PhraseDepTag(Connected[54],Countries[54],nsubjpass)
PhraseDepTag(Connected[54],Are[54],auxpass)
PhraseDepTag(Connected[54],Rhine[54],nmod:agent)
PhraseDepTag(Rhine[54],By[54],case)
PhraseDepTag(Rhine[54],The[54],det)
//[(('http://dbpedia.org/resource/', 'Rhine'), ('http://dbpedia.org/property/', 'country'), SparqlVar('string')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('uri'), ('http://www.w3.org/2000/01/rdf-schema#', 'label'), SparqlVar('string'))]

ResourceType(Dbr_Rhine[54],Entity)
1.0 PriorMatchScore(Dbr_Rhine[54],Rhine[54])


ResourceType(Country[54],Class)
0.62 PriorMatchScore(Country[54],Countries[54])


ResourceType(Country[54],Class)
0.75 PriorMatchScore(Country[54],Countries[54])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Rhine dbp:country ?string . ?uri rdf:type dbo:Country . ?uri rdfs:label ?string . }


//Which professional surfers were born in Australia? 
//[u'Which', u'professional', u'surfers', u'were', u'born', u'in', u'Australia', u'?']
PhraseIndex(Which[55],1,1)
PhraseIndex(Professional[55],2,2)
PhraseIndex(Surfers[55],3,3)
PhraseIndex(Were[55],4,4)
PhraseIndex(Born[55],5,5)
PhraseIndex(In[55],6,6)
PhraseIndex(Australia[55],7,7)
PhrasePosTag(Which[55],WDT)
PhrasePosTag(Professional[55],JJ)
PhrasePosTag(Surfers[55],NNS)
PhrasePosTag(Were[55],VBD)
PhrasePosTag(Born[55],VBN)
PhrasePosTag(In[55],IN)
PhrasePosTag(Australia[55],NNP)
PhraseDepTag(Australia[55],Born[55],root)
PhraseDepTag(Surfers[55],Which[55],det)
PhraseDepTag(Surfers[55],Professional[55],amod)
PhraseDepTag(Born[55],Surfers[55],nsubjpass)
PhraseDepTag(Born[55],Were[55],auxpass)
PhraseDepTag(Born[55],Australia[55],nmod:in)
PhraseDepTag(Australia[55],In[55],case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Surfing')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), ('http://dbpedia.org/resource/', 'Australia'))]

ResourceType(Dbo_Occupation[55],Relation)

ResourceType(Dbr_Surfing[55],Entity)
0.57 PriorMatchScore(Dbr_Surfing[55],Surfers[55])


ResourceType(Dbo_Birthplace[55],Relation)

ResourceType(Dbr_Australia[55],Entity)
1.0 PriorMatchScore(Dbr_Australia[55],Australia[55])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Surfing . ?uri dbo:birthPlace res:Australia . }


//What is the average temperature on Hawaii? 
//[u'What', u'is', u'the', u'average', u'temperature', u'on', u'Hawaii', u'?']
PhraseIndex(What[56],1,1)
PhraseIndex(Is[56],2,2)
PhraseIndex(The[56],3,3)
PhraseIndex(Average[56],4,4)
PhraseIndex(Temperature[56],5,5)
PhraseIndex(On[56],6,6)
PhraseIndex(Hawaii[56],7,7)
PhrasePosTag(What[56],WP)
PhrasePosTag(Is[56],VBZ)
PhrasePosTag(The[56],DT)
PhrasePosTag(Average[56],JJ)
PhrasePosTag(Temperature[56],NN)
PhrasePosTag(On[56],IN)
PhrasePosTag(Hawaii[56],NNP)
PhraseDepTag(Hawaii[56],What[56],root)
PhraseDepTag(What[56],Is[56],cop)
PhraseDepTag(What[56],Temperature[56],nsubj)
PhraseDepTag(Temperature[56],The[56],det)
PhraseDepTag(Temperature[56],Average[56],amod)
PhraseDepTag(Temperature[56],Hawaii[56],nmod:on)
PhraseDepTag(Hawaii[56],On[56],case)
//In which UK city are the headquarters of the MI6? 
//[u'In', u'which', u'UK', u'city', u'are', u'the', u'headquarters', u'of', u'the', u'MI6', u'?']
PhraseIndex(In[57],1,1)
PhraseIndex(Which[57],2,2)
PhraseIndex(Uk[57],3,3)
PhraseIndex(City[57],4,4)
PhraseIndex(Are[57],5,5)
PhraseIndex(The[57],6,6)
PhraseIndex(Headquarters[57],7,7)
PhraseIndex(Of[57],8,8)
PhraseIndex(The[57],9,9)
PhraseIndex(Mi6[57],10,10)
PhrasePosTag(In[57],IN)
PhrasePosTag(Which[57],WDT)
PhrasePosTag(Uk[57],NNP)
PhrasePosTag(City[57],NN)
PhrasePosTag(Are[57],VBP)
PhrasePosTag(The[57],DT)
PhrasePosTag(Headquarters[57],NN)
PhrasePosTag(Of[57],IN)
PhrasePosTag(The[57],DT)
PhrasePosTag(Mi6[57],NN)
PhraseDepTag(Mi6[57],Are[57],root)
PhraseDepTag(City[57],In[57],case)
PhraseDepTag(City[57],Which[57],det)
PhraseDepTag(City[57],Uk[57],compound)
PhraseDepTag(Are[57],City[57],nmod:in)
PhraseDepTag(Are[57],Headquarters[57],nsubj)
PhraseDepTag(Headquarters[57],The[57],det)
PhraseDepTag(Headquarters[57],Mi6[57],nmod:of)
PhraseDepTag(Mi6[57],Of[57],case)
PhraseDepTag(Mi6[57],The[57],det)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City')), (('http://dbpedia.org/resource/', 'Secret_Intelligence_Service'), ('http://dbpedia.org/ontology/', 'headquarter'), SparqlVar('uri'))]

ResourceType(City[57],Class)
1.0 PriorMatchScore(City[57],City[57])


ResourceType(Dbr_Secret_Intelligence_Service[57],Entity)

ResourceType(Dbo_Headquarter[57],Relation)
0.86 PriorMatchScore(Dbo_Headquarter[57],Headquarters[57])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City . res:Secret_Intelligence_Service dbo:headquarter ?uri . }


PhraseIndex(Which[58],1,1)
PhraseIndex(Other[58],2,2)
PhraseIndex(Weapons[58],3,3)
PhraseIndex(Did[58],4,4)
PhraseIndex(The[58],5,5)
PhraseIndex(Designer[58],6,6)
PhraseIndex(Of[58],7,7)
PhraseIndex(The[58],8,8)
PhraseIndex(Uzi[58],9,9)
PhraseIndex(Develop[58],10,10)

//[u'Which', u'Other', u'Weapons', u'Did', u'The', u'Designer', u'Of', u'The', u'Uzi', u'Develop']
//Which other weapons did the designer of the Uzi develop?

//La ligne est isolée 
PhrasePosTag(Which[58],WDT)
PhrasePosTag(Other[58],JJ)
PhrasePosTag(Weapons[58],NNS)
PhrasePosTag(Did[58],VBD)
PhrasePosTag(The[58],DT)
PhrasePosTag(Designer[58],NN)
PhrasePosTag(Of[58],IN)
PhrasePosTag(The[58],DT)
PhrasePosTag(Uzi[58],NNP)
PhrasePosTag(Develop[58],VB)
PhraseDepTag(Develop[58],Develop[58],root)
PhraseDepTag(Weapons[58],Which[58],det)
PhraseDepTag(Weapons[58],Other[58],amod)
PhraseDepTag(Designer[58],The[58],det)
PhraseDepTag(Designer[58],Uzi[58],nmod:of)
PhraseDepTag(Uzi[58],Of[58],case)
PhraseDepTag(Uzi[58],The[58],det)
PhraseDepTag(Develop[58],Weapons[58],dobj)
PhraseDepTag(Develop[58],Did[58],aux)
PhraseDepTag(Develop[58],Designer[58],nsubj)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Weapon')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Uzi'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Weapon')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Uzi'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('x'))]

ResourceType(Weapon[58],Class)
0.92 PriorMatchScore(Weapon[58],Weapons[58])


ResourceType(Designer[58],Class)
0.87 PriorMatchScore(Designer[58],Designer[58])


ResourceType(Dbr_Uzi[58],Entity)
1.0 PriorMatchScore(Dbr_Uzi[58],Uzi[58])


ResourceType(Designer[58],Class)
0.87 PriorMatchScore(Designer[58],Designer[58])


ResourceType(Weapon[58],Class)
0.92 PriorMatchScore(Weapon[58],Weapons[58])


ResourceType(Designer[58],Class)
0.87 PriorMatchScore(Designer[58],Designer[58])


ResourceType(Dbr_Uzi[58],Entity)
1.0 PriorMatchScore(Dbr_Uzi[58],Uzi[58])


ResourceType(Designer[58],Class)
0.87 PriorMatchScore(Designer[58],Designer[58])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon . ?uri dbp:designer ?x . res:Uzi dbp:designer ?x . FILTER (?uri != res:Uzi) }


//Who created Goofy? 
//[u'Who', u'created', u'Goofy', u'?']
PhraseIndex(Who[59],1,1)
PhraseIndex(Created[59],2,2)
PhraseIndex(Goofy[59],3,3)
PhrasePosTag(Who[59],WP)
PhrasePosTag(Created[59],VBD)
PhrasePosTag(Goofy[59],NNP)
PhraseDepTag(Goofy[59],Created[59],root)
PhraseDepTag(Created[59],Who[59],nsubj)
PhraseDepTag(Created[59],Goofy[59],dobj)
//[(('http://dbpedia.org/resource/', 'Goofy'), ('http://dbpedia.org/ontology/', 'creator'), SparqlVar('uri'))]

ResourceType(Dbr_Goofy[59],Entity)
1.0 PriorMatchScore(Dbr_Goofy[59],Goofy[59])


ResourceType(Dbo_Creator[59],Relation)
0.57 PriorMatchScore(Dbo_Creator[59],Created[59])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Goofy dbo:creator ?uri . }


PhraseIndex(Was[60],1,1)
PhraseIndex(The[60],2,2)
PhraseIndex(Cuban[60],3,3)
PhraseIndex(Missile[60],4,4)
PhraseIndex(Crisis[60],5,5)
PhraseIndex(Earlier[60],6,6)
PhraseIndex(Than[60],7,7)
PhraseIndex(The[60],8,8)
PhraseIndex(Bay[60],9,9)
PhraseIndex(Of[60],10,10)
PhraseIndex(Pigs[60],11,11)
PhraseIndex(Invasion[60],12,12)

//[u'Was', u'The', u'Cuban', u'Missile', u'Crisis', u'Earlier', u'Than', u'The', u'Bay', u'Of', u'Pigs', u'Invasion']
//Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?

//La ligne est isolée 
PhrasePosTag(Was[60],VBD)
PhrasePosTag(The[60],DT)
PhrasePosTag(Cuban[60],JJ)
PhrasePosTag(Missile[60],NNP)
PhrasePosTag(Crisis[60],NNP)
PhrasePosTag(Earlier[60],JJR)
PhrasePosTag(Than[60],IN)
PhrasePosTag(The[60],DT)
PhrasePosTag(Bay[60],NNP)
PhrasePosTag(Of[60],IN)
PhrasePosTag(Pigs[60],NNP)
PhrasePosTag(Invasion[60],NNP)
PhraseDepTag(Invasion[60],Earlier[60],root)
PhraseDepTag(Crisis[60],The[60],det)
PhraseDepTag(Crisis[60],Cuban[60],amod)
PhraseDepTag(Crisis[60],Missile[60],compound)
PhraseDepTag(Earlier[60],Was[60],cop)
PhraseDepTag(Earlier[60],Crisis[60],nsubj)
PhraseDepTag(Earlier[60],Bay[60],nmod:than)
PhraseDepTag(Bay[60],Than[60],case)
PhraseDepTag(Bay[60],The[60],det)
PhraseDepTag(Bay[60],Invasion[60],nmod:of)
PhraseDepTag(Invasion[60],Of[60],case)
PhraseDepTag(Invasion[60],Pigs[60],compound)
//[(('http://dbpedia.org/resource/', 'Cuban_missile_crisis'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Bay_of_Pigs_Invasion'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('y')), (('http://dbpedia.org/resource/', 'Cuban_missile_crisis'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Bay_of_Pigs_Invasion'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('y'))]

ResourceType(Dbr_Cuban_Missile_Crisis[60],Entity)

ResourceType(Dbo_Date[60],Relation)

ResourceType(Dbr_Bay_Of_Pigs_Invasion[60],Entity)
0.57 PriorMatchScore(Dbr_Bay_Of_Pigs_Invasion[60],Invasion[60])


ResourceType(Dbo_Date[60],Relation)

ResourceType(Dbr_Cuban_Missile_Crisis[60],Entity)

ResourceType(Dbo_Date[60],Relation)

ResourceType(Dbr_Bay_Of_Pigs_Invasion[60],Entity)
0.57 PriorMatchScore(Dbr_Bay_Of_Pigs_Invasion[60],Invasion[60])


ResourceType(Dbo_Date[60],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Cuban_missile_crisis dbo:date ?x . res:Bay_of_Pigs_Invasion dbo:date ?y . FILTER (?x < ?y) }


//Give me all islands that belong to Japan. 
//[u'Give', u'me', u'all', u'islands', u'that', u'belong', u'to', u'Japan', u'.']
PhraseIndex(Give[61],1,1)
PhraseIndex(Me[61],2,2)
PhraseIndex(All[61],3,3)
PhraseIndex(Islands[61],4,4)
PhraseIndex(That[61],5,5)
PhraseIndex(Belong[61],6,6)
PhraseIndex(To[61],7,7)
PhraseIndex(Japan[61],8,8)
PhrasePosTag(Give[61],VB)
PhrasePosTag(Me[61],PRP)
PhrasePosTag(All[61],DT)
PhrasePosTag(Islands[61],NNS)
PhrasePosTag(That[61],WDT)
PhrasePosTag(Belong[61],VBP)
PhrasePosTag(To[61],TO)
PhrasePosTag(Japan[61],NNP)
PhraseDepTag(Japan[61],Give[61],root)
PhraseDepTag(Give[61],Me[61],iobj)
PhraseDepTag(Give[61],Islands[61],dobj)
PhraseDepTag(Islands[61],All[61],det)
PhraseDepTag(Islands[61],Belong[61],acl:relcl)
PhraseDepTag(Belong[61],That[61],nsubj)
PhraseDepTag(Belong[61],Japan[61],nmod:to)
PhraseDepTag(Japan[61],To[61],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Island')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Japan'))]

ResourceType(Island[61],Class)
0.92 PriorMatchScore(Island[61],Islands[61])


ResourceType(Dbo_Country[61],Relation)

ResourceType(Dbr_Japan[61],Entity)
1.0 PriorMatchScore(Dbr_Japan[61],Japan[61])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Island . ?uri dbo:country res:Japan . }


//Who invented the zipper? 
//[u'Who', u'invented', u'the', u'zipper', u'?']
PhraseIndex(Who[62],1,1)
PhraseIndex(Invented[62],2,2)
PhraseIndex(The[62],3,3)
PhraseIndex(Zipper[62],4,4)
PhrasePosTag(Who[62],WP)
PhrasePosTag(Invented[62],VBD)
PhrasePosTag(The[62],DT)
PhrasePosTag(Zipper[62],NN)
PhraseDepTag(Zipper[62],Invented[62],root)
PhraseDepTag(Invented[62],Who[62],nsubj)
PhraseDepTag(Invented[62],Zipper[62],dobj)
PhraseDepTag(Zipper[62],The[62],det)
//What is the ruling party in Lisbon? 
//[u'What', u'is', u'the', u'ruling', u'party', u'in', u'Lisbon', u'?']
PhraseIndex(What[63],1,1)
PhraseIndex(Is[63],2,2)
PhraseIndex(The[63],3,3)
PhraseIndex(Ruling[63],4,4)
PhraseIndex(Party[63],5,5)
PhraseIndex(In[63],6,6)
PhraseIndex(Lisbon[63],7,7)
PhrasePosTag(What[63],WP)
PhrasePosTag(Is[63],VBZ)
PhrasePosTag(The[63],DT)
PhrasePosTag(Ruling[63],VBG)
PhrasePosTag(Party[63],NN)
PhrasePosTag(In[63],IN)
PhrasePosTag(Lisbon[63],NNP)
PhraseDepTag(Lisbon[63],What[63],root)
PhraseDepTag(What[63],Is[63],cop)
PhraseDepTag(What[63],Party[63],nsubj)
PhraseDepTag(Party[63],The[63],det)
PhraseDepTag(Party[63],Ruling[63],amod)
PhraseDepTag(Party[63],Lisbon[63],nmod:in)
PhraseDepTag(Lisbon[63],In[63],case)
//[(('http://dbpedia.org/resource/', 'Lisbon'), ('http://dbpedia.org/property/', 'leaderParty'), SparqlVar('uri'))]

ResourceType(Dbr_Lisbon[63],Entity)
1.0 PriorMatchScore(Dbr_Lisbon[63],Lisbon[63])


ResourceType(Leaderparty[63],Class)
0.62 PriorMatchScore(Leaderparty[63],Party[63])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Lisbon dbp:leaderParty ?uri . }


//What are the nicknames of San Francisco? 
//[u'What', u'are', u'the', u'nicknames', u'of', u'San', u'Francisco', u'?']
PhraseIndex(What[64],1,1)
PhraseIndex(Are[64],2,2)
PhraseIndex(The[64],3,3)
PhraseIndex(Nicknames[64],4,4)
PhraseIndex(Of[64],5,5)
PhraseIndex(San[64],6,6)
PhraseIndex(Francisco[64],7,7)
PhrasePosTag(What[64],WP)
PhrasePosTag(Are[64],VBP)
PhrasePosTag(The[64],DT)
PhrasePosTag(Nicknames[64],NNS)
PhrasePosTag(Of[64],IN)
PhrasePosTag(San[64],NNP)
PhrasePosTag(Francisco[64],NNP)
PhraseDepTag(Francisco[64],What[64],root)
PhraseDepTag(What[64],Are[64],cop)
PhraseDepTag(What[64],Nicknames[64],nsubj)
PhraseDepTag(Nicknames[64],The[64],det)
PhraseDepTag(Nicknames[64],Francisco[64],nmod:of)
PhraseDepTag(Francisco[64],Of[64],case)
PhraseDepTag(Francisco[64],San[64],compound)
//[(('http://dbpedia.org/resource/', 'San_Francisco'), ('http://dbpedia.org/property/', 'nickname'), SparqlVar('string'))]

ResourceType(Dbr_San_Francisco[64],Entity)
0.81 PriorMatchScore(Dbr_San_Francisco[64],Francisco[64])


ResourceType(Nickname[64],Class)
0.82 PriorMatchScore(Nickname[64],Nicknames[64])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:San_Francisco dbp:nickname ?string . }


//Which Greek goddesses dwelt on Mount Olympus? 
//[u'Which', u'Greek', u'goddesses', u'dwelt', u'on', u'Mount', u'Olympus', u'?']
PhraseIndex(Which[65],1,1)
PhraseIndex(Greek[65],2,2)
PhraseIndex(Goddesses[65],3,3)
PhraseIndex(Dwelt[65],4,4)
PhraseIndex(On[65],5,5)
PhraseIndex(Mount[65],6,6)
PhraseIndex(Olympus[65],7,7)
PhrasePosTag(Which[65],WDT)
PhrasePosTag(Greek[65],JJ)
PhrasePosTag(Goddesses[65],NNS)
PhrasePosTag(Dwelt[65],VBP)
PhrasePosTag(On[65],IN)
PhrasePosTag(Mount[65],NNP)
PhrasePosTag(Olympus[65],NNP)
PhraseDepTag(Olympus[65],Dwelt[65],root)
PhraseDepTag(Goddesses[65],Which[65],det)
PhraseDepTag(Goddesses[65],Greek[65],amod)
PhraseDepTag(Dwelt[65],Goddesses[65],nsubj)
PhraseDepTag(Dwelt[65],Olympus[65],nmod:on)
PhraseDepTag(Olympus[65],On[65],case)
PhraseDepTag(Olympus[65],Mount[65],compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'GreekGoddesses')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'abode'), ('http://dbpedia.org/resource/', 'Mount_Olympus'))]

ResourceType(GreekGoddesses[65],Class)
0.52 PriorMatchScore(GreekGoddesses[65],Greek[65])

0.78 PriorMatchScore(GreekGoddesses[65],Goddesses[65])


ResourceType(Abode[65],Class)

ResourceType(Dbr_Mount_Olympus[65],Entity)
0.55 PriorMatchScore(Dbr_Mount_Olympus[65],Mount[65])

0.7 PriorMatchScore(Dbr_Mount_Olympus[65],Olympus[65])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:GreekGoddesses . ?uri dbp:abode res:Mount_Olympus . }


//When were the Hells Angels founded? 
//[u'When', u'were', u'the', u'Hells', u'Angels', u'founded', u'?']
PhraseIndex(When[66],1,1)
PhraseIndex(Were[66],2,2)
PhraseIndex(The[66],3,3)
PhraseIndex(Hells[66],4,4)
PhraseIndex(Angels[66],5,5)
PhraseIndex(Founded[66],6,6)
PhrasePosTag(When[66],WRB)
PhrasePosTag(Were[66],VBD)
PhrasePosTag(The[66],DT)
PhrasePosTag(Hells[66],NNP)
PhrasePosTag(Angels[66],NNPS)
PhrasePosTag(Founded[66],VBN)
PhraseDepTag(Founded[66],Founded[66],root)
PhraseDepTag(Angels[66],The[66],det)
PhraseDepTag(Angels[66],Hells[66],compound)
PhraseDepTag(Founded[66],When[66],advmod)
PhraseDepTag(Founded[66],Were[66],auxpass)
PhraseDepTag(Founded[66],Angels[66],nsubjpass)
//[(('http://dbpedia.org/resource/', 'Hells_Angels'), ('http://dbpedia.org/property/', 'founded'), SparqlVar('date'))]

ResourceType(Dbr_Hells_Angels[66],Entity)
0.58 PriorMatchScore(Dbr_Hells_Angels[66],Hells[66])

0.66 PriorMatchScore(Dbr_Hells_Angels[66],Angels[66])


ResourceType(Founded[66],Class)
0.85 PriorMatchScore(Founded[66],Founded[66])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Hells_Angels dbp:founded ?date . }


//Give me all Apollo 14 astronauts. 
//[u'Give', u'me', u'all', u'Apollo', u'14', u'astronauts', u'.']
PhraseIndex(Give[67],1,1)
PhraseIndex(Me[67],2,2)
PhraseIndex(All[67],3,3)
PhraseIndex(Apollo[67],4,4)
PhraseIndex(14[67],5,5)
PhraseIndex(Astronauts[67],6,6)
PhrasePosTag(Give[67],VB)
PhrasePosTag(Me[67],PRP)
PhrasePosTag(All[67],DT)
PhrasePosTag(Apollo[67],NNP)
PhrasePosTag(14[67],CD)
PhrasePosTag(Astronauts[67],NNS)
PhraseDepTag(Astronauts[67],Give[67],root)
PhraseDepTag(Give[67],Me[67],iobj)
PhraseDepTag(Give[67],Astronauts[67],dobj)
PhraseDepTag(Astronauts[67],All[67],det)
PhraseDepTag(Astronauts[67],Apollo[67],compound)
PhraseDepTag(Astronauts[67],14[67],nummod)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'mission'), ('http://dbpedia.org/resource/', 'Apollo_14'))]

ResourceType(Dbo_Mission[67],Relation)

ResourceType(Dbr_Apollo_14[67],Entity)
0.8 PriorMatchScore(Dbr_Apollo_14[67],Apollo[67])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 . }


//What is the time zone of Salt Lake City? 
//[u'What', u'is', u'the', u'time', u'zone', u'of', u'Salt', u'Lake', u'City', u'?']
PhraseIndex(What[68],1,1)
PhraseIndex(Is[68],2,2)
PhraseIndex(The[68],3,3)
PhraseIndex(Time[68],4,4)
PhraseIndex(Zone[68],5,5)
PhraseIndex(Of[68],6,6)
PhraseIndex(Salt[68],7,7)
PhraseIndex(Lake[68],8,8)
PhraseIndex(City[68],9,9)
PhrasePosTag(What[68],WP)
PhrasePosTag(Is[68],VBZ)
PhrasePosTag(The[68],DT)
PhrasePosTag(Time[68],NN)
PhrasePosTag(Zone[68],NN)
PhrasePosTag(Of[68],IN)
PhrasePosTag(Salt[68],NNP)
PhrasePosTag(Lake[68],NNP)
PhrasePosTag(City[68],NNP)
PhraseDepTag(City[68],What[68],root)
PhraseDepTag(What[68],Is[68],cop)
PhraseDepTag(What[68],Zone[68],nsubj)
PhraseDepTag(Zone[68],The[68],det)
PhraseDepTag(Zone[68],Time[68],compound)
PhraseDepTag(Zone[68],City[68],nmod:of)
PhraseDepTag(City[68],Of[68],case)
PhraseDepTag(City[68],Salt[68],compound)
PhraseDepTag(City[68],Lake[68],compound)
//[(('http://dbpedia.org/resource/', 'Salt_Lake_City'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('uri'))]

ResourceType(Dbr_Salt_Lake_City[68],Entity)

ResourceType(Timezone[68],Class)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Salt_Lake_City dbp:timezone ?uri . }


PhraseIndex(Which[69],1,1)
PhraseIndex(U.S.[69],2,2)
PhraseIndex(States[69],3,3)
PhraseIndex(Are[69],4,4)
PhraseIndex(In[69],5,5)
PhraseIndex(The[69],6,6)
PhraseIndex(Same[69],7,7)
PhraseIndex(Time[69],8,8)
PhraseIndex(Zone[69],9,9)
PhraseIndex(As[69],10,10)
PhraseIndex(Utah[69],11,11)

//[u'Which', u'U.S.', u'States', u'Are', u'In', u'The', u'Same', u'Time', u'Zone', u'As', u'Utah']
//Which U.S. states are in the same time zone as Utah?

//La ligne est isolée 
PhrasePosTag(Which[69],WDT)
PhrasePosTag(U.S.[69],NNP)
PhrasePosTag(States[69],NNS)
PhrasePosTag(Are[69],VBP)
PhrasePosTag(In[69],IN)
PhrasePosTag(The[69],DT)
PhrasePosTag(Same[69],JJ)
PhrasePosTag(Time[69],NN)
PhrasePosTag(Zone[69],NN)
PhrasePosTag(As[69],IN)
PhrasePosTag(Utah[69],NNP)
PhraseDepTag(Utah[69],Are[69],root)
PhraseDepTag(States[69],Which[69],det)
PhraseDepTag(States[69],U.S.[69],compound)
PhraseDepTag(Are[69],States[69],nsubj)
PhraseDepTag(Are[69],Zone[69],nmod:in)
PhraseDepTag(Zone[69],In[69],case)
PhraseDepTag(Zone[69],The[69],det)
PhraseDepTag(Zone[69],Same[69],amod)
PhraseDepTag(Zone[69],Time[69],compound)
PhraseDepTag(Zone[69],Utah[69],nmod:as)
PhraseDepTag(Utah[69],As[69],case)
//[(('http://dbpedia.org/resource/', 'Utah'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Utah'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'timezone'), SparqlVar('x'))]

ResourceType(Dbr_Utah[69],Entity)
1.0 PriorMatchScore(Dbr_Utah[69],Utah[69])


ResourceType(Timezone[69],Class)

ResourceType(StatesOfTheUnitedStates[69],Class)

ResourceType(Timezone[69],Class)

ResourceType(Dbr_Utah[69],Entity)
1.0 PriorMatchScore(Dbr_Utah[69],Utah[69])


ResourceType(Timezone[69],Class)

ResourceType(StatesOfTheUnitedStates[69],Class)

ResourceType(Timezone[69],Class)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:timezone ?x . FILTER (?uri != res:Utah) }


//Give me the capitals of all countries in Africa. 
//[u'Give', u'me', u'the', u'capitals', u'of', u'all', u'countries', u'in', u'Africa', u'.']
PhraseIndex(Give[70],1,1)
PhraseIndex(Me[70],2,2)
PhraseIndex(The[70],3,3)
PhraseIndex(Capitals[70],4,4)
PhraseIndex(Of[70],5,5)
PhraseIndex(All[70],6,6)
PhraseIndex(Countries[70],7,7)
PhraseIndex(In[70],8,8)
PhraseIndex(Africa[70],9,9)
PhrasePosTag(Give[70],VB)
PhrasePosTag(Me[70],PRP)
PhrasePosTag(The[70],DT)
PhrasePosTag(Capitals[70],NNS)
PhrasePosTag(Of[70],IN)
PhrasePosTag(All[70],DT)
PhrasePosTag(Countries[70],NNS)
PhrasePosTag(In[70],IN)
PhrasePosTag(Africa[70],NNP)
PhraseDepTag(Africa[70],Give[70],root)
PhraseDepTag(Give[70],Me[70],iobj)
PhraseDepTag(Give[70],Capitals[70],dobj)
PhraseDepTag(Capitals[70],The[70],det)
PhraseDepTag(Capitals[70],Countries[70],nmod:of)
PhraseDepTag(Countries[70],Of[70],case)
PhraseDepTag(Countries[70],All[70],det)
PhraseDepTag(Countries[70],Africa[70],nmod:in)
PhraseDepTag(Africa[70],In[70],case)
//[(SparqlVar('states'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'AfricanCountries')), (SparqlVar('states'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('uri'))]

ResourceType(AfricanCountries[70],Class)
0.72 PriorMatchScore(AfricanCountries[70],Countries[70])

0.54 PriorMatchScore(AfricanCountries[70],Africa[70])


ResourceType(Dbo_Capital[70],Relation)
0.8 PriorMatchScore(Dbo_Capital[70],Capitals[70])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?states rdf:type yago:AfricanCountries . ?states dbo:capital ?uri . }


//Give me a list of all lakes in Denmark. 
//[u'Give', u'me', u'a', u'list', u'of', u'all', u'lakes', u'in', u'Denmark', u'.']
PhraseIndex(Give[71],1,1)
PhraseIndex(Me[71],2,2)
PhraseIndex(A[71],3,3)
PhraseIndex(List[71],4,4)
PhraseIndex(Of[71],5,5)
PhraseIndex(All[71],6,6)
PhraseIndex(Lakes[71],7,7)
PhraseIndex(In[71],8,8)
PhraseIndex(Denmark[71],9,9)
PhrasePosTag(Give[71],VB)
PhrasePosTag(Me[71],PRP)
PhrasePosTag(A[71],DT)
PhrasePosTag(List[71],NN)
PhrasePosTag(Of[71],IN)
PhrasePosTag(All[71],DT)
PhrasePosTag(Lakes[71],NNS)
PhrasePosTag(In[71],IN)
PhrasePosTag(Denmark[71],NNP)
PhraseDepTag(Denmark[71],Give[71],root)
PhraseDepTag(Give[71],Me[71],iobj)
PhraseDepTag(Give[71],List[71],dobj)
PhraseDepTag(List[71],A[71],det)
PhraseDepTag(List[71],Lakes[71],nmod:of)
PhraseDepTag(Lakes[71],Of[71],case)
PhraseDepTag(Lakes[71],All[71],det)
PhraseDepTag(Lakes[71],Denmark[71],nmod:in)
PhraseDepTag(Denmark[71],In[71],case)
//[]
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { { ?uri rdf:type dbo:Lake . ?uri dbo:country res:Denmark . } UNION { ?uri rdf:type yago:LakesOfDenmark . } }


//How many space missions have there been? 
//[u'How', u'many', u'space', u'missions', u'have', u'there', u'been', u'?']
PhraseIndex(How[72],1,1)
PhraseIndex(Many[72],2,2)
PhraseIndex(Space[72],3,3)
PhraseIndex(Missions[72],4,4)
PhraseIndex(Have[72],5,5)
PhraseIndex(There[72],6,6)
PhraseIndex(Been[72],7,7)
PhrasePosTag(How[72],WRB)
PhrasePosTag(Many[72],JJ)
PhrasePosTag(Space[72],NN)
PhrasePosTag(Missions[72],NNS)
PhrasePosTag(Have[72],VBP)
PhrasePosTag(There[72],RB)
PhrasePosTag(Been[72],VBN)
PhraseDepTag(Been[72],Been[72],root)
PhraseDepTag(Many[72],How[72],advmod)
PhraseDepTag(Missions[72],Many[72],amod)
PhraseDepTag(Missions[72],Space[72],compound)
PhraseDepTag(Been[72],Missions[72],nsubj)
PhraseDepTag(Been[72],Have[72],aux)
PhraseDepTag(Been[72],There[72],advmod)
//[(('http://dbpedia.org/resource/', 'Aristotle'), ('http://dbpedia.org/ontology/', 'influencedBy'), ('http://dbpedia.org/resource/', 'Socrates'))]

ResourceType(Dbr_Aristotle[73],Entity)

ResourceType(Dbo_Influencedby[73],Relation)

ResourceType(Dbr_Socrates[73],Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Aristotle dbo:influencedBy res:Socrates . }


//Give me all Danish films. 
//[u'Give', u'me', u'all', u'Danish', u'films', u'.']
PhraseIndex(Give[74],1,1)
PhraseIndex(Me[74],2,2)
PhraseIndex(All[74],3,3)
PhraseIndex(Danish[74],4,4)
PhraseIndex(Films[74],5,5)
PhrasePosTag(Give[74],VB)
PhrasePosTag(Me[74],PRP)
PhrasePosTag(All[74],DT)
PhrasePosTag(Danish[74],JJ)
PhrasePosTag(Films[74],NNS)
PhraseDepTag(Films[74],Give[74],root)
PhraseDepTag(Give[74],Me[74],iobj)
PhraseDepTag(Give[74],Films[74],dobj)
PhraseDepTag(Films[74],All[74],det)
PhraseDepTag(Films[74],Danish[74],amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Denmark'))]

ResourceType(Film[74],Class)
0.88 PriorMatchScore(Film[74],Films[74])


ResourceType(Dbo_Country[74],Relation)

ResourceType(Dbr_Denmark[74],Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:country res:Denmark . }


//Give me all launch pads operated by NASA. 
//[u'Give', u'me', u'all', u'launch', u'pads', u'operated', u'by', u'NASA', u'.']
PhraseIndex(Give[75],1,1)
PhraseIndex(Me[75],2,2)
PhraseIndex(All[75],3,3)
PhraseIndex(Launch[75],4,4)
PhraseIndex(Pads[75],5,5)
PhraseIndex(Operated[75],6,6)
PhraseIndex(By[75],7,7)
PhraseIndex(Nasa[75],8,8)
PhrasePosTag(Give[75],VB)
PhrasePosTag(Me[75],PRP)
PhrasePosTag(All[75],DT)
PhrasePosTag(Launch[75],NN)
PhrasePosTag(Pads[75],NNS)
PhrasePosTag(Operated[75],VBN)
PhrasePosTag(By[75],IN)
PhrasePosTag(Nasa[75],NNP)
PhraseDepTag(Nasa[75],Give[75],root)
PhraseDepTag(Give[75],Me[75],iobj)
PhraseDepTag(Give[75],Pads[75],dobj)
PhraseDepTag(Pads[75],All[75],det)
PhraseDepTag(Pads[75],Launch[75],compound)
PhraseDepTag(Pads[75],Operated[75],acl)
PhraseDepTag(Operated[75],Nasa[75],nmod:by)
PhraseDepTag(Nasa[75],By[75],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'LaunchPad')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'operator'), ('http://dbpedia.org/resource/', 'NASA'))]

ResourceType(LaunchPad[75],Class)
0.8 PriorMatchScore(LaunchPad[75],Launch[75])


ResourceType(Dbo_Operator[75],Relation)
0.62 PriorMatchScore(Dbo_Operator[75],Operated[75])


ResourceType(Dbr_Nasa[75],Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:LaunchPad . ?uri dbo:operator res:NASA . }


//Which instruments does Cat Stevens play? 
//[u'Which', u'instruments', u'does', u'Cat', u'Stevens', u'play', u'?']
PhraseIndex(Which[76],1,1)
PhraseIndex(Instruments[76],2,2)
PhraseIndex(Does[76],3,3)
PhraseIndex(Cat[76],4,4)
PhraseIndex(Stevens[76],5,5)
PhraseIndex(Play[76],6,6)
PhrasePosTag(Which[76],WDT)
PhrasePosTag(Instruments[76],NNS)
PhrasePosTag(Does[76],VBZ)
PhrasePosTag(Cat[76],NNP)
PhrasePosTag(Stevens[76],NNP)
PhrasePosTag(Play[76],VB)
PhraseDepTag(Play[76],Play[76],root)
PhraseDepTag(Instruments[76],Which[76],det)
PhraseDepTag(Stevens[76],Cat[76],compound)
PhraseDepTag(Play[76],Instruments[76],dobj)
PhraseDepTag(Play[76],Does[76],aux)
PhraseDepTag(Play[76],Stevens[76],nsubj)
//[(('http://dbpedia.org/resource/', 'Cat_Stevens'), ('http://dbpedia.org/ontology/', 'instrument'), SparqlVar('uri'))]

ResourceType(Dbr_Cat_Stevens[76],Entity)
0.77 PriorMatchScore(Dbr_Cat_Stevens[76],Stevens[76])


ResourceType(Dbo_Instrument[76],Relation)
0.85 PriorMatchScore(Dbo_Instrument[76],Instruments[76])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Cat_Stevens dbo:instrument ?uri . }


//Which ships were called after Benjamin Franklin? 
//[u'Which', u'ships', u'were', u'called', u'after', u'Benjamin', u'Franklin', u'?']
PhraseIndex(Which[77],1,1)
PhraseIndex(Ships[77],2,2)
PhraseIndex(Were[77],3,3)
PhraseIndex(Called[77],4,4)
PhraseIndex(After[77],5,5)
PhraseIndex(Benjamin[77],6,6)
PhraseIndex(Franklin[77],7,7)
PhrasePosTag(Which[77],WDT)
PhrasePosTag(Ships[77],NNS)
PhrasePosTag(Were[77],VBD)
PhrasePosTag(Called[77],VBN)
PhrasePosTag(After[77],IN)
PhrasePosTag(Benjamin[77],NNP)
PhrasePosTag(Franklin[77],NNP)
PhraseDepTag(Franklin[77],Called[77],root)
PhraseDepTag(Ships[77],Which[77],det)
PhraseDepTag(Called[77],Ships[77],nsubjpass)
PhraseDepTag(Called[77],Were[77],auxpass)
PhraseDepTag(Called[77],Franklin[77],nmod:after)
PhraseDepTag(Franklin[77],After[77],case)
PhraseDepTag(Franklin[77],Benjamin[77],compound)
//[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'shipNamesake'), ('http://dbpedia.org/resource/', 'Benjamin_Franklin'))]

ResourceType(Shipnamesake[77],Class)

ResourceType(Dbr_Benjamin_Franklin[77],Entity)
0.64 PriorMatchScore(Dbr_Benjamin_Franklin[77],Benjamin[77])

0.64 PriorMatchScore(Dbr_Benjamin_Franklin[77],Franklin[77])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri dbp:shipNamesake res:Benjamin_Franklin . }


//Who are the parents of the wife of Juan Carlos I? 
//[u'Who', u'are', u'the', u'parents', u'of', u'the', u'wife', u'of', u'Juan', u'Carlos', u'I', u'?']
PhraseIndex(Who[78],1,1)
PhraseIndex(Are[78],2,2)
PhraseIndex(The[78],3,3)
PhraseIndex(Parents[78],4,4)
PhraseIndex(Of[78],5,5)
PhraseIndex(The[78],6,6)
PhraseIndex(Wife[78],7,7)
PhraseIndex(Of[78],8,8)
PhraseIndex(Juan[78],9,9)
PhraseIndex(Carlos[78],10,10)
PhraseIndex(I[78],11,11)
PhrasePosTag(Who[78],WP)
PhrasePosTag(Are[78],VBP)
PhrasePosTag(The[78],DT)
PhrasePosTag(Parents[78],NNS)
PhrasePosTag(Of[78],IN)
PhrasePosTag(The[78],DT)
PhrasePosTag(Wife[78],NN)
PhrasePosTag(Of[78],IN)
PhrasePosTag(Juan[78],NNP)
PhrasePosTag(Carlos[78],NNP)
PhrasePosTag(I[78],PRP)
PhraseDepTag(I[78],Who[78],root)
PhraseDepTag(Who[78],Are[78],cop)
PhraseDepTag(Who[78],Parents[78],nsubj)
PhraseDepTag(Who[78],I[78],nsubj)
PhraseDepTag(Parents[78],The[78],det)
PhraseDepTag(Parents[78],Wife[78],nmod:of)
PhraseDepTag(Wife[78],Of[78],case)
PhraseDepTag(Wife[78],The[78],det)
PhraseDepTag(Wife[78],Carlos[78],nmod:of)
PhraseDepTag(Carlos[78],Of[78],case)
PhraseDepTag(Carlos[78],Juan[78],compound)
//[(('http://dbpedia.org/resource/', 'Juan_Carlos_I_of_Spain'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'parent'), SparqlVar('uri'))]

ResourceType(Dbr_Juan_Carlos_I_Of_Spain[78],Entity)

ResourceType(Dbo_Spouse[78],Relation)

ResourceType(Dbo_Parent[78],Relation)
0.76 PriorMatchScore(Dbo_Parent[78],Parents[78])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Juan_Carlos_I_of_Spain dbo:spouse ?x . ?x dbo:parent ?uri . }


//How many employees does Google have? 
//[u'How', u'many', u'employees', u'does', u'Google', u'have', u'?']
PhraseIndex(How[79],1,1)
PhraseIndex(Many[79],2,2)
PhraseIndex(Employees[79],3,3)
PhraseIndex(Does[79],4,4)
PhraseIndex(Google[79],5,5)
PhraseIndex(Have[79],6,6)
PhrasePosTag(How[79],WRB)
PhrasePosTag(Many[79],JJ)
PhrasePosTag(Employees[79],NNS)
PhrasePosTag(Does[79],VBZ)
PhrasePosTag(Google[79],NNP)
PhrasePosTag(Have[79],VB)
PhraseDepTag(Have[79],Have[79],root)
PhraseDepTag(Many[79],How[79],advmod)
PhraseDepTag(Employees[79],Many[79],amod)
PhraseDepTag(Have[79],Employees[79],dobj)
PhraseDepTag(Have[79],Does[79],aux)
PhraseDepTag(Have[79],Google[79],nsubj)
//[(('http://dbpedia.org/resource/', 'Google'), ('http://dbpedia.org/ontology/', 'numberOfEmployees'), SparqlVar('num'))]

ResourceType(Dbr_Google[79],Entity)
1.0 PriorMatchScore(Dbr_Google[79],Google[79])


ResourceType(Dbo_Numberofemployees[79],Relation)
0.69 PriorMatchScore(Dbo_Numberofemployees[79],Employees[79])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?num WHERE { res:Google dbo:numberOfEmployees ?num . }


//Did Tesla win a nobel prize in physics? 
//[u'Did', u'Tesla', u'win', u'a', u'nobel', u'prize', u'in', u'physics', u'?']
PhraseIndex(Did[80],1,1)
PhraseIndex(Tesla[80],2,2)
PhraseIndex(Win[80],3,3)
PhraseIndex(A[80],4,4)
PhraseIndex(Nobel[80],5,5)
PhraseIndex(Prize[80],6,6)
PhraseIndex(In[80],7,7)
PhraseIndex(Physics[80],8,8)
PhrasePosTag(Did[80],VBD)
PhrasePosTag(Tesla[80],NNP)
PhrasePosTag(Win[80],VB)
PhrasePosTag(A[80],DT)
PhrasePosTag(Nobel[80],JJ)
PhrasePosTag(Prize[80],NN)
PhrasePosTag(In[80],IN)
PhrasePosTag(Physics[80],NNS)
PhraseDepTag(Physics[80],Win[80],root)
PhraseDepTag(Win[80],Did[80],aux)
PhraseDepTag(Win[80],Tesla[80],nsubj)
PhraseDepTag(Win[80],Prize[80],dobj)
PhraseDepTag(Win[80],Physics[80],nmod:in)
PhraseDepTag(Prize[80],A[80],det)
PhraseDepTag(Prize[80],Nobel[80],amod)
PhraseDepTag(Physics[80],In[80],case)
//[(('http://dbpedia.org/resource/', 'Nikola_Tesla'), ('http://dbpedia.org/ontology/', 'award'), ('http://dbpedia.org/resource/', 'Nobel_Prize_in_Physics'))]

ResourceType(Dbr_Nikola_Tesla[80],Entity)
0.58 PriorMatchScore(Dbr_Nikola_Tesla[80],Tesla[80])


ResourceType(Dbo_Award[80],Relation)

ResourceType(Dbr_Nobel_Prize_In_Physics[80],Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Nikola_Tesla dbo:award res:Nobel_Prize_in_Physics . }


PhraseIndex(Give[81],1,1)
PhraseIndex(Me[81],2,2)
PhraseIndex(All[81],3,3)
PhraseIndex(Cities[81],4,4)
PhraseIndex(In[81],5,5)
PhraseIndex(New[81],6,6)
PhraseIndex(Jersey[81],7,7)
PhraseIndex(With[81],8,8)
PhraseIndex(More[81],9,9)
PhraseIndex(Than[81],10,10)
PhraseIndex(100000[81],11,11)
PhraseIndex(Inhabitants[81],12,12)

//[u'Give', u'Me', u'All', u'Cities', u'In', u'New', u'Jersey', u'With', u'More', u'Than', u'100000', u'Inhabitants']
//Give me all cities in New Jersey with more than 100000 inhabitants.

//La ligne est isolée 
PhrasePosTag(Give[81],VB)
PhrasePosTag(Me[81],PRP)
PhrasePosTag(All[81],DT)
PhrasePosTag(Cities[81],NNS)
PhrasePosTag(In[81],IN)
PhrasePosTag(New[81],NNP)
PhrasePosTag(Jersey[81],NNP)
PhrasePosTag(With[81],IN)
PhrasePosTag(More[81],JJR)
PhrasePosTag(Than[81],IN)
PhrasePosTag(100000[81],CD)
PhrasePosTag(Inhabitants[81],NNS)
PhraseDepTag(Inhabitants[81],Give[81],root)
PhraseDepTag(Give[81],Me[81],iobj)
PhraseDepTag(Give[81],Cities[81],dobj)
PhraseDepTag(Cities[81],All[81],det)
PhraseDepTag(Cities[81],Jersey[81],nmod:in)
PhraseDepTag(Jersey[81],In[81],case)
PhraseDepTag(Jersey[81],New[81],compound)
PhraseDepTag(Jersey[81],Inhabitants[81],nmod:with)
PhraseDepTag(More[81],Than[81],mwe)
PhraseDepTag(100000[81],More[81],advmod)
PhraseDepTag(Inhabitants[81],With[81],case)
PhraseDepTag(Inhabitants[81],100000[81],nummod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'isPartOf'), ('http://dbpedia.org/resource/', 'New_Jersey')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('inhabitants')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'isPartOf'), ('http://dbpedia.org/resource/', 'New_Jersey')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('inhabitants'))]

ResourceType(City[81],Class)
0.6 PriorMatchScore(City[81],Cities[81])


ResourceType(Dbo_Ispartof[81],Relation)

ResourceType(Dbr_New_Jersey[81],Entity)
0.75 PriorMatchScore(Dbr_New_Jersey[81],Jersey[81])


ResourceType(Dbo_Populationtotal[81],Relation)

ResourceType(City[81],Class)
0.6 PriorMatchScore(City[81],Cities[81])


ResourceType(Dbo_Ispartof[81],Relation)

ResourceType(Dbr_New_Jersey[81],Entity)
0.75 PriorMatchScore(Dbr_New_Jersey[81],Jersey[81])


ResourceType(Dbo_Populationtotal[81],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:City . ?uri dbo:isPartOf res:New_Jersey . ?uri dbo:populationTotal ?inhabitants . FILTER (?inhabitants > 100000) . }


//Is Michelle Obama the wife of Barack Obama? 
//[u'Is', u'Michelle', u'Obama', u'the', u'wife', u'of', u'Barack', u'Obama', u'?']
PhraseIndex(Is[82],1,1)
PhraseIndex(Michelle[82],2,2)
PhraseIndex(Obama[82],3,3)
PhraseIndex(The[82],4,4)
PhraseIndex(Wife[82],5,5)
PhraseIndex(Of[82],6,6)
PhraseIndex(Barack[82],7,7)
PhraseIndex(Obama[82],8,8)
PhrasePosTag(Is[82],VBZ)
PhrasePosTag(Michelle[82],NNP)
PhrasePosTag(Obama[82],NNP)
PhrasePosTag(The[82],DT)
PhrasePosTag(Wife[82],NN)
PhrasePosTag(Of[82],IN)
PhrasePosTag(Barack[82],NNP)
PhrasePosTag(Obama[82],NNP)
PhraseDepTag(Obama[82],Wife[82],root)
PhraseDepTag(Obama[82],Michelle[82],compound)
PhraseDepTag(Wife[82],Is[82],cop)
PhraseDepTag(Wife[82],Obama[82],nsubj)
PhraseDepTag(Wife[82],The[82],det)
PhraseDepTag(Wife[82],Obama[82],nmod:of)
PhraseDepTag(Obama[82],Of[82],case)
PhraseDepTag(Obama[82],Barack[82],compound)
//[(('http://dbpedia.org/resource/', 'Barack_Obama'), ('http://dbpedia.org/ontology/', 'spouse'), ('http://dbpedia.org/resource/', 'Michelle_Obama'))]

ResourceType(Dbr_Barack_Obama[82],Entity)
0.58 PriorMatchScore(Dbr_Barack_Obama[82],Obama[82])

0.66 PriorMatchScore(Dbr_Barack_Obama[82],Barack[82])

0.58 PriorMatchScore(Dbr_Barack_Obama[82],Obama[82])


ResourceType(Dbo_Spouse[82],Relation)

ResourceType(Dbr_Michelle_Obama[82],Entity)
0.72 PriorMatchScore(Dbr_Michelle_Obama[82],Michelle[82])

0.52 PriorMatchScore(Dbr_Michelle_Obama[82],Obama[82])

0.52 PriorMatchScore(Dbr_Michelle_Obama[82],Obama[82])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Barack_Obama dbo:spouse res:Michelle_Obama . }


//When was the Statue of Liberty built? 
//[u'When', u'was', u'the', u'Statue', u'of', u'Liberty', u'built', u'?']
PhraseIndex(When[83],1,1)
PhraseIndex(Was[83],2,2)
PhraseIndex(The[83],3,3)
PhraseIndex(Statue[83],4,4)
PhraseIndex(Of[83],5,5)
PhraseIndex(Liberty[83],6,6)
PhraseIndex(Built[83],7,7)
PhrasePosTag(When[83],WRB)
PhrasePosTag(Was[83],VBD)
PhrasePosTag(The[83],DT)
PhrasePosTag(Statue[83],NNP)
PhrasePosTag(Of[83],IN)
PhrasePosTag(Liberty[83],NNP)
PhrasePosTag(Built[83],VBN)
PhraseDepTag(Built[83],Built[83],root)
PhraseDepTag(Statue[83],The[83],det)
PhraseDepTag(Statue[83],Liberty[83],nmod:of)
PhraseDepTag(Liberty[83],Of[83],case)
PhraseDepTag(Built[83],When[83],advmod)
PhraseDepTag(Built[83],Was[83],auxpass)
PhraseDepTag(Built[83],Statue[83],nsubjpass)
//[(('http://dbpedia.org/resource/', 'Statue_of_Liberty'), ('http://dbpedia.org/property/', 'beginningDate'), SparqlVar('date'))]

ResourceType(Dbr_Statue_Of_Liberty[83],Entity)
0.52 PriorMatchScore(Dbr_Statue_Of_Liberty[83],Statue[83])

0.58 PriorMatchScore(Dbr_Statue_Of_Liberty[83],Liberty[83])


ResourceType(Beginningdate[83],Class)
//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Statue_of_Liberty dbp:beginningDate ?date . }


//In which U.S. state is Fort Knox located? 
//[u'In', u'which', u'U.S.', u'state', u'is', u'Fort', u'Knox', u'located', u'?']
PhraseIndex(In[84],1,1)
PhraseIndex(Which[84],2,2)
PhraseIndex(U.S.[84],3,3)
PhraseIndex(State[84],4,4)
PhraseIndex(Is[84],5,5)
PhraseIndex(Fort[84],6,6)
PhraseIndex(Knox[84],7,7)
PhraseIndex(Located[84],8,8)
PhrasePosTag(In[84],IN)
PhrasePosTag(Which[84],WDT)
PhrasePosTag(U.S.[84],NNP)
PhrasePosTag(State[84],NN)
PhrasePosTag(Is[84],VBZ)
PhrasePosTag(Fort[84],NNP)
PhrasePosTag(Knox[84],NNP)
PhrasePosTag(Located[84],JJ)
PhraseDepTag(Located[84],Located[84],root)
PhraseDepTag(State[84],In[84],case)
PhraseDepTag(State[84],Which[84],det)
PhraseDepTag(State[84],U.S.[84],compound)
PhraseDepTag(Knox[84],Fort[84],compound)
PhraseDepTag(Located[84],State[84],nmod:in)
PhraseDepTag(Located[84],Is[84],cop)
PhraseDepTag(Located[84],Knox[84],nsubj)
//[(('http://dbpedia.org/resource/', 'Fort_Knox'), ('http://dbpedia.org/property/', 'location'), SparqlVar('uri')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'United_States'))]

ResourceType(Dbr_Fort_Knox[84],Entity)
0.61 PriorMatchScore(Dbr_Fort_Knox[84],Fort[84])

0.61 PriorMatchScore(Dbr_Fort_Knox[84],Knox[84])


ResourceType(Location[84],Class)
0.53 PriorMatchScore(Location[84],Located[84])


ResourceType(Dbo_Country[84],Relation)

ResourceType(Dbr_United_States[84],Entity)
0.55 PriorMatchScore(Dbr_United_States[84],State[84])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Fort_Knox dbp:location ?uri . ?uri dbo:country res:United_States . }


//How many children did Benjamin Franklin have? 
//[u'How', u'many', u'children', u'did', u'Benjamin', u'Franklin', u'have', u'?']
PhraseIndex(How[85],1,1)
PhraseIndex(Many[85],2,2)
PhraseIndex(Children[85],3,3)
PhraseIndex(Did[85],4,4)
PhraseIndex(Benjamin[85],5,5)
PhraseIndex(Franklin[85],6,6)
PhraseIndex(Have[85],7,7)
PhrasePosTag(How[85],WRB)
PhrasePosTag(Many[85],JJ)
PhrasePosTag(Children[85],NNS)
PhrasePosTag(Did[85],VBD)
PhrasePosTag(Benjamin[85],NNP)
PhrasePosTag(Franklin[85],NNP)
PhrasePosTag(Have[85],VB)
PhraseDepTag(Have[85],Have[85],root)
PhraseDepTag(Many[85],How[85],advmod)
PhraseDepTag(Children[85],Many[85],amod)
PhraseDepTag(Franklin[85],Benjamin[85],compound)
PhraseDepTag(Have[85],Children[85],dobj)
PhraseDepTag(Have[85],Did[85],aux)
PhraseDepTag(Have[85],Franklin[85],nsubj)
//[(('http://dbpedia.org/resource/', 'Michael_Jackson'), ('http://dbpedia.org/ontology/', 'deathDate'), SparqlVar('date'))]

ResourceType(Dbr_Michael_Jackson[86],Entity)

ResourceType(Dbo_Deathdate[86],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Michael_Jackson dbo:deathDate ?date . }


PhraseIndex(Which[87],1,1)
PhraseIndex(Chess[87],2,2)
PhraseIndex(Players[87],3,3)
PhraseIndex(Died[87],4,4)
PhraseIndex(In[87],5,5)
PhraseIndex(The[87],6,6)
PhraseIndex(Same[87],7,7)
PhraseIndex(Place[87],8,8)
PhraseIndex(They[87],9,9)
PhraseIndex(Were[87],10,10)
PhraseIndex(Born[87],11,11)
PhraseIndex(In[87],12,12)

//[u'Which', u'Chess', u'Players', u'Died', u'In', u'The', u'Same', u'Place', u'They', u'Were', u'Born', u'In']
//Which Chess players died in the same place they were born in?

//La ligne est isolée 
PhrasePosTag(Which[87],WDT)
PhrasePosTag(Chess[87],NN)
PhrasePosTag(Players[87],NNS)
PhrasePosTag(Died[87],VBD)
PhrasePosTag(In[87],IN)
PhrasePosTag(The[87],DT)
PhrasePosTag(Same[87],JJ)
PhrasePosTag(Place[87],NN)
PhrasePosTag(They[87],PRP)
PhrasePosTag(Were[87],VBD)
PhrasePosTag(Born[87],VBN)
PhrasePosTag(In[87],IN)
PhraseDepTag(In[87],Born[87],root)
PhraseDepTag(Players[87],Chess[87],compound)
PhraseDepTag(Died[87],Which[87],dobj)
PhraseDepTag(Died[87],Players[87],nsubj)
PhraseDepTag(Died[87],Place[87],nmod:in)
PhraseDepTag(Place[87],In[87],case)
PhraseDepTag(Place[87],The[87],det)
PhraseDepTag(Place[87],Same[87],amod)
PhraseDepTag(Born[87],Died[87],advcl)
PhraseDepTag(Born[87],They[87],nsubjpass)
PhraseDepTag(Born[87],Were[87],auxpass)
PhraseDepTag(Born[87],In[87],nmod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'ChessPlayer')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), SparqlVar('x')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'deathPlace'), SparqlVar('y')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'ChessPlayer')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), SparqlVar('x')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'deathPlace'), SparqlVar('y'))]

ResourceType(ChessPlayer[87],Class)
0.62 PriorMatchScore(ChessPlayer[87],Chess[87])

0.66 PriorMatchScore(ChessPlayer[87],Players[87])


ResourceType(Dbo_Birthplace[87],Relation)
0.66 PriorMatchScore(Dbo_Birthplace[87],Place[87])


ResourceType(Dbo_Deathplace[87],Relation)
0.66 PriorMatchScore(Dbo_Deathplace[87],Place[87])


ResourceType(ChessPlayer[87],Class)
0.62 PriorMatchScore(ChessPlayer[87],Chess[87])

0.66 PriorMatchScore(ChessPlayer[87],Players[87])


ResourceType(Dbo_Birthplace[87],Relation)
0.66 PriorMatchScore(Dbo_Birthplace[87],Place[87])


ResourceType(Dbo_Deathplace[87],Relation)
0.66 PriorMatchScore(Dbo_Deathplace[87],Place[87])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:ChessPlayer . ?uri dbo:birthPlace ?x . ?uri dbo:deathPlace ?y . FILTER (?x = ?y) . }


//List the children of Margaret Thatcher. 
//[u'List', u'the', u'children', u'of', u'Margaret', u'Thatcher', u'.']
PhraseIndex(List[88],1,1)
PhraseIndex(The[88],2,2)
PhraseIndex(Children[88],3,3)
PhraseIndex(Of[88],4,4)
PhraseIndex(Margaret[88],5,5)
PhraseIndex(Thatcher[88],6,6)
PhrasePosTag(List[88],VB)
PhrasePosTag(The[88],DT)
PhrasePosTag(Children[88],NNS)
PhrasePosTag(Of[88],IN)
PhrasePosTag(Margaret[88],NNP)
PhrasePosTag(Thatcher[88],NNP)
PhraseDepTag(Thatcher[88],List[88],root)
PhraseDepTag(List[88],Children[88],dobj)
PhraseDepTag(Children[88],The[88],det)
PhraseDepTag(Children[88],Thatcher[88],nmod:of)
PhraseDepTag(Thatcher[88],Of[88],case)
PhraseDepTag(Thatcher[88],Margaret[88],compound)
//[(('http://dbpedia.org/resource/', 'Margaret_Thatcher'), ('http://dbpedia.org/ontology/', 'child'), SparqlVar('uri'))]

ResourceType(Dbr_Margaret_Thatcher[88],Entity)
0.64 PriorMatchScore(Dbr_Margaret_Thatcher[88],Margaret[88])

0.64 PriorMatchScore(Dbr_Margaret_Thatcher[88],Thatcher[88])


ResourceType(Dbo_Child[88],Relation)
0.61 PriorMatchScore(Dbo_Child[88],Children[88])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Margaret_Thatcher dbo:child ?uri . }


//Who was called Scarface? 
//[u'Who', u'was', u'called', u'Scarface', u'?']
PhraseIndex(Who[89],1,1)
PhraseIndex(Was[89],2,2)
PhraseIndex(Called[89],3,3)
PhraseIndex(Scarface[89],4,4)
PhrasePosTag(Who[89],WP)
PhrasePosTag(Was[89],VBD)
PhrasePosTag(Called[89],VBN)
PhrasePosTag(Scarface[89],NNP)
PhraseDepTag(Scarface[89],Called[89],root)
PhraseDepTag(Called[89],Who[89],nsubjpass)
PhraseDepTag(Called[89],Was[89],auxpass)
PhraseDepTag(Called[89],Scarface[89],dobj)
//[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'nickname'), ('http://dbpedia.org/resource/', 'Scarface'))]

ResourceType(Nickname[89],Class)

ResourceType(Dbr_Scarface[89],Entity)
1.0 PriorMatchScore(Dbr_Scarface[89],Scarface[89])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbp:nickname res:Scarface . }


//Was Margaret Thatcher a chemist? 
//[u'Was', u'Margaret', u'Thatcher', u'a', u'chemist', u'?']
PhraseIndex(Was[90],1,1)
PhraseIndex(Margaret[90],2,2)
PhraseIndex(Thatcher[90],3,3)
PhraseIndex(A[90],4,4)
PhraseIndex(Chemist[90],5,5)
PhrasePosTag(Was[90],VBD)
PhrasePosTag(Margaret[90],NNP)
PhrasePosTag(Thatcher[90],NNP)
PhrasePosTag(A[90],DT)
PhrasePosTag(Chemist[90],NN)
PhraseDepTag(Chemist[90],Chemist[90],root)
PhraseDepTag(Thatcher[90],Margaret[90],compound)
PhraseDepTag(Chemist[90],Was[90],cop)
PhraseDepTag(Chemist[90],Thatcher[90],nsubj)
PhraseDepTag(Chemist[90],A[90],det)
//[(('http://dbpedia.org/resource/', 'Margaret_Thatcher'), ('http://dbpedia.org/ontology/', 'profession'), ('http://dbpedia.org/resource/', 'Chemist'))]

ResourceType(Dbr_Margaret_Thatcher[90],Entity)
0.64 PriorMatchScore(Dbr_Margaret_Thatcher[90],Margaret[90])

0.64 PriorMatchScore(Dbr_Margaret_Thatcher[90],Thatcher[90])


ResourceType(Dbo_Profession[90],Relation)

ResourceType(Dbr_Chemist[90],Entity)
1.0 PriorMatchScore(Dbr_Chemist[90],Chemist[90])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> ASK WHERE { res:Margaret_Thatcher dbo:profession res:Chemist . }


//Was Marc Chagall a jew? 
//[u'Was', u'Marc', u'Chagall', u'a', u'jew', u'?']
PhraseIndex(Was[91],1,1)
PhraseIndex(Marc[91],2,2)
PhraseIndex(Chagall[91],3,3)
PhraseIndex(A[91],4,4)
PhraseIndex(Jew[91],5,5)
PhrasePosTag(Was[91],VBD)
PhrasePosTag(Marc[91],NNP)
PhrasePosTag(Chagall[91],NNP)
PhrasePosTag(A[91],DT)
PhrasePosTag(Jew[91],NN)
PhraseDepTag(Jew[91],Jew[91],root)
PhraseDepTag(Chagall[91],Marc[91],compound)
PhraseDepTag(Jew[91],Was[91],cop)
PhraseDepTag(Jew[91],Chagall[91],nsubj)
PhraseDepTag(Jew[91],A[91],det)
//[(('http://dbpedia.org/resource/', 'The_Scream'), ('http://dbpedia.org/ontology/', 'museum'), SparqlVar('uri'))]

ResourceType(Dbr_The_Scream[92],Entity)

ResourceType(Dbo_Museum[92],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Scream dbo:museum ?uri . }


PhraseIndex(Give[93],1,1)
PhraseIndex(Me[93],2,2)
PhraseIndex(All[93],3,3)
PhraseIndex(Books[93],4,4)
PhraseIndex(By[93],5,5)
PhraseIndex(William[93],6,6)
PhraseIndex(Goldman[93],7,7)
PhraseIndex(With[93],8,8)
PhraseIndex(More[93],9,9)
PhraseIndex(Than[93],10,10)
PhraseIndex(300[93],11,11)
PhraseIndex(Pages[93],12,12)

//[u'Give', u'Me', u'All', u'Books', u'By', u'William', u'Goldman', u'With', u'More', u'Than', u'300', u'Pages']
//Give me all books by William Goldman with more than 300 pages.

//La ligne est isolée 
PhrasePosTag(Give[93],VB)
PhrasePosTag(Me[93],PRP)
PhrasePosTag(All[93],DT)
PhrasePosTag(Books[93],NNS)
PhrasePosTag(By[93],IN)
PhrasePosTag(William[93],NNP)
PhrasePosTag(Goldman[93],NNP)
PhrasePosTag(With[93],IN)
PhrasePosTag(More[93],JJR)
PhrasePosTag(Than[93],IN)
PhrasePosTag(300[93],CD)
PhrasePosTag(Pages[93],NNS)
PhraseDepTag(Pages[93],Give[93],root)
PhraseDepTag(Give[93],Me[93],iobj)
PhraseDepTag(Give[93],Books[93],dobj)
PhraseDepTag(Give[93],Goldman[93],nmod:by)
PhraseDepTag(Books[93],All[93],det)
PhraseDepTag(Goldman[93],By[93],case)
PhraseDepTag(Goldman[93],William[93],compound)
PhraseDepTag(Goldman[93],Pages[93],nmod:with)
PhraseDepTag(More[93],Than[93],mwe)
PhraseDepTag(300[93],More[93],advmod)
PhraseDepTag(Pages[93],With[93],case)
PhraseDepTag(Pages[93],300[93],nummod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Book')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'author'), ('http://dbpedia.org/resource/', 'William_Goldman')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'numberOfPages'), SparqlVar('x')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Book')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'author'), ('http://dbpedia.org/resource/', 'William_Goldman')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'numberOfPages'), SparqlVar('x'))]

ResourceType(Book[93],Class)
0.88 PriorMatchScore(Book[93],Books[93])


ResourceType(Dbo_Author[93],Relation)

ResourceType(Dbr_William_Goldman[93],Entity)
0.63 PriorMatchScore(Dbr_William_Goldman[93],William[93])

0.63 PriorMatchScore(Dbr_William_Goldman[93],Goldman[93])


ResourceType(Dbo_Numberofpages[93],Relation)
0.55 PriorMatchScore(Dbo_Numberofpages[93],Pages[93])


ResourceType(Book[93],Class)
0.88 PriorMatchScore(Book[93],Books[93])


ResourceType(Dbo_Author[93],Relation)

ResourceType(Dbr_William_Goldman[93],Entity)
0.63 PriorMatchScore(Dbr_William_Goldman[93],William[93])

0.63 PriorMatchScore(Dbr_William_Goldman[93],Goldman[93])


ResourceType(Dbo_Numberofpages[93],Relation)
0.55 PriorMatchScore(Dbo_Numberofpages[93],Pages[93])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book . ?uri dbo:author res:William_Goldman . ?uri dbo:numberOfPages ?x . FILTER (?x > 300) }


PhraseIndex(Which[94],1,1)
PhraseIndex(Books[94],2,2)
PhraseIndex(By[94],3,3)
PhraseIndex(Kerouac[94],4,4)
PhraseIndex(Were[94],5,5)
PhraseIndex(Published[94],6,6)
PhraseIndex(By[94],7,7)
PhraseIndex(Viking[94],8,8)
PhraseIndex(Press[94],9,9)

//[u'Which', u'Books', u'By', u'Kerouac', u'Were', u'Published', u'By', u'Viking', u'Press']
//Which books by Kerouac were published by Viking Press?

//La ligne est isolée 
PhrasePosTag(Which[94],WDT)
PhrasePosTag(Books[94],NNS)
PhrasePosTag(By[94],IN)
PhrasePosTag(Kerouac[94],NNP)
PhrasePosTag(Were[94],VBD)
PhrasePosTag(Published[94],VBN)
PhrasePosTag(By[94],IN)
PhrasePosTag(Viking[94],JJ)
PhrasePosTag(Press[94],NNP)
PhraseDepTag(Press[94],Published[94],root)
PhraseDepTag(Books[94],Which[94],det)
PhraseDepTag(Books[94],Kerouac[94],nmod:by)
PhraseDepTag(Kerouac[94],By[94],case)
PhraseDepTag(Published[94],Books[94],nsubjpass)
PhraseDepTag(Published[94],Were[94],auxpass)
PhraseDepTag(Published[94],Press[94],nmod:agent)
PhraseDepTag(Press[94],By[94],case)
PhraseDepTag(Press[94],Viking[94],amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Book')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'publisher'), ('http://dbpedia.org/resource/', 'Viking_Press')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'author'), ('http://dbpedia.org/resource/', 'Jack_Kerouac'))]

ResourceType(Book[94],Class)
0.88 PriorMatchScore(Book[94],Books[94])


ResourceType(Dbo_Publisher[94],Relation)
0.77 PriorMatchScore(Dbo_Publisher[94],Published[94])


ResourceType(Dbr_Viking_Press[94],Entity)
0.66 PriorMatchScore(Dbr_Viking_Press[94],Viking[94])

0.58 PriorMatchScore(Dbr_Viking_Press[94],Press[94])


ResourceType(Dbo_Author[94],Relation)

ResourceType(Dbr_Jack_Kerouac[94],Entity)
0.73 PriorMatchScore(Dbr_Jack_Kerouac[94],Kerouac[94])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book . ?uri dbo:publisher res:Viking_Press . ?uri dbo:author res:Jack_Kerouac . }


//Give me a list of all American inventions. 
//[u'Give', u'me', u'a', u'list', u'of', u'all', u'American', u'inventions', u'.']
PhraseIndex(Give[95],1,1)
PhraseIndex(Me[95],2,2)
PhraseIndex(A[95],3,3)
PhraseIndex(List[95],4,4)
PhraseIndex(Of[95],5,5)
PhraseIndex(All[95],6,6)
PhraseIndex(American[95],7,7)
PhraseIndex(Inventions[95],8,8)
PhrasePosTag(Give[95],VB)
PhrasePosTag(Me[95],PRP)
PhrasePosTag(A[95],DT)
PhrasePosTag(List[95],NN)
PhrasePosTag(Of[95],IN)
PhrasePosTag(All[95],DT)
PhrasePosTag(American[95],JJ)
PhrasePosTag(Inventions[95],NNS)
PhraseDepTag(Inventions[95],Give[95],root)
PhraseDepTag(Give[95],Me[95],iobj)
PhraseDepTag(Give[95],List[95],dobj)
PhraseDepTag(List[95],A[95],det)
PhraseDepTag(List[95],Inventions[95],nmod:of)
PhraseDepTag(Inventions[95],Of[95],case)
PhraseDepTag(Inventions[95],All[95],det)
PhraseDepTag(Inventions[95],American[95],amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'AmericanInventions'))]

ResourceType(AmericanInventions[95],Class)
0.61 PriorMatchScore(AmericanInventions[95],American[95])

0.71 PriorMatchScore(AmericanInventions[95],Inventions[95])

//PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:AmericanInventions . }


//How high is the Mount Everest? 
//[u'How', u'high', u'is', u'the', u'Mount', u'Everest', u'?']
PhraseIndex(How[96],1,1)
PhraseIndex(High[96],2,2)
PhraseIndex(Is[96],3,3)
PhraseIndex(The[96],4,4)
PhraseIndex(Mount[96],5,5)
PhraseIndex(Everest[96],6,6)
PhrasePosTag(How[96],WRB)
PhrasePosTag(High[96],JJ)
PhrasePosTag(Is[96],VBZ)
PhrasePosTag(The[96],DT)
PhrasePosTag(Mount[96],NNP)
PhrasePosTag(Everest[96],NNP)
PhraseDepTag(Everest[96],Is[96],root)
PhraseDepTag(High[96],How[96],advmod)
PhraseDepTag(Is[96],High[96],dep)
PhraseDepTag(Is[96],Everest[96],nsubj)
PhraseDepTag(Everest[96],The[96],det)
PhraseDepTag(Everest[96],Mount[96],compound)
//[(('http://dbpedia.org/resource/', 'Mount_Everest'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('num'))]

ResourceType(Dbr_Mount_Everest[96],Entity)
0.55 PriorMatchScore(Dbr_Mount_Everest[96],Mount[96])

0.7 PriorMatchScore(Dbr_Mount_Everest[96],Everest[96])


ResourceType(Dbo_Elevation[96],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Mount_Everest dbo:elevation ?num. }


//Who created the comic Captain America? 
//[u'Who', u'created', u'the', u'comic', u'Captain', u'America', u'?']
PhraseIndex(Who[97],1,1)
PhraseIndex(Created[97],2,2)
PhraseIndex(The[97],3,3)
PhraseIndex(Comic[97],4,4)
PhraseIndex(Captain[97],5,5)
PhraseIndex(America[97],6,6)
PhrasePosTag(Who[97],WP)
PhrasePosTag(Created[97],VBD)
PhrasePosTag(The[97],DT)
PhrasePosTag(Comic[97],JJ)
PhrasePosTag(Captain[97],NNP)
PhrasePosTag(America[97],NNP)
PhraseDepTag(America[97],Created[97],root)
PhraseDepTag(Created[97],Who[97],nsubj)
PhraseDepTag(Created[97],America[97],dobj)
PhraseDepTag(America[97],The[97],det)
PhraseDepTag(America[97],Comic[97],amod)
PhraseDepTag(America[97],Captain[97],compound)
//[(('http://dbpedia.org/resource/', 'Captain_America'), ('http://dbpedia.org/ontology/', 'creator'), SparqlVar('uri'))]

ResourceType(Dbr_Captain_America[97],Entity)
0.63 PriorMatchScore(Dbr_Captain_America[97],Captain[97])

0.63 PriorMatchScore(Dbr_Captain_America[97],America[97])


ResourceType(Dbo_Creator[97],Relation)
0.57 PriorMatchScore(Dbo_Creator[97],Created[97])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri . }


//How many people live in the capital of Australia? 
//[u'How', u'many', u'people', u'live', u'in', u'the', u'capital', u'of', u'Australia', u'?']
PhraseIndex(How[98],1,1)
PhraseIndex(Many[98],2,2)
PhraseIndex(People[98],3,3)
PhraseIndex(Live[98],4,4)
PhraseIndex(In[98],5,5)
PhraseIndex(The[98],6,6)
PhraseIndex(Capital[98],7,7)
PhraseIndex(Of[98],8,8)
PhraseIndex(Australia[98],9,9)
PhrasePosTag(How[98],WRB)
PhrasePosTag(Many[98],JJ)
PhrasePosTag(People[98],NNS)
PhrasePosTag(Live[98],VBP)
PhrasePosTag(In[98],IN)
PhrasePosTag(The[98],DT)
PhrasePosTag(Capital[98],NN)
PhrasePosTag(Of[98],IN)
PhrasePosTag(Australia[98],NNP)
PhraseDepTag(Australia[98],Live[98],root)
PhraseDepTag(Many[98],How[98],advmod)
PhraseDepTag(People[98],Many[98],amod)
PhraseDepTag(Live[98],People[98],nsubj)
PhraseDepTag(Live[98],Capital[98],nmod:in)
PhraseDepTag(Capital[98],In[98],case)
PhraseDepTag(Capital[98],The[98],det)
PhraseDepTag(Capital[98],Australia[98],nmod:of)
PhraseDepTag(Australia[98],Of[98],case)
//[(('http://dbpedia.org/resource/', 'Australia'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('num'))]

ResourceType(Dbr_Australia[98],Entity)
1.0 PriorMatchScore(Dbr_Australia[98],Australia[98])


ResourceType(Dbo_Capital[98],Relation)
0.85 PriorMatchScore(Dbo_Capital[98],Capital[98])


ResourceType(Dbo_Populationtotal[98],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Australia dbo:capital ?x . ?x dbo:populationTotal ?num . }


//What is the largest city in Australia? 
//[u'What', u'is', u'the', u'largest', u'city', u'in', u'Australia', u'?']
PhraseIndex(What[99],1,1)
PhraseIndex(Is[99],2,2)
PhraseIndex(The[99],3,3)
PhraseIndex(Largest[99],4,4)
PhraseIndex(City[99],5,5)
PhraseIndex(In[99],6,6)
PhraseIndex(Australia[99],7,7)
PhrasePosTag(What[99],WP)
PhrasePosTag(Is[99],VBZ)
PhrasePosTag(The[99],DT)
PhrasePosTag(Largest[99],JJS)
PhrasePosTag(City[99],NN)
PhrasePosTag(In[99],IN)
PhrasePosTag(Australia[99],NNP)
PhraseDepTag(Australia[99],What[99],root)
PhraseDepTag(What[99],Is[99],cop)
PhraseDepTag(What[99],City[99],nsubj)
PhraseDepTag(City[99],The[99],det)
PhraseDepTag(City[99],Largest[99],amod)
PhraseDepTag(City[99],Australia[99],nmod:in)
PhraseDepTag(Australia[99],In[99],case)
//[(('http://dbpedia.org/resource/', 'Australia'), ('http://dbpedia.org/ontology/', 'largestCity'), SparqlVar('uri'))]

ResourceType(Dbr_Australia[99],Entity)
1.0 PriorMatchScore(Dbr_Australia[99],Australia[99])


ResourceType(Dbo_Largestcity[99],Relation)
0.66 PriorMatchScore(Dbo_Largestcity[99],Largest[99])

0.53 PriorMatchScore(Dbo_Largestcity[99],City[99])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Australia dbo:largestCity ?uri . }


//Who composed the music for Harold and Maude? 
//[u'Who', u'composed', u'the', u'music', u'for', u'Harold', u'and', u'Maude', u'?']
PhraseIndex(Who[100],1,1)
PhraseIndex(Composed[100],2,2)
PhraseIndex(The[100],3,3)
PhraseIndex(Music[100],4,4)
PhraseIndex(For[100],5,5)
PhraseIndex(Harold[100],6,6)
PhraseIndex(And[100],7,7)
PhraseIndex(Maude[100],8,8)
PhrasePosTag(Who[100],WP)
PhrasePosTag(Composed[100],VBN)
PhrasePosTag(The[100],DT)
PhrasePosTag(Music[100],NN)
PhrasePosTag(For[100],IN)
PhrasePosTag(Harold[100],NNP)
PhrasePosTag(And[100],CC)
PhrasePosTag(Maude[100],NNP)
PhraseDepTag(Maude[100],Composed[100],root)
PhraseDepTag(Composed[100],Who[100],nsubj)
PhraseDepTag(Composed[100],Music[100],dobj)
PhraseDepTag(Music[100],The[100],det)
PhraseDepTag(Music[100],Harold[100],nmod:for)
PhraseDepTag(Music[100],Maude[100],nmod:for)
PhraseDepTag(Harold[100],For[100],case)
PhraseDepTag(Harold[100],And[100],cc)
//[(('http://dbpedia.org/resource/', 'Harold_and_Maude'), ('http://dbpedia.org/ontology/', 'musicComposer'), SparqlVar('uri'))]

ResourceType(Dbr_Harold_And_Maude[100],Entity)
0.54 PriorMatchScore(Dbr_Harold_And_Maude[100],Harold[100])


ResourceType(Dbo_Musiccomposer[100],Relation)
0.66 PriorMatchScore(Dbo_Musiccomposer[100],Composed[100])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Harold_and_Maude dbo:musicComposer ?uri . }


PhraseIndex(Which[101],1,1)
PhraseIndex(Films[101],2,2)
PhraseIndex(Starring[101],3,3)
PhraseIndex(Clint[101],4,4)
PhraseIndex(Eastwood[101],5,5)
PhraseIndex(Did[101],6,6)
PhraseIndex(He[101],7,7)
PhraseIndex(Direct[101],8,8)
PhraseIndex(Himself[101],9,9)

//[u'Which', u'Films', u'Starring', u'Clint', u'Eastwood', u'Did', u'He', u'Direct', u'Himself']
//Which films starring Clint Eastwood did he direct himself?

//La ligne est isolée 
PhrasePosTag(Which[101],WDT)
PhrasePosTag(Films[101],NNS)
PhrasePosTag(Starring[101],VBG)
PhrasePosTag(Clint[101],NNP)
PhrasePosTag(Eastwood[101],NNP)
PhrasePosTag(Did[101],VBD)
PhrasePosTag(He[101],PRP)
PhrasePosTag(Direct[101],VB)
PhrasePosTag(Himself[101],PRP)
PhraseDepTag(Himself[101],Direct[101],root)
PhraseDepTag(Films[101],Which[101],det)
PhraseDepTag(Films[101],Eastwood[101],nmod:starring)
PhraseDepTag(Eastwood[101],Starring[101],case)
PhraseDepTag(Eastwood[101],Clint[101],compound)
PhraseDepTag(Direct[101],Films[101],dep)
PhraseDepTag(Direct[101],Did[101],aux)
PhraseDepTag(Direct[101],He[101],nsubj)
PhraseDepTag(Direct[101],Himself[101],dobj)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Clint_Eastwood')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Clint_Eastwood'))]

ResourceType(Dbo_Director[101],Relation)
0.71 PriorMatchScore(Dbo_Director[101],Direct[101])


ResourceType(Dbr_Clint_Eastwood[101],Entity)
0.52 PriorMatchScore(Dbr_Clint_Eastwood[101],Clint[101])

0.72 PriorMatchScore(Dbr_Clint_Eastwood[101],Eastwood[101])


ResourceType(Dbo_Starring[101],Relation)
0.87 PriorMatchScore(Dbo_Starring[101],Starring[101])


ResourceType(Dbr_Clint_Eastwood[101],Entity)
0.52 PriorMatchScore(Dbr_Clint_Eastwood[101],Clint[101])

0.72 PriorMatchScore(Dbr_Clint_Eastwood[101],Eastwood[101])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:director res:Clint_Eastwood . ?uri dbo:starring res:Clint_Eastwood . }


PhraseIndex(In[102],1,1)
PhraseIndex(Which[102],2,2)
PhraseIndex(City[102],3,3)
PhraseIndex(Was[102],4,4)
PhraseIndex(The[102],5,5)
PhraseIndex(Former[102],6,6)
PhraseIndex(Dutch[102],7,7)
PhraseIndex(Queen[102],8,8)
PhraseIndex(Juliana[102],9,9)
PhraseIndex(Buried[102],10,10)

//[u'In', u'Which', u'City', u'Was', u'The', u'Former', u'Dutch', u'Queen', u'Juliana', u'Buried']
//In which city was the former Dutch queen Juliana buried?

//La ligne est isolée 
PhrasePosTag(In[102],IN)
PhrasePosTag(Which[102],WDT)
PhrasePosTag(City[102],NN)
PhrasePosTag(Was[102],VBD)
PhrasePosTag(The[102],DT)
PhrasePosTag(Former[102],JJ)
PhrasePosTag(Dutch[102],NNP)
PhrasePosTag(Queen[102],NN)
PhrasePosTag(Juliana[102],NNP)
PhrasePosTag(Buried[102],VBN)
PhraseDepTag(Buried[102],Buried[102],root)
PhraseDepTag(City[102],In[102],case)
PhraseDepTag(City[102],Which[102],det)
PhraseDepTag(Juliana[102],The[102],det)
PhraseDepTag(Juliana[102],Former[102],amod)
PhraseDepTag(Juliana[102],Dutch[102],compound)
PhraseDepTag(Juliana[102],Queen[102],compound)
PhraseDepTag(Buried[102],City[102],nmod:in)
PhraseDepTag(Buried[102],Was[102],auxpass)
PhraseDepTag(Buried[102],Juliana[102],nsubjpass)
//[(('http://dbpedia.org/resource/', 'Juliana_of_the_Netherlands'), ('http://dbpedia.org/ontology/', 'restingPlace'), SparqlVar('uri')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Settlement'))]

ResourceType(Dbr_Juliana_Of_The_Netherlands[102],Entity)

ResourceType(Dbo_Restingplace[102],Relation)

ResourceType(Settlement[102],Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Juliana_of_the_Netherlands dbo:restingPlace ?uri. ?uri rdf:type dbo:Settlement . }


//Is Egypts largest city also its capital? 
//[u'Is', u'Egypts', u'largest', u'city', u'also', u'its', u'capital', u'?']
PhraseIndex(Is[103],1,1)
PhraseIndex(Egypts[103],2,2)
PhraseIndex(Largest[103],3,3)
PhraseIndex(City[103],4,4)
PhraseIndex(Also[103],5,5)
PhraseIndex(Its[103],6,6)
PhraseIndex(Capital[103],7,7)
PhrasePosTag(Is[103],VBZ)
PhrasePosTag(Egypts[103],RB)
PhrasePosTag(Largest[103],JJS)
PhrasePosTag(City[103],NN)
PhrasePosTag(Also[103],RB)
PhrasePosTag(Its[103],PRP$)
PhrasePosTag(Capital[103],NN)
PhraseDepTag(Capital[103],City[103],root)
PhraseDepTag(Largest[103],Egypts[103],advmod)
PhraseDepTag(City[103],Is[103],cop)
PhraseDepTag(City[103],Largest[103],amod)
PhraseDepTag(City[103],Capital[103],nmod)
PhraseDepTag(Capital[103],Also[103],advmod)
PhraseDepTag(Capital[103],Its[103],nmod:poss)
//[(('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'largestCity'), SparqlVar('large')), (('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('capital')), (('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'largestCity'), SparqlVar('large')), (('http://dbpedia.org/resource/', 'Egypt'), ('http://dbpedia.org/ontology/', 'capital'), SparqlVar('capital'))]

ResourceType(Dbr_Egypt[103],Entity)
0.90 PriorMatchScore(Dbr_Egypt[103],Egypts[103])


ResourceType(Dbo_Largestcity[103],Relation)
0.66 PriorMatchScore(Dbo_Largestcity[103],Largest[103])

0.53 PriorMatchScore(Dbo_Largestcity[103],City[103])


ResourceType(Dbr_Egypt[103],Entity)
0.90 PriorMatchScore(Dbr_Egypt[103],Egypts[103])


ResourceType(Dbo_Capital[103],Relation)
0.85 PriorMatchScore(Dbo_Capital[103],Capital[103])


ResourceType(Dbr_Egypt[103],Entity)
0.90 PriorMatchScore(Dbr_Egypt[103],Egypts[103])


ResourceType(Dbo_Largestcity[103],Relation)
0.66 PriorMatchScore(Dbo_Largestcity[103],Largest[103])

0.53 PriorMatchScore(Dbo_Largestcity[103],City[103])


ResourceType(Dbr_Egypt[103],Entity)
0.90 PriorMatchScore(Dbr_Egypt[103],Egypts[103])


ResourceType(Dbo_Capital[103],Relation)
0.85 PriorMatchScore(Dbo_Capital[103],Capital[103])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> ASK WHERE { res:Egypt dbo:largestCity ?large . res:Egypt dbo:capital ?capital . FILTER (?large = ?capital) }


PhraseIndex(Where[104],1,1)
PhraseIndex(Is[104],2,2)
PhraseIndex(The[104],3,3)
PhraseIndex(Residence[104],4,4)
PhraseIndex(Of[104],5,5)
PhraseIndex(The[104],6,6)
PhraseIndex(Prime[104],7,7)
PhraseIndex(Minister[104],8,8)
PhraseIndex(Of[104],9,9)
PhraseIndex(Spain[104],10,10)

//[u'Where', u'Is', u'The', u'Residence', u'Of', u'The', u'Prime', u'Minister', u'Of', u'Spain']
//Where is the residence of the prime minister of Spain?

//La ligne est isolée 
PhrasePosTag(Where[104],WRB)
PhrasePosTag(Is[104],VBZ)
PhrasePosTag(The[104],DT)
PhrasePosTag(Residence[104],NN)
PhrasePosTag(Of[104],IN)
PhrasePosTag(The[104],DT)
PhrasePosTag(Prime[104],JJ)
PhrasePosTag(Minister[104],NN)
PhrasePosTag(Of[104],IN)
PhrasePosTag(Spain[104],NNP)
PhraseDepTag(Spain[104],Is[104],root)
PhraseDepTag(Is[104],Where[104],advmod)
PhraseDepTag(Is[104],Residence[104],nsubj)
PhraseDepTag(Residence[104],The[104],det)
PhraseDepTag(Residence[104],Minister[104],nmod:of)
PhraseDepTag(Minister[104],Of[104],case)
PhraseDepTag(Minister[104],The[104],det)
PhraseDepTag(Minister[104],Prime[104],amod)
PhraseDepTag(Minister[104],Spain[104],nmod:of)
PhraseDepTag(Spain[104],Of[104],case)
//[(('http://dbpedia.org/resource/', 'Prime_Minister_of_Spain'), ('http://dbpedia.org/property/', 'residence'), SparqlVar('uri'))]

ResourceType(Dbr_Prime_Minister_Of_Spain[104],Entity)
0.51 PriorMatchScore(Dbr_Prime_Minister_Of_Spain[104],Minister[104])


ResourceType(Residence[104],Class)
0.88 PriorMatchScore(Residence[104],Residence[104])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Prime_Minister_of_Spain dbp:residence ?uri . }


//Which U.S. state has the abbreviation MN? 
//[u'Which', u'U.S.', u'state', u'has', u'the', u'abbreviation', u'MN', u'?']
PhraseIndex(Which[105],1,1)
PhraseIndex(U.S.[105],2,2)
PhraseIndex(State[105],3,3)
PhraseIndex(Has[105],4,4)
PhraseIndex(The[105],5,5)
PhraseIndex(Abbreviation[105],6,6)
PhraseIndex(Mn[105],7,7)
PhrasePosTag(Which[105],WDT)
PhrasePosTag(U.S.[105],NNP)
PhrasePosTag(State[105],NN)
PhrasePosTag(Has[105],VBZ)
PhrasePosTag(The[105],DT)
PhrasePosTag(Abbreviation[105],NN)
PhrasePosTag(Mn[105],NN)
PhraseDepTag(Mn[105],Has[105],root)
PhraseDepTag(State[105],Which[105],det)
PhraseDepTag(State[105],U.S.[105],compound)
PhraseDepTag(Has[105],State[105],nsubj)
PhraseDepTag(Has[105],Mn[105],dobj)
PhraseDepTag(Mn[105],The[105],det)
PhraseDepTag(Mn[105],Abbreviation[105],compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Akira_Kurosawa')), (('http://dbpedia.org/resource/', 'Rashomon'), ('http://dbpedia.org/ontology/', 'releaseDate'), SparqlVar('y')), (('http://dbpedia.org/resource/', 'Rashomon'), ('http://dbpedia.org/ontology/', 'releaseDate'), SparqlVar('y'))]

ResourceType(Film[107],Class)

ResourceType(Dbo_Director[107],Relation)

ResourceType(Dbr_Akira_Kurosawa[107],Entity)

ResourceType(Dbr_Rashomon[107],Entity)

ResourceType(Dbo_Releasedate[107],Relation)

ResourceType(Dbr_Rashomon[107],Entity)

ResourceType(Dbo_Releasedate[107],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:director res:Akira_Kurosawa . { ?uri dbo:releaseDate ?x . } UNION { ?uri dbp:released ?x . } res:Rashomon dbo:releaseDate ?y . FILTER (?y > ?x) }


PhraseIndex(What[108],1,1)
PhraseIndex(Is[108],2,2)
PhraseIndex(The[108],3,3)
PhraseIndex(Founding[108],4,4)
PhraseIndex(Year[108],5,5)
PhraseIndex(Of[108],6,6)
PhraseIndex(The[108],7,7)
PhraseIndex(Brewery[108],8,8)
PhraseIndex(That[108],9,9)
PhraseIndex(Produces[108],10,10)
PhraseIndex(Pilsner[108],11,11)
PhraseIndex(Urquell[108],12,12)

//[u'What', u'Is', u'The', u'Founding', u'Year', u'Of', u'The', u'Brewery', u'That', u'Produces', u'Pilsner', u'Urquell']
//What is the founding year of the brewery that produces Pilsner Urquell?

//La ligne est isolée 
PhrasePosTag(What[108],WP)
PhrasePosTag(Is[108],VBZ)
PhrasePosTag(The[108],DT)
PhrasePosTag(Founding[108],NN)
PhrasePosTag(Year[108],NN)
PhrasePosTag(Of[108],IN)
PhrasePosTag(The[108],DT)
PhrasePosTag(Brewery[108],NN)
PhrasePosTag(That[108],WDT)
PhrasePosTag(Produces[108],VBZ)
PhrasePosTag(Pilsner[108],NNP)
PhrasePosTag(Urquell[108],NNP)
PhraseDepTag(Urquell[108],What[108],root)
PhraseDepTag(What[108],Is[108],cop)
PhraseDepTag(What[108],Year[108],nsubj)
PhraseDepTag(Year[108],The[108],det)
PhraseDepTag(Year[108],Founding[108],compound)
PhraseDepTag(Year[108],Brewery[108],nmod:of)
PhraseDepTag(Brewery[108],Of[108],case)
PhraseDepTag(Brewery[108],The[108],det)
PhraseDepTag(Brewery[108],Produces[108],acl:relcl)
PhraseDepTag(Produces[108],That[108],nsubj)
PhraseDepTag(Produces[108],Urquell[108],dobj)
PhraseDepTag(Urquell[108],Pilsner[108],compound)
//[(('http://dbpedia.org/resource/', 'Pilsner_Urquell'), ('http://dbpedia.org/property/', 'brewery'), SparqlVar('uri')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'foundation'), SparqlVar('num'))]

ResourceType(Dbr_Pilsner_Urquell[108],Entity)
0.63 PriorMatchScore(Dbr_Pilsner_Urquell[108],Pilsner[108])

0.63 PriorMatchScore(Dbr_Pilsner_Urquell[108],Urquell[108])


ResourceType(Brewery[108],Class)
0.85 PriorMatchScore(Brewery[108],Brewery[108])


ResourceType(Foundation[108],Class)
0.66 PriorMatchScore(Foundation[108],Founding[108])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Pilsner_Urquell dbp:brewery ?uri . ?uri dbp:foundation ?num . }


PhraseIndex(Who[109],1,1)
PhraseIndex(Wrote[109],2,2)
PhraseIndex(The[109],3,3)
PhraseIndex(Lyrics[109],4,4)
PhraseIndex(For[109],5,5)
PhraseIndex(The[109],6,6)
PhraseIndex(Polish[109],7,7)
PhraseIndex(National[109],8,8)
PhraseIndex(Anthem[109],9,9)

//[u'Who', u'Wrote', u'The', u'Lyrics', u'For', u'The', u'Polish', u'National', u'Anthem']
//Who wrote the lyrics for the Polish national anthem?

//La ligne est isolée 
PhrasePosTag(Who[109],WP)
PhrasePosTag(Wrote[109],VBD)
PhrasePosTag(The[109],DT)
PhrasePosTag(Lyrics[109],NNS)
PhrasePosTag(For[109],IN)
PhrasePosTag(The[109],DT)
PhrasePosTag(Polish[109],JJ)
PhrasePosTag(National[109],JJ)
PhrasePosTag(Anthem[109],NN)
PhraseDepTag(Anthem[109],Wrote[109],root)
PhraseDepTag(Wrote[109],Who[109],nsubj)
PhraseDepTag(Wrote[109],Lyrics[109],dobj)
PhraseDepTag(Wrote[109],Anthem[109],nmod:for)
PhraseDepTag(Lyrics[109],The[109],det)
PhraseDepTag(Anthem[109],For[109],case)
PhraseDepTag(Anthem[109],The[109],det)
PhraseDepTag(Anthem[109],Polish[109],amod)
PhraseDepTag(Anthem[109],National[109],amod)
//[(('http://dbpedia.org/resource/', 'Poland'), ('http://dbpedia.org/ontology/', 'anthem'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/property/', 'author'), SparqlVar('uri'))]

ResourceType(Dbr_Poland[109],Entity)

ResourceType(Dbo_Anthem[109],Relation)
0.83 PriorMatchScore(Dbo_Anthem[109],Anthem[109])


ResourceType(Author[109],Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Poland dbo:anthem ?x . ?x dbp:author ?uri . }


//Give me all B-sides of the Ramones. 
//[u'Give', u'me', u'all', u'B-sides', u'of', u'the', u'Ramones', u'.']
PhraseIndex(Give[110],1,1)
PhraseIndex(Me[110],2,2)
PhraseIndex(All[110],3,3)
PhraseIndex(B-Sides[110],4,4)
PhraseIndex(Of[110],5,5)
PhraseIndex(The[110],6,6)
PhraseIndex(Ramones[110],7,7)
PhrasePosTag(Give[110],VB)
PhrasePosTag(Me[110],PRP)
PhrasePosTag(All[110],DT)
PhrasePosTag(B-Sides[110],NNS)
PhrasePosTag(Of[110],IN)
PhrasePosTag(The[110],DT)
PhrasePosTag(Ramones[110],NNPS)
PhraseDepTag(Ramones[110],Give[110],root)
PhraseDepTag(Give[110],Me[110],iobj)
PhraseDepTag(Give[110],B-Sides[110],dobj)
PhraseDepTag(B-Sides[110],All[110],det)
PhraseDepTag(B-Sides[110],Ramones[110],nmod:of)
PhraseDepTag(Ramones[110],Of[110],case)
PhraseDepTag(Ramones[110],The[110],det)
//[(SparqlVar('x'), ('http://dbpedia.org/ontology/', 'musicalArtist'), ('http://dbpedia.org/resource/', 'Ramones')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'bSide'), SparqlVar('string'))]

ResourceType(Dbo_Musicalartist[110],Relation)

ResourceType(Dbr_Ramones[110],Entity)
1.0 PriorMatchScore(Dbr_Ramones[110],Ramones[110])


ResourceType(Dbo_Bside[110],Relation)
0.66 PriorMatchScore(Dbo_Bside[110],B-Sides[110])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { ?x dbo:musicalArtist res:Ramones . ?x dbo:bSide ?string . }


//Who painted The Storm on the Sea of Galilee? 
//[u'Who', u'painted', u'The', u'Storm', u'on', u'the', u'Sea', u'of', u'Galilee', u'?']
PhraseIndex(Who[111],1,1)
PhraseIndex(Painted[111],2,2)
PhraseIndex(The[111],3,3)
PhraseIndex(Storm[111],4,4)
PhraseIndex(On[111],5,5)
PhraseIndex(The[111],6,6)
PhraseIndex(Sea[111],7,7)
PhraseIndex(Of[111],8,8)
PhraseIndex(Galilee[111],9,9)
PhrasePosTag(Who[111],WP)
PhrasePosTag(Painted[111],VBD)
PhrasePosTag(The[111],DT)
PhrasePosTag(Storm[111],NN)
PhrasePosTag(On[111],IN)
PhrasePosTag(The[111],DT)
PhrasePosTag(Sea[111],NN)
PhrasePosTag(Of[111],IN)
PhrasePosTag(Galilee[111],NNP)
PhraseDepTag(Galilee[111],Painted[111],root)
PhraseDepTag(Painted[111],Who[111],nsubj)
PhraseDepTag(Painted[111],Storm[111],dobj)
PhraseDepTag(Painted[111],Sea[111],nmod:on)
PhraseDepTag(Storm[111],The[111],det)
PhraseDepTag(Sea[111],On[111],case)
PhraseDepTag(Sea[111],The[111],det)
PhraseDepTag(Sea[111],Galilee[111],nmod:of)
PhraseDepTag(Galilee[111],Of[111],case)
//[(('http://dbpedia.org/resource/', 'The_Storm_on_the_Sea_of_Galilee'), ('http://dbpedia.org/ontology/', 'author'), SparqlVar('uri'))]

ResourceType(Dbr_The_Storm_On_The_Sea_Of_Galilee[111],Entity)

ResourceType(Dbo_Author[111],Relation)
0.54 PriorMatchScore(Dbo_Author[111],Storm[111])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Storm_on_the_Sea_of_Galilee dbo:author ?uri . }


//Which country does the creator of Miffy come from? 
//[u'Which', u'country', u'does', u'the', u'creator', u'of', u'Miffy', u'come', u'from', u'?']
PhraseIndex(Which[112],1,1)
PhraseIndex(Country[112],2,2)
PhraseIndex(Does[112],3,3)
PhraseIndex(The[112],4,4)
PhraseIndex(Creator[112],5,5)
PhraseIndex(Of[112],6,6)
PhraseIndex(Miffy[112],7,7)
PhraseIndex(Come[112],8,8)
PhraseIndex(From[112],9,9)
PhrasePosTag(Which[112],WDT)
PhrasePosTag(Country[112],NN)
PhrasePosTag(Does[112],VBZ)
PhrasePosTag(The[112],DT)
PhrasePosTag(Creator[112],NN)
PhrasePosTag(Of[112],IN)
PhrasePosTag(Miffy[112],NNP)
PhrasePosTag(Come[112],VB)
PhrasePosTag(From[112],IN)
PhraseDepTag(From[112],Come[112],root)
PhraseDepTag(Country[112],Which[112],det)
PhraseDepTag(Country[112],From[112],case)
PhraseDepTag(Creator[112],The[112],det)
PhraseDepTag(Creator[112],Miffy[112],nmod:of)
PhraseDepTag(Miffy[112],Of[112],case)
PhraseDepTag(Come[112],Country[112],nmod:from)
PhraseDepTag(Come[112],Does[112],aux)
PhraseDepTag(Come[112],Creator[112],nsubj)
//[(('http://dbpedia.org/resource/', 'Miffy'), ('http://dbpedia.org/ontology/', 'creator'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'nationality'), SparqlVar('uri'))]

ResourceType(Dbr_Miffy[112],Entity)
1.0 PriorMatchScore(Dbr_Miffy[112],Miffy[112])


ResourceType(Dbo_Creator[112],Relation)
0.85 PriorMatchScore(Dbo_Creator[112],Creator[112])


ResourceType(Dbo_Nationality[112],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Miffy dbo:creator ?x . ?x dbo:nationality ?uri . }


//For which label did Elvis record his first album? 
//[u'For', u'which', u'label', u'did', u'Elvis', u'record', u'his', u'first', u'album', u'?']
PhraseIndex(For[113],1,1)
PhraseIndex(Which[113],2,2)
PhraseIndex(Label[113],3,3)
PhraseIndex(Did[113],4,4)
PhraseIndex(Elvis[113],5,5)
PhraseIndex(Record[113],6,6)
PhraseIndex(His[113],7,7)
PhraseIndex(First[113],8,8)
PhraseIndex(Album[113],9,9)
PhrasePosTag(For[113],IN)
PhrasePosTag(Which[113],WDT)
PhrasePosTag(Label[113],NN)
PhrasePosTag(Did[113],VBD)
PhrasePosTag(Elvis[113],NNP)
PhrasePosTag(Record[113],VB)
PhrasePosTag(His[113],PRP$)
PhrasePosTag(First[113],JJ)
PhrasePosTag(Album[113],NN)
PhraseDepTag(Album[113],Record[113],root)
PhraseDepTag(Label[113],For[113],case)
PhraseDepTag(Label[113],Which[113],det)
PhraseDepTag(Record[113],Label[113],nmod:for)
PhraseDepTag(Record[113],Did[113],aux)
PhraseDepTag(Record[113],Elvis[113],nsubj)
PhraseDepTag(Record[113],Album[113],dobj)
PhraseDepTag(Album[113],His[113],nmod:poss)
PhraseDepTag(Album[113],First[113],amod)
//[(SparqlVar('x'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Album')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'artist'), ('http://dbpedia.org/resource/', 'Elvis_Presley')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'releaseDate'), SparqlVar('y')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'recordLabel'), SparqlVar('uri'))]

ResourceType(Album[113],Class)
1.0 PriorMatchScore(Album[113],Album[113])


ResourceType(Dbo_Artist[113],Relation)
0.54 PriorMatchScore(Dbo_Artist[113],First[113])


ResourceType(Dbr_Elvis_Presley[113],Entity)
0.55 PriorMatchScore(Dbr_Elvis_Presley[113],Elvis[113])


ResourceType(Dbo_Releasedate[113],Relation)

ResourceType(Dbo_Recordlabel[113],Relation)
0.62 PriorMatchScore(Dbo_Recordlabel[113],Label[113])

0.58 PriorMatchScore(Dbo_Recordlabel[113],Record[113])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?x rdf:type dbo:Album . ?x dbo:artist res:Elvis_Presley . ?x dbo:releaseDate ?y . ?x dbo:recordLabel ?uri . } ORDER BY ASC(?y) OFFSET 0 LIMIT 1


PhraseIndex(Give[114],1,1)
PhraseIndex(Me[114],2,2)
PhraseIndex(The[114],3,3)
PhraseIndex(Birthdays[114],4,4)
PhraseIndex(Of[114],5,5)
PhraseIndex(All[114],6,6)
PhraseIndex(Actors[114],7,7)
PhraseIndex(Of[114],8,8)
PhraseIndex(The[114],9,9)
PhraseIndex(Television[114],10,10)
PhraseIndex(Show[114],11,11)
PhraseIndex(Charmed[114],12,12)

//[u'Give', u'Me', u'The', u'Birthdays', u'Of', u'All', u'Actors', u'Of', u'The', u'Television', u'Show', u'Charmed']
//Give me the birthdays of all actors of the television show Charmed.

//La ligne est isolée 
PhrasePosTag(Give[114],VB)
PhrasePosTag(Me[114],PRP)
PhrasePosTag(The[114],DT)
PhrasePosTag(Birthdays[114],NNS)
PhrasePosTag(Of[114],IN)
PhrasePosTag(All[114],DT)
PhrasePosTag(Actors[114],NNS)
PhrasePosTag(Of[114],IN)
PhrasePosTag(The[114],DT)
PhrasePosTag(Television[114],NN)
PhrasePosTag(Show[114],NN)
PhrasePosTag(Charmed[114],NNP)
PhraseDepTag(Charmed[114],Give[114],root)
PhraseDepTag(Give[114],Me[114],iobj)
PhraseDepTag(Give[114],Birthdays[114],dobj)
PhraseDepTag(Birthdays[114],The[114],det)
PhraseDepTag(Birthdays[114],Actors[114],nmod:of)
PhraseDepTag(Actors[114],Of[114],case)
PhraseDepTag(Actors[114],All[114],det)
PhraseDepTag(Actors[114],Charmed[114],nmod:of)
PhraseDepTag(Charmed[114],Of[114],case)
PhraseDepTag(Charmed[114],The[114],det)
PhraseDepTag(Charmed[114],Television[114],compound)
PhraseDepTag(Charmed[114],Show[114],compound)
//[(('http://dbpedia.org/resource/', 'Charmed'), ('http://dbpedia.org/ontology/', 'starring'), SparqlVar('actor')), (SparqlVar('actor'), ('http://dbpedia.org/ontology/', 'birthDate'), SparqlVar('date'))]

ResourceType(Dbr_Charmed[114],Entity)
1.0 PriorMatchScore(Dbr_Charmed[114],Charmed[114])


ResourceType(Dbo_Starring[114],Relation)

ResourceType(Dbo_Birthdate[114],Relation)
0.55 PriorMatchScore(Dbo_Birthdate[114],Birthdays[114])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Charmed dbo:starring ?actor . ?actor dbo:birthDate ?date . }


//How many employees does IBM have? 
//[u'How', u'many', u'employees', u'does', u'IBM', u'have', u'?']
PhraseIndex(How[115],1,1)
PhraseIndex(Many[115],2,2)
PhraseIndex(Employees[115],3,3)
PhraseIndex(Does[115],4,4)
PhraseIndex(Ibm[115],5,5)
PhraseIndex(Have[115],6,6)
PhrasePosTag(How[115],WRB)
PhrasePosTag(Many[115],JJ)
PhrasePosTag(Employees[115],NNS)
PhrasePosTag(Does[115],VBZ)
PhrasePosTag(Ibm[115],NNP)
PhrasePosTag(Have[115],VB)
PhraseDepTag(Have[115],Have[115],root)
PhraseDepTag(Many[115],How[115],advmod)
PhraseDepTag(Employees[115],Many[115],amod)
PhraseDepTag(Have[115],Employees[115],dobj)
PhraseDepTag(Have[115],Does[115],aux)
PhraseDepTag(Have[115],Ibm[115],nsubj)
//[(('http://dbpedia.org/resource/', 'IBM'), ('http://dbpedia.org/ontology/', 'numberOfEmployees'), SparqlVar('number'))]

ResourceType(Dbr_Ibm[115],Entity)

ResourceType(Dbo_Numberofemployees[115],Relation)
0.69 PriorMatchScore(Dbo_Numberofemployees[115],Employees[115])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?number WHERE { res:IBM dbo:numberOfEmployees ?number . }


//Which states border Illinois? 
//[u'Which', u'states', u'border', u'Illinois', u'?']
PhraseIndex(Which[116],1,1)
PhraseIndex(States[116],2,2)
PhraseIndex(Border[116],3,3)
PhraseIndex(Illinois[116],4,4)
PhrasePosTag(Which[116],WDT)
PhrasePosTag(States[116],NNS)
PhrasePosTag(Border[116],VBP)
PhrasePosTag(Illinois[116],NNP)
PhraseDepTag(Illinois[116],Border[116],root)
PhraseDepTag(States[116],Which[116],det)
PhraseDepTag(Border[116],States[116],nsubj)
PhraseDepTag(Border[116],Illinois[116],dobj)
//[(('http://dbpedia.org/resource/', 'Illinois'), ('http://dbpedia.org/property/', 'borderingstates'), SparqlVar('uri'))]

ResourceType(Dbr_Illinois[116],Entity)
1.0 PriorMatchScore(Dbr_Illinois[116],Illinois[116])


ResourceType(Borderingstates[116],Class)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Illinois dbp:borderingstates ?uri . }


//In which country is the Limerick Lake? 
//[u'In', u'which', u'country', u'is', u'the', u'Limerick', u'Lake', u'?']
PhraseIndex(In[117],1,1)
PhraseIndex(Which[117],2,2)
PhraseIndex(Country[117],3,3)
PhraseIndex(Is[117],4,4)
PhraseIndex(The[117],5,5)
PhraseIndex(Limerick[117],6,6)
PhraseIndex(Lake[117],7,7)
PhrasePosTag(In[117],IN)
PhrasePosTag(Which[117],WDT)
PhrasePosTag(Country[117],NN)
PhrasePosTag(Is[117],VBZ)
PhrasePosTag(The[117],DT)
PhrasePosTag(Limerick[117],NNP)
PhrasePosTag(Lake[117],NNP)
PhraseDepTag(Lake[117],Is[117],root)
PhraseDepTag(Country[117],In[117],case)
PhraseDepTag(Country[117],Which[117],det)
PhraseDepTag(Is[117],Country[117],nmod:in)
PhraseDepTag(Is[117],Lake[117],nsubj)
PhraseDepTag(Lake[117],The[117],det)
PhraseDepTag(Lake[117],Limerick[117],compound)
//[(('http://dbpedia.org/resource/', 'Limerick_Lake'), ('http://dbpedia.org/ontology/', 'country'), SparqlVar('uri'))]

ResourceType(Dbr_Limerick_Lake[117],Entity)
0.76 PriorMatchScore(Dbr_Limerick_Lake[117],Limerick[117])


ResourceType(Dbo_Country[117],Relation)
0.85 PriorMatchScore(Dbo_Country[117],Country[117])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Limerick_Lake dbo:country ?uri . }


PhraseIndex(Which[118],1,1)
PhraseIndex(Television[118],2,2)
PhraseIndex(Shows[118],3,3)
PhraseIndex(Were[118],4,4)
PhraseIndex(Created[118],5,5)
PhraseIndex(By[118],6,6)
PhraseIndex(Walt[118],7,7)
PhraseIndex(Disney[118],8,8)

//[u'Which', u'Television', u'Shows', u'Were', u'Created', u'By', u'Walt', u'Disney']
//Which television shows were created by Walt Disney?

//La ligne est isolée 
PhrasePosTag(Which[118],WDT)
PhrasePosTag(Television[118],NN)
PhrasePosTag(Shows[118],NNS)
PhrasePosTag(Were[118],VBD)
PhrasePosTag(Created[118],VBN)
PhrasePosTag(By[118],IN)
PhrasePosTag(Walt[118],NNP)
PhrasePosTag(Disney[118],NNP)
PhraseDepTag(Disney[118],Created[118],root)
PhraseDepTag(Television[118],Which[118],det)
PhraseDepTag(Television[118],Shows[118],dep)
PhraseDepTag(Created[118],Television[118],nsubjpass)
PhraseDepTag(Created[118],Were[118],auxpass)
PhraseDepTag(Created[118],Disney[118],nmod:agent)
PhraseDepTag(Disney[118],By[118],case)
PhraseDepTag(Disney[118],Walt[118],compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'TelevisionShow')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'creator'), ('http://dbpedia.org/resource/', 'Walt_Disney'))]

ResourceType(TelevisionShow[118],Class)
0.83 PriorMatchScore(TelevisionShow[118],Television[118])


ResourceType(Dbo_Creator[118],Relation)
0.57 PriorMatchScore(Dbo_Creator[118],Created[118])


ResourceType(Dbr_Walt_Disney[118],Entity)
0.53 PriorMatchScore(Dbr_Walt_Disney[118],Walt[118])

0.70 PriorMatchScore(Dbr_Walt_Disney[118],Disney[118])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:TelevisionShow . ?uri dbo:creator res:Walt_Disney . }


//Which mountain is the highest after the Annapurna? 
//[u'Which', u'mountain', u'is', u'the', u'highest', u'after', u'the', u'Annapurna', u'?']
PhraseIndex(Which[119],1,1)
PhraseIndex(Mountain[119],2,2)
PhraseIndex(Is[119],3,3)
PhraseIndex(The[119],4,4)
PhraseIndex(Highest[119],5,5)
PhraseIndex(After[119],6,6)
PhraseIndex(The[119],7,7)
PhraseIndex(Annapurna[119],8,8)
PhrasePosTag(Which[119],WDT)
PhrasePosTag(Mountain[119],NN)
PhrasePosTag(Is[119],VBZ)
PhrasePosTag(The[119],DT)
PhrasePosTag(Highest[119],JJS)
PhrasePosTag(After[119],IN)
PhrasePosTag(The[119],DT)
PhrasePosTag(Annapurna[119],NNP)
PhraseDepTag(Annapurna[119],Is[119],root)
PhraseDepTag(Mountain[119],Which[119],det)
PhraseDepTag(Is[119],Mountain[119],dep)
PhraseDepTag(Is[119],Highest[119],nsubj)
PhraseDepTag(Highest[119],The[119],det)
PhraseDepTag(Highest[119],Annapurna[119],nmod:after)
PhraseDepTag(Annapurna[119],After[119],case)
PhraseDepTag(Annapurna[119],The[119],det)
//[(('http://dbpedia.org/resource/', 'Annapurna'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('otherelevation')), (('http://dbpedia.org/resource/', 'Annapurna'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('otherelevation'))]

ResourceType(Dbr_Annapurna[119],Entity)
1.0 PriorMatchScore(Dbr_Annapurna[119],Annapurna[119])


ResourceType(Dbo_Elevation[119],Relation)

ResourceType(Mountain[119],Class)
1.0 PriorMatchScore(Mountain[119],Mountain[119])


ResourceType(Dbo_Elevation[119],Relation)

ResourceType(Dbr_Annapurna[119],Entity)
1.0 PriorMatchScore(Dbr_Annapurna[119],Annapurna[119])


ResourceType(Dbo_Elevation[119],Relation)

ResourceType(Mountain[119],Class)
1.0 PriorMatchScore(Mountain[119],Mountain[119])


ResourceType(Dbo_Elevation[119],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Annapurna dbo:elevation ?elevation . ?uri rdf:type dbo:Mountain . ?uri dbo:elevation ?otherelevation . FILTER (?otherelevation < ?elevation) . } ORDER BY DESC(?otherelevation) OFFSET 0 LIMIT 1


PhraseIndex(In[120],1,1)
PhraseIndex(Which[120],2,2)
PhraseIndex(Films[120],3,3)
PhraseIndex(Directed[120],4,4)
PhraseIndex(By[120],5,5)
PhraseIndex(Garry[120],6,6)
PhraseIndex(Marshall[120],7,7)
PhraseIndex(Was[120],8,8)
PhraseIndex(Julia[120],9,9)
PhraseIndex(Roberts[120],10,10)
PhraseIndex(Starring[120],11,11)

//[u'In', u'Which', u'Films', u'Directed', u'By', u'Garry', u'Marshall', u'Was', u'Julia', u'Roberts', u'Starring']
//In which films directed by Garry Marshall was Julia Roberts starring?

//La ligne est isolée 
PhrasePosTag(In[120],IN)
PhrasePosTag(Which[120],WDT)
PhrasePosTag(Films[120],NNS)
PhrasePosTag(Directed[120],VBN)
PhrasePosTag(By[120],IN)
PhrasePosTag(Garry[120],NNP)
PhrasePosTag(Marshall[120],NNP)
PhrasePosTag(Was[120],VBD)
PhrasePosTag(Julia[120],NNP)
PhrasePosTag(Roberts[120],NNP)
PhrasePosTag(Starring[120],VBG)
PhraseDepTag(Starring[120],Directed[120],root)
PhraseDepTag(Films[120],In[120],case)
PhraseDepTag(Films[120],Which[120],det)
PhraseDepTag(Directed[120],Films[120],nmod:in)
PhraseDepTag(Directed[120],Marshall[120],nmod:by)
PhraseDepTag(Marshall[120],By[120],case)
PhraseDepTag(Marshall[120],Garry[120],compound)
PhraseDepTag(Marshall[120],Roberts[120],acl:relcl)
PhraseDepTag(Roberts[120],Was[120],cop)
PhraseDepTag(Roberts[120],Julia[120],compound)
PhraseDepTag(Roberts[120],Starring[120],acl)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Julia_Roberts')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'director'), ('http://dbpedia.org/resource/', 'Garry_Marshall'))]

ResourceType(Film[120],Class)
0.88 PriorMatchScore(Film[120],Films[120])


ResourceType(Dbo_Starring[120],Relation)
0.87 PriorMatchScore(Dbo_Starring[120],Starring[120])


ResourceType(Dbr_Julia_Roberts[120],Entity)
0.55 PriorMatchScore(Dbr_Julia_Roberts[120],Julia[120])

0.7 PriorMatchScore(Dbr_Julia_Roberts[120],Roberts[120])


ResourceType(Dbo_Director[120],Relation)
0.62 PriorMatchScore(Dbo_Director[120],Directed[120])


ResourceType(Dbr_Garry_Marshall[120],Entity)
0.52 PriorMatchScore(Dbr_Garry_Marshall[120],Garry[120])

0.72 PriorMatchScore(Dbr_Garry_Marshall[120],Marshall[120])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:starring res:Julia_Roberts . ?uri dbo:director res:Garry_Marshall . }


PhraseIndex(Which[121],1,1)
PhraseIndex(Bridges[121],2,2)
PhraseIndex(Are[121],3,3)
PhraseIndex(Of[121],4,4)
PhraseIndex(The[121],5,5)
PhraseIndex(Same[121],6,6)
PhraseIndex(Type[121],7,7)
PhraseIndex(As[121],8,8)
PhraseIndex(The[121],9,9)
PhraseIndex(Manhattan[121],10,10)
PhraseIndex(Bridge[121],11,11)

//[u'Which', u'Bridges', u'Are', u'Of', u'The', u'Same', u'Type', u'As', u'The', u'Manhattan', u'Bridge']
//Which bridges are of the same type as the Manhattan Bridge?

//La ligne est isolée 
PhrasePosTag(Which[121],WDT)
PhrasePosTag(Bridges[121],NNS)
PhrasePosTag(Are[121],VBP)
PhrasePosTag(Of[121],IN)
PhrasePosTag(The[121],DT)
PhrasePosTag(Same[121],JJ)
PhrasePosTag(Type[121],NN)
PhrasePosTag(As[121],IN)
PhrasePosTag(The[121],DT)
PhrasePosTag(Manhattan[121],NNP)
PhrasePosTag(Bridge[121],NNP)
PhraseDepTag(Bridge[121],Are[121],root)
PhraseDepTag(Bridges[121],Which[121],det)
PhraseDepTag(Are[121],Bridges[121],nsubj)
PhraseDepTag(Are[121],Type[121],nmod:of)
PhraseDepTag(Type[121],Of[121],case)
PhraseDepTag(Type[121],The[121],det)
PhraseDepTag(Type[121],Same[121],amod)
PhraseDepTag(Type[121],Bridge[121],nmod:as)
PhraseDepTag(Bridge[121],As[121],case)
PhraseDepTag(Bridge[121],The[121],det)
PhraseDepTag(Bridge[121],Manhattan[121],compound)
//[(('http://dbpedia.org/resource/', 'Andrew_Jackson'), ('http://dbpedia.org/ontology/', 'battle'), SparqlVar('battle'))]

ResourceType(Dbr_Andrew_Jackson[122],Entity)

ResourceType(Dbo_Battle[122],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Andrew_Jackson dbo:battle ?battle . }


//Give me all communist countries. 
//[u'Give', u'me', u'all', u'communist', u'countries', u'.']
PhraseIndex(Give[123],1,1)
PhraseIndex(Me[123],2,2)
PhraseIndex(All[123],3,3)
PhraseIndex(Communist[123],4,4)
PhraseIndex(Countries[123],5,5)
PhrasePosTag(Give[123],VB)
PhrasePosTag(Me[123],PRP)
PhrasePosTag(All[123],DT)
PhrasePosTag(Communist[123],JJ)
PhrasePosTag(Countries[123],NNS)
PhraseDepTag(Countries[123],Give[123],root)
PhraseDepTag(Give[123],Me[123],iobj)
PhraseDepTag(Give[123],Countries[123],dobj)
PhraseDepTag(Countries[123],All[123],det)
PhraseDepTag(Countries[123],Communist[123],amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country'))]

ResourceType(Country[123],Class)
0.62 PriorMatchScore(Country[123],Communist[123])

0.75 PriorMatchScore(Country[123],Countries[123])


ResourceType(Country[123],Class)
0.62 PriorMatchScore(Country[123],Communist[123])

0.75 PriorMatchScore(Country[123],Countries[123])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country . { ?uri dbo:governmentType res:Communism . } UNION { ?uri dbo:governmentType res:Communist_state . } }


//Which awards did WikiLeaks win? 
//[u'Which', u'awards', u'did', u'WikiLeaks', u'win', u'?']
PhraseIndex(Which[124],1,1)
PhraseIndex(Awards[124],2,2)
PhraseIndex(Did[124],3,3)
PhraseIndex(Wikileaks[124],4,4)
PhraseIndex(Win[124],5,5)
PhrasePosTag(Which[124],WDT)
PhrasePosTag(Awards[124],NNS)
PhrasePosTag(Did[124],VBD)
PhrasePosTag(Wikileaks[124],NNP)
PhrasePosTag(Win[124],VB)
PhraseDepTag(Win[124],Win[124],root)
PhraseDepTag(Awards[124],Which[124],det)
PhraseDepTag(Win[124],Awards[124],dobj)
PhraseDepTag(Win[124],Did[124],aux)
PhraseDepTag(Win[124],Wikileaks[124],nsubj)
//[(('http://dbpedia.org/resource/', 'WikiLeaks'), ('http://dbpedia.org/property/', 'awards'), SparqlVar('uri'))]

ResourceType(Dbr_Wikileaks[124],Entity)
0.88 PriorMatchScore(Dbr_Wikileaks[124],Wikileaks[124])


ResourceType(Awards[124],Class)
0.83 PriorMatchScore(Awards[124],Awards[124])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:WikiLeaks dbp:awards ?uri . }


//Who is the daughter of Ingrid Bergman married to? 
//[u'Who', u'is', u'the', u'daughter', u'of', u'Ingrid', u'Bergman', u'married', u'to', u'?']
PhraseIndex(Who[125],1,1)
PhraseIndex(Is[125],2,2)
PhraseIndex(The[125],3,3)
PhraseIndex(Daughter[125],4,4)
PhraseIndex(Of[125],5,5)
PhraseIndex(Ingrid[125],6,6)
PhraseIndex(Bergman[125],7,7)
PhraseIndex(Married[125],8,8)
PhraseIndex(To[125],9,9)
PhrasePosTag(Who[125],WP)
PhrasePosTag(Is[125],VBZ)
PhrasePosTag(The[125],DT)
PhrasePosTag(Daughter[125],NN)
PhrasePosTag(Of[125],IN)
PhrasePosTag(Ingrid[125],NNP)
PhrasePosTag(Bergman[125],NNP)
PhrasePosTag(Married[125],VBN)
PhrasePosTag(To[125],TO)
PhraseDepTag(To[125],Married[125],root)
PhraseDepTag(Daughter[125],The[125],det)
PhraseDepTag(Daughter[125],Bergman[125],nmod:of)
PhraseDepTag(Bergman[125],Of[125],case)
PhraseDepTag(Bergman[125],Ingrid[125],compound)
PhraseDepTag(Married[125],Who[125],dep)
PhraseDepTag(Married[125],Is[125],auxpass)
PhraseDepTag(Married[125],Daughter[125],nsubjpass)
PhraseDepTag(Married[125],To[125],xcomp)
//[(('http://dbpedia.org/resource/', 'Ingrid_Bergman'), ('http://dbpedia.org/ontology/', 'child'), SparqlVar('child')), (SparqlVar('child'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('uri'))]

ResourceType(Dbr_Ingrid_Bergman[125],Entity)
0.6 PriorMatchScore(Dbr_Ingrid_Bergman[125],Ingrid[125])

0.66 PriorMatchScore(Dbr_Ingrid_Bergman[125],Bergman[125])


ResourceType(Dbo_Child[125],Relation)

ResourceType(Dbo_Spouse[125],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child dbo:spouse ?uri . }


PhraseIndex(Which[126],1,1)
PhraseIndex(U.S.[126],2,2)
PhraseIndex(State[126],3,3)
PhraseIndex(Has[126],4,4)
PhraseIndex(The[126],5,5)
PhraseIndex(Highest[126],6,6)
PhraseIndex(Population[126],7,7)
PhraseIndex(Density[126],8,8)

//[u'Which', u'U.S.', u'State', u'Has', u'The', u'Highest', u'Population', u'Density']
//Which U.S. state has the highest population density?

//La ligne est isolée 
PhrasePosTag(Which[126],WDT)
PhrasePosTag(U.S.[126],NNP)
PhrasePosTag(State[126],NN)
PhrasePosTag(Has[126],VBZ)
PhrasePosTag(The[126],DT)
PhrasePosTag(Highest[126],JJS)
PhrasePosTag(Population[126],NN)
PhrasePosTag(Density[126],NN)
PhraseDepTag(Density[126],Has[126],root)
PhraseDepTag(State[126],Which[126],det)
PhraseDepTag(State[126],U.S.[126],compound)
PhraseDepTag(Has[126],State[126],nsubj)
PhraseDepTag(Has[126],Density[126],dobj)
PhraseDepTag(Density[126],The[126],det)
PhraseDepTag(Density[126],Highest[126],amod)
PhraseDepTag(Density[126],Population[126],compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'densityrank'), SparqlVar('rank'))]

ResourceType(StatesOfTheUnitedStates[126],Class)

ResourceType(Densityrank[126],Class)
0.66 PriorMatchScore(Densityrank[126],Density[126])

//PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . ?uri dbp:densityrank ?rank . } ORDER BY ASC(?rank) OFFSET 0 LIMIT 1


//What is the currency of the Czech Republic? 
//[u'What', u'is', u'the', u'currency', u'of', u'the', u'Czech', u'Republic', u'?']
PhraseIndex(What[127],1,1)
PhraseIndex(Is[127],2,2)
PhraseIndex(The[127],3,3)
PhraseIndex(Currency[127],4,4)
PhraseIndex(Of[127],5,5)
PhraseIndex(The[127],6,6)
PhraseIndex(Czech[127],7,7)
PhraseIndex(Republic[127],8,8)
PhrasePosTag(What[127],WP)
PhrasePosTag(Is[127],VBZ)
PhrasePosTag(The[127],DT)
PhrasePosTag(Currency[127],NN)
PhrasePosTag(Of[127],IN)
PhrasePosTag(The[127],DT)
PhrasePosTag(Czech[127],NNP)
PhrasePosTag(Republic[127],NNP)
PhraseDepTag(Republic[127],What[127],root)
PhraseDepTag(What[127],Is[127],cop)
PhraseDepTag(What[127],Currency[127],nsubj)
PhraseDepTag(Currency[127],The[127],det)
PhraseDepTag(Currency[127],Republic[127],nmod:of)
PhraseDepTag(Republic[127],Of[127],case)
PhraseDepTag(Republic[127],The[127],det)
PhraseDepTag(Republic[127],Czech[127],compound)
//[(('http://dbpedia.org/resource/', 'Czech_Republic'), ('http://dbpedia.org/ontology/', 'currency'), SparqlVar('uri'))]

ResourceType(Dbr_Czech_Republic[127],Entity)
0.52 PriorMatchScore(Dbr_Czech_Republic[127],Czech[127])

0.72 PriorMatchScore(Dbr_Czech_Republic[127],Republic[127])


ResourceType(Dbo_Currency[127],Relation)
0.87 PriorMatchScore(Dbo_Currency[127],Currency[127])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Czech_Republic dbo:currency ?uri . }


//Which countries adopted the Euro? 
//[u'Which', u'countries', u'adopted', u'the', u'Euro', u'?']
PhraseIndex(Which[128],1,1)
PhraseIndex(Countries[128],2,2)
PhraseIndex(Adopted[128],3,3)
PhraseIndex(The[128],4,4)
PhraseIndex(Euro[128],5,5)
PhrasePosTag(Which[128],WDT)
PhrasePosTag(Countries[128],NNS)
PhrasePosTag(Adopted[128],VBD)
PhrasePosTag(The[128],DT)
PhrasePosTag(Euro[128],NNP)
PhraseDepTag(Euro[128],Adopted[128],root)
PhraseDepTag(Countries[128],Which[128],det)
PhraseDepTag(Adopted[128],Countries[128],nsubj)
PhraseDepTag(Adopted[128],Euro[128],dobj)
PhraseDepTag(Euro[128],The[128],det)
//[(('http://dbpedia.org/resource/', 'Berlin'), ('http://dbpedia.org/ontology/', 'areaCode'), SparqlVar('string'))]

ResourceType(Dbr_Berlin[129],Entity)

ResourceType(Dbo_Areacode[129],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Berlin dbo:areaCode ?string . }


PhraseIndex(Which[130],1,1)
PhraseIndex(Countries[130],2,2)
PhraseIndex(Have[130],3,3)
PhraseIndex(More[130],4,4)
PhraseIndex(Than[130],5,5)
PhraseIndex(Two[130],6,6)
PhraseIndex(Official[130],7,7)
PhraseIndex(Languages[130],8,8)

//[u'Which', u'Countries', u'Have', u'More', u'Than', u'Two', u'Official', u'Languages']
//Which countries have more than two official languages?

//La ligne est isolée 
PhrasePosTag(Which[130],WDT)
PhrasePosTag(Countries[130],NNS)
PhrasePosTag(Have[130],VBP)
PhrasePosTag(More[130],JJR)
PhrasePosTag(Than[130],IN)
PhrasePosTag(Two[130],CD)
PhrasePosTag(Official[130],JJ)
PhrasePosTag(Languages[130],NNS)
PhraseDepTag(Languages[130],Have[130],root)
PhraseDepTag(Countries[130],Which[130],det)
PhraseDepTag(Have[130],Countries[130],nsubj)
PhraseDepTag(Have[130],Languages[130],dobj)
PhraseDepTag(More[130],Than[130],mwe)
PhraseDepTag(Two[130],More[130],advmod)
PhraseDepTag(Languages[130],Two[130],nummod)
PhraseDepTag(Languages[130],Official[130],amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'officialLanguage'), SparqlVar('language'))]

ResourceType(Country[130],Class)
0.75 PriorMatchScore(Country[130],Countries[130])


ResourceType(Dbo_Officiallanguage[130],Relation)
0.58 PriorMatchScore(Dbo_Officiallanguage[130],Official[130])

0.64 PriorMatchScore(Dbo_Officiallanguage[130],Languages[130])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country . ?uri dbo:officialLanguage ?language . } GROUP BY ?uri HAVING (COUNT(?language) > 2)


//Who is the owner of Universal Studios? 
//[u'Who', u'is', u'the', u'owner', u'of', u'Universal', u'Studios', u'?']
PhraseIndex(Who[131],1,1)
PhraseIndex(Is[131],2,2)
PhraseIndex(The[131],3,3)
PhraseIndex(Owner[131],4,4)
PhraseIndex(Of[131],5,5)
PhraseIndex(Universal[131],6,6)
PhraseIndex(Studios[131],7,7)
PhrasePosTag(Who[131],WP)
PhrasePosTag(Is[131],VBZ)
PhrasePosTag(The[131],DT)
PhrasePosTag(Owner[131],NN)
PhrasePosTag(Of[131],IN)
PhrasePosTag(Universal[131],NNP)
PhrasePosTag(Studios[131],NNP)
PhraseDepTag(Studios[131],Who[131],root)
PhraseDepTag(Who[131],Is[131],cop)
PhraseDepTag(Who[131],Owner[131],nsubj)
PhraseDepTag(Owner[131],The[131],det)
PhraseDepTag(Owner[131],Studios[131],nmod:of)
PhraseDepTag(Studios[131],Of[131],case)
PhraseDepTag(Studios[131],Universal[131],compound)
//[(('http://dbpedia.org/resource/', 'Universal_Studios'), ('http://dbpedia.org/ontology/', 'owner'), SparqlVar('uri'))]

ResourceType(Dbr_Universal_Studios[131],Entity)
0.69 PriorMatchScore(Dbr_Universal_Studios[131],Universal[131])

0.58 PriorMatchScore(Dbr_Universal_Studios[131],Studios[131])


ResourceType(Dbo_Owner[131],Relation)
0.8 PriorMatchScore(Dbo_Owner[131],Owner[131])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri . }


PhraseIndex(Through[132],1,1)
PhraseIndex(Which[132],2,2)
PhraseIndex(Countries[132],3,3)
PhraseIndex(Does[132],4,4)
PhraseIndex(The[132],5,5)
PhraseIndex(Yenisei[132],6,6)
PhraseIndex(River[132],7,7)
PhraseIndex(Flow[132],8,8)

//[u'Through', u'Which', u'Countries', u'Does', u'The', u'Yenisei', u'River', u'Flow']
//Through which countries does the Yenisei river flow?

//La ligne est isolée 
PhrasePosTag(Through[132],IN)
PhrasePosTag(Which[132],WDT)
PhrasePosTag(Countries[132],NNS)
PhrasePosTag(Does[132],VBZ)
PhrasePosTag(The[132],DT)
PhrasePosTag(Yenisei[132],NNP)
PhrasePosTag(River[132],NN)
PhrasePosTag(Flow[132],NN)
PhraseDepTag(Flow[132],Does[132],root)
PhraseDepTag(Which[132],Through[132],case)
PhraseDepTag(Does[132],Which[132],nmod:through)
PhraseDepTag(Does[132],Countries[132],nsubj)
PhraseDepTag(Does[132],Flow[132],dobj)
PhraseDepTag(Flow[132],The[132],det)
PhraseDepTag(Flow[132],Yenisei[132],compound)
PhraseDepTag(Flow[132],River[132],compound)
//[(('http://dbpedia.org/resource/', 'Yenisei_River'), ('http://dbpedia.org/ontology/', 'country'), SparqlVar('uri'))]

ResourceType(Dbr_Yenisei_River[132],Entity)
0.7 PriorMatchScore(Dbr_Yenisei_River[132],Yenisei[132])

0.55 PriorMatchScore(Dbr_Yenisei_River[132],River[132])


ResourceType(Dbo_Country[132],Relation)
0.62 PriorMatchScore(Dbo_Country[132],Countries[132])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Yenisei_River dbo:country ?uri . }


//When did Latvia join the EU? 
//[u'When', u'did', u'Latvia', u'join', u'the', u'EU', u'?']
PhraseIndex(When[133],1,1)
PhraseIndex(Did[133],2,2)
PhraseIndex(Latvia[133],3,3)
PhraseIndex(Join[133],4,4)
PhraseIndex(The[133],5,5)
PhraseIndex(Eu[133],6,6)
PhrasePosTag(When[133],WRB)
PhrasePosTag(Did[133],VBD)
PhrasePosTag(Latvia[133],NNP)
PhrasePosTag(Join[133],VB)
PhrasePosTag(The[133],DT)
PhrasePosTag(Eu[133],NNP)
PhraseDepTag(Eu[133],Join[133],root)
PhraseDepTag(Join[133],When[133],advmod)
PhraseDepTag(Join[133],Did[133],aux)
PhraseDepTag(Join[133],Latvia[133],nsubj)
PhraseDepTag(Join[133],Eu[133],dobj)
PhraseDepTag(Eu[133],The[133],det)
//[(('http://dbpedia.org/resource/', 'Latvia'), ('http://dbpedia.org/property/', 'accessioneudate'), SparqlVar('date'))]

ResourceType(Dbr_Latvia[133],Entity)
1.0 PriorMatchScore(Dbr_Latvia[133],Latvia[133])


ResourceType(Accessioneudate[133],Class)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?date WHERE { res:Latvia dbp:accessioneudate ?date . }


//Which monarchs were married to a German? 
//[u'Which', u'monarchs', u'were', u'married', u'to', u'a', u'German', u'?']
PhraseIndex(Which[134],1,1)
PhraseIndex(Monarchs[134],2,2)
PhraseIndex(Were[134],3,3)
PhraseIndex(Married[134],4,4)
PhraseIndex(To[134],5,5)
PhraseIndex(A[134],6,6)
PhraseIndex(German[134],7,7)
PhrasePosTag(Which[134],WDT)
PhrasePosTag(Monarchs[134],NNS)
PhrasePosTag(Were[134],VBD)
PhrasePosTag(Married[134],VBN)
PhrasePosTag(To[134],TO)
PhrasePosTag(A[134],DT)
PhrasePosTag(German[134],JJ)
PhraseDepTag(German[134],Married[134],root)
PhraseDepTag(Monarchs[134],Which[134],det)
PhraseDepTag(Married[134],Monarchs[134],nsubjpass)
PhraseDepTag(Married[134],Were[134],auxpass)
PhraseDepTag(Married[134],German[134],nmod:to)
PhraseDepTag(German[134],To[134],case)
PhraseDepTag(German[134],A[134],det)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Monarch')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('spouse')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Monarch')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('spouse'))]

ResourceType(Monarch[134],Class)
0.93 PriorMatchScore(Monarch[134],Monarchs[134])


ResourceType(Dbo_Spouse[134],Relation)

ResourceType(Monarch[134],Class)
0.93 PriorMatchScore(Monarch[134],Monarchs[134])


ResourceType(Dbo_Spouse[134],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch . ?uri dbo:spouse ?spouse . { ?spouse dbo:birthPlace res:Germany. } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany. } }


//When was the Battle of Gettysburg? 
//[u'When', u'was', u'the', u'Battle', u'of', u'Gettysburg', u'?']
PhraseIndex(When[135],1,1)
PhraseIndex(Was[135],2,2)
PhraseIndex(The[135],3,3)
PhraseIndex(Battle[135],4,4)
PhraseIndex(Of[135],5,5)
PhraseIndex(Gettysburg[135],6,6)
PhrasePosTag(When[135],WRB)
PhrasePosTag(Was[135],VBD)
PhrasePosTag(The[135],DT)
PhrasePosTag(Battle[135],NN)
PhrasePosTag(Of[135],IN)
PhrasePosTag(Gettysburg[135],NNP)
PhraseDepTag(Gettysburg[135],Was[135],root)
PhraseDepTag(Was[135],When[135],advmod)
PhraseDepTag(Was[135],Battle[135],nsubj)
PhraseDepTag(Battle[135],The[135],det)
PhraseDepTag(Battle[135],Gettysburg[135],nmod:of)
PhraseDepTag(Gettysburg[135],Of[135],case)
//[(('http://dbpedia.org/resource/', 'Battle_of_Gettysburg'), ('http://dbpedia.org/ontology/', 'date'), SparqlVar('date'))]

ResourceType(Dbr_Battle_Of_Gettysburg[135],Entity)
0.66 PriorMatchScore(Dbr_Battle_Of_Gettysburg[135],Gettysburg[135])


ResourceType(Dbo_Date[135],Relation)
0.6 PriorMatchScore(Dbo_Date[135],Battle[135])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Battle_of_Gettysburg dbo:date ?date . }


//Which river does the Brooklyn Bridge cross? 
//[u'Which', u'river', u'does', u'the', u'Brooklyn', u'Bridge', u'cross', u'?']
PhraseIndex(Which[136],1,1)
PhraseIndex(River[136],2,2)
PhraseIndex(Does[136],3,3)
PhraseIndex(The[136],4,4)
PhraseIndex(Brooklyn[136],5,5)
PhraseIndex(Bridge[136],6,6)
PhraseIndex(Cross[136],7,7)
PhrasePosTag(Which[136],WDT)
PhrasePosTag(River[136],NN)
PhrasePosTag(Does[136],VBZ)
PhrasePosTag(The[136],DT)
PhrasePosTag(Brooklyn[136],NNP)
PhrasePosTag(Bridge[136],NNP)
PhrasePosTag(Cross[136],VB)
PhraseDepTag(Cross[136],Cross[136],root)
PhraseDepTag(River[136],Which[136],det)
PhraseDepTag(Bridge[136],The[136],det)
PhraseDepTag(Bridge[136],Brooklyn[136],compound)
PhraseDepTag(Cross[136],River[136],dobj)
PhraseDepTag(Cross[136],Does[136],aux)
PhraseDepTag(Cross[136],Bridge[136],nsubj)
//[(('http://dbpedia.org/resource/', 'Brooklyn_Bridge'), ('http://dbpedia.org/ontology/', 'crosses'), SparqlVar('uri'))]

ResourceType(Dbr_Brooklyn_Bridge[136],Entity)
0.69 PriorMatchScore(Dbr_Brooklyn_Bridge[136],Brooklyn[136])

0.57 PriorMatchScore(Dbr_Brooklyn_Bridge[136],Bridge[136])


ResourceType(Dbo_Crosses[136],Relation)
0.54 PriorMatchScore(Dbo_Crosses[136],Does[136])

0.66 PriorMatchScore(Dbo_Crosses[136],Cross[136])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbo:crosses ?uri . }


//What is the highest mountain in Australia? 
//[u'What', u'is', u'the', u'highest', u'mountain', u'in', u'Australia', u'?']
PhraseIndex(What[137],1,1)
PhraseIndex(Is[137],2,2)
PhraseIndex(The[137],3,3)
PhraseIndex(Highest[137],4,4)
PhraseIndex(Mountain[137],5,5)
PhraseIndex(In[137],6,6)
PhraseIndex(Australia[137],7,7)
PhrasePosTag(What[137],WP)
PhrasePosTag(Is[137],VBZ)
PhrasePosTag(The[137],DT)
PhrasePosTag(Highest[137],JJS)
PhrasePosTag(Mountain[137],NN)
PhrasePosTag(In[137],IN)
PhrasePosTag(Australia[137],NNP)
PhraseDepTag(Australia[137],What[137],root)
PhraseDepTag(What[137],Is[137],cop)
PhraseDepTag(What[137],Mountain[137],nsubj)
PhraseDepTag(Mountain[137],The[137],det)
PhraseDepTag(Mountain[137],Highest[137],amod)
PhraseDepTag(Mountain[137],Australia[137],nmod:in)
PhraseDepTag(Australia[137],In[137],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'locatedInArea'), ('http://dbpedia.org/resource/', 'Australia')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation'))]

ResourceType(Mountain[137],Class)
1.0 PriorMatchScore(Mountain[137],Mountain[137])


ResourceType(Dbo_Locatedinarea[137],Relation)

ResourceType(Dbr_Australia[137],Entity)
1.0 PriorMatchScore(Dbr_Australia[137],Australia[137])


ResourceType(Dbo_Elevation[137],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain . ?uri dbo:locatedInArea res:Australia . ?uri dbo:elevation ?elevation . } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1


//Give me all soccer clubs in Spain. 
//[u'Give', u'me', u'all', u'soccer', u'clubs', u'in', u'Spain', u'.']
PhraseIndex(Give[138],1,1)
PhraseIndex(Me[138],2,2)
PhraseIndex(All[138],3,3)
PhraseIndex(Soccer[138],4,4)
PhraseIndex(Clubs[138],5,5)
PhraseIndex(In[138],6,6)
PhraseIndex(Spain[138],7,7)
PhrasePosTag(Give[138],VB)
PhrasePosTag(Me[138],PRP)
PhrasePosTag(All[138],DT)
PhrasePosTag(Soccer[138],NN)
PhrasePosTag(Clubs[138],NNS)
PhrasePosTag(In[138],IN)
PhrasePosTag(Spain[138],NNP)
PhraseDepTag(Spain[138],Give[138],root)
PhraseDepTag(Give[138],Me[138],iobj)
PhraseDepTag(Give[138],Clubs[138],dobj)
PhraseDepTag(Clubs[138],All[138],det)
PhraseDepTag(Clubs[138],Soccer[138],compound)
PhraseDepTag(Clubs[138],Spain[138],nmod:in)
PhraseDepTag(Spain[138],In[138],case)
//[(('http://dbpedia.org/resource/', 'Suriname'), ('http://dbpedia.org/ontology/', 'officialLanguage'), SparqlVar('uri'))]

ResourceType(Dbr_Suriname[139],Entity)

ResourceType(Dbo_Officiallanguage[139],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Suriname dbo:officialLanguage ?uri . }


//Who is the mayor of Tel Aviv? 
//[u'Who', u'is', u'the', u'mayor', u'of', u'Tel', u'Aviv', u'?']
PhraseIndex(Who[140],1,1)
PhraseIndex(Is[140],2,2)
PhraseIndex(The[140],3,3)
PhraseIndex(Mayor[140],4,4)
PhraseIndex(Of[140],5,5)
PhraseIndex(Tel[140],6,6)
PhraseIndex(Aviv[140],7,7)
PhrasePosTag(Who[140],WP)
PhrasePosTag(Is[140],VBZ)
PhrasePosTag(The[140],DT)
PhrasePosTag(Mayor[140],NN)
PhrasePosTag(Of[140],IN)
PhrasePosTag(Tel[140],NNP)
PhrasePosTag(Aviv[140],NNP)
PhraseDepTag(Aviv[140],Who[140],root)
PhraseDepTag(Who[140],Is[140],cop)
PhraseDepTag(Who[140],Mayor[140],nsubj)
PhraseDepTag(Mayor[140],The[140],det)
PhraseDepTag(Mayor[140],Aviv[140],nmod:of)
PhraseDepTag(Aviv[140],Of[140],case)
PhraseDepTag(Aviv[140],Tel[140],compound)
//[(('http://dbpedia.org/resource/', 'Tel_Aviv'), ('http://dbpedia.org/ontology/', 'leaderName'), SparqlVar('uri'))]

ResourceType(Dbr_Tel_Aviv[140],Entity)
0.54 PriorMatchScore(Dbr_Tel_Aviv[140],Tel[140])

0.66 PriorMatchScore(Dbr_Tel_Aviv[140],Aviv[140])


ResourceType(Dbo_Leadername[140],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Tel_Aviv dbo:leaderName ?uri . }


//Who designed the Brooklyn Bridge? 
//[u'Who', u'designed', u'the', u'Brooklyn', u'Bridge', u'?']
PhraseIndex(Who[141],1,1)
PhraseIndex(Designed[141],2,2)
PhraseIndex(The[141],3,3)
PhraseIndex(Brooklyn[141],4,4)
PhraseIndex(Bridge[141],5,5)
PhrasePosTag(Who[141],WP)
PhrasePosTag(Designed[141],VBD)
PhrasePosTag(The[141],DT)
PhrasePosTag(Brooklyn[141],NNP)
PhrasePosTag(Bridge[141],NNP)
PhraseDepTag(Bridge[141],Designed[141],root)
PhraseDepTag(Designed[141],Who[141],nsubj)
PhraseDepTag(Designed[141],Bridge[141],dobj)
PhraseDepTag(Bridge[141],The[141],det)
PhraseDepTag(Bridge[141],Brooklyn[141],compound)
//[(('http://dbpedia.org/resource/', 'Brooklyn_Bridge'), ('http://dbpedia.org/property/', 'designer'), SparqlVar('uri'))]

ResourceType(Dbr_Brooklyn_Bridge[141],Entity)
0.69 PriorMatchScore(Dbr_Brooklyn_Bridge[141],Brooklyn[141])

0.57 PriorMatchScore(Dbr_Brooklyn_Bridge[141],Bridge[141])


ResourceType(Designer[141],Class)
0.75 PriorMatchScore(Designer[141],Designed[141])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Brooklyn_Bridge dbp:designer ?uri . }


PhraseIndex(Which[142],1,1)
PhraseIndex(Telecommunications[142],2,2)
PhraseIndex(Organizations[142],3,3)
PhraseIndex(Are[142],4,4)
PhraseIndex(Located[142],5,5)
PhraseIndex(In[142],6,6)
PhraseIndex(Belgium[142],7,7)

//[u'Which', u'Telecommunications', u'Organizations', u'Are', u'Located', u'In', u'Belgium']
//Which telecommunications organizations are located in Belgium?

//La ligne est isolée 
PhrasePosTag(Which[142],WDT)
PhrasePosTag(Telecommunications[142],NNS)
PhrasePosTag(Organizations[142],NNS)
PhrasePosTag(Are[142],VBP)
PhrasePosTag(Located[142],JJ)
PhrasePosTag(In[142],IN)
PhrasePosTag(Belgium[142],NNP)
PhraseDepTag(Belgium[142],Located[142],root)
PhraseDepTag(Telecommunications[142],Which[142],det)
PhraseDepTag(Telecommunications[142],Organizations[142],dep)
PhraseDepTag(Located[142],Telecommunications[142],nsubj)
PhraseDepTag(Located[142],Are[142],cop)
PhraseDepTag(Located[142],Belgium[142],nmod:in)
PhraseDepTag(Belgium[142],In[142],case)
//[(('http://dbpedia.org/resource/', 'Ural_Mountains'), ('http://dbpedia.org/ontology/', 'highestPlace'), SparqlVar('uri'))]

ResourceType(Dbr_Ural_Mountains[144],Entity)

ResourceType(Dbo_Highestplace[144],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ural_Mountains dbo:highestPlace ?uri . }


//Who is the editor of Forbes? 
//[u'Who', u'is', u'the', u'editor', u'of', u'Forbes', u'?']
PhraseIndex(Who[145],1,1)
PhraseIndex(Is[145],2,2)
PhraseIndex(The[145],3,3)
PhraseIndex(Editor[145],4,4)
PhraseIndex(Of[145],5,5)
PhraseIndex(Forbes[145],6,6)
PhrasePosTag(Who[145],WP)
PhrasePosTag(Is[145],VBZ)
PhrasePosTag(The[145],DT)
PhrasePosTag(Editor[145],NN)
PhrasePosTag(Of[145],IN)
PhrasePosTag(Forbes[145],NNP)
PhraseDepTag(Forbes[145],Who[145],root)
PhraseDepTag(Who[145],Is[145],cop)
PhraseDepTag(Who[145],Editor[145],nsubj)
PhraseDepTag(Editor[145],The[145],det)
PhraseDepTag(Editor[145],Forbes[145],nmod:of)
PhraseDepTag(Forbes[145],Of[145],case)
//[(('http://dbpedia.org/resource/', 'Forbes'), ('http://dbpedia.org/ontology/', 'editor'), SparqlVar('uri'))]

ResourceType(Dbr_Forbes[145],Entity)
1.0 PriorMatchScore(Dbr_Forbes[145],Forbes[145])


ResourceType(Dbo_Editor[145],Relation)
0.83 PriorMatchScore(Dbo_Editor[145],Editor[145])

//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Forbes dbo:editor ?uri . }


//Give me all companies in the advertising industry. 
//[u'Give', u'me', u'all', u'companies', u'in', u'the', u'advertising', u'industry', u'.']
PhraseIndex(Give[146],1,1)
PhraseIndex(Me[146],2,2)
PhraseIndex(All[146],3,3)
PhraseIndex(Companies[146],4,4)
PhraseIndex(In[146],5,5)
PhraseIndex(The[146],6,6)
PhraseIndex(Advertising[146],7,7)
PhraseIndex(Industry[146],8,8)
PhrasePosTag(Give[146],VB)
PhrasePosTag(Me[146],PRP)
PhrasePosTag(All[146],DT)
PhrasePosTag(Companies[146],NNS)
PhrasePosTag(In[146],IN)
PhrasePosTag(The[146],DT)
PhrasePosTag(Advertising[146],NN)
PhrasePosTag(Industry[146],NN)
PhraseDepTag(Industry[146],Give[146],root)
PhraseDepTag(Give[146],Me[146],iobj)
PhraseDepTag(Give[146],Companies[146],dobj)
PhraseDepTag(Companies[146],All[146],det)
PhraseDepTag(Companies[146],Industry[146],nmod:in)
PhraseDepTag(Industry[146],In[146],case)
PhraseDepTag(Industry[146],The[146],det)
PhraseDepTag(Industry[146],Advertising[146],compound)
//[(('http://dbpedia.org/resource/', 'Bruce_Carver'), ('http://dbpedia.org/ontology/', 'deathCause'), SparqlVar('uri'))]

ResourceType(Dbr_Bruce_Carver[148],Entity)

ResourceType(Dbo_Deathcause[148],Relation)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { res:Bruce_Carver dbo:deathCause ?uri . }


PhraseIndex(Give[149],1,1)
PhraseIndex(Me[149],2,2)
PhraseIndex(All[149],3,3)
PhraseIndex(Libraries[149],4,4)
PhraseIndex(Established[149],5,5)
PhraseIndex(Earlier[149],6,6)
PhraseIndex(Than[149],7,7)
PhraseIndex(1400[149],8,8)

//[u'Give', u'Me', u'All', u'Libraries', u'Established', u'Earlier', u'Than', u'1400']
//Give me all libraries established earlier than 1400.

//La ligne est isolée 
PhrasePosTag(Give[149],VB)
PhrasePosTag(Me[149],PRP)
PhrasePosTag(All[149],DT)
PhrasePosTag(Libraries[149],NNS)
PhrasePosTag(Established[149],VBN)
PhrasePosTag(Earlier[149],JJR)
PhrasePosTag(Than[149],IN)
PhrasePosTag(1400[149],CD)
PhraseDepTag(1400[149],Give[149],root)
PhraseDepTag(Give[149],Me[149],iobj)
PhraseDepTag(Give[149],Libraries[149],dobj)
PhraseDepTag(Libraries[149],All[149],det)
PhraseDepTag(Libraries[149],Established[149],acl)
PhraseDepTag(Established[149],Earlier[149],advmod)
PhraseDepTag(Established[149],1400[149],nmod:than)
PhraseDepTag(1400[149],Than[149],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Library')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'established'), SparqlVar('year')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Library')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'established'), SparqlVar('year'))]

ResourceType(Library[149],Class)
0.75 PriorMatchScore(Library[149],Libraries[149])


ResourceType(Established[149],Class)
0.90 PriorMatchScore(Established[149],Established[149])


ResourceType(Library[149],Class)
0.75 PriorMatchScore(Library[149],Libraries[149])


ResourceType(Established[149],Class)
0.90 PriorMatchScore(Established[149],Established[149])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Library . ?uri dbp:established ?year . FILTER (?year < 1400) }


//Which presidents were born in 1945? 
//[u'Which', u'presidents', u'were', u'born', u'in', u'1945', u'?']
PhraseIndex(Which[150],1,1)
PhraseIndex(Presidents[150],2,2)
PhraseIndex(Were[150],3,3)
PhraseIndex(Born[150],4,4)
PhraseIndex(In[150],5,5)
PhraseIndex(1945[150],6,6)
PhrasePosTag(Which[150],WDT)
PhrasePosTag(Presidents[150],NNS)
PhrasePosTag(Were[150],VBD)
PhrasePosTag(Born[150],VBN)
PhrasePosTag(In[150],IN)
PhrasePosTag(1945[150],CD)
PhraseDepTag(1945[150],Born[150],root)
PhraseDepTag(Presidents[150],Which[150],det)
PhraseDepTag(Born[150],Presidents[150],nsubjpass)
PhraseDepTag(Born[150],Were[150],auxpass)
PhraseDepTag(Born[150],1945[150],nmod:in)
PhraseDepTag(1945[150],In[150],case)
//[(SparqlVar('uri'), ('http://dbpedia.org/property/', 'office'), ('http://dbpedia.org/resource/', 'Chancellor_of_Germany'))]

ResourceType(Office[151],Class)

ResourceType(Dbr_Chancellor_Of_Germany[151],Entity)
//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbp:office res:Chancellor_of_Germany . }


//Who was the wife of U.S. president Lincoln? 
//[u'Who', u'was', u'the', u'wife', u'of', u'U.S.', u'president', u'Lincoln', u'?']
PhraseIndex(Who[152],1,1)
PhraseIndex(Was[152],2,2)
PhraseIndex(The[152],3,3)
PhraseIndex(Wife[152],4,4)
PhraseIndex(Of[152],5,5)
PhraseIndex(U.S.[152],6,6)
PhraseIndex(President[152],7,7)
PhraseIndex(Lincoln[152],8,8)
PhrasePosTag(Who[152],WP)
PhrasePosTag(Was[152],VBD)
PhrasePosTag(The[152],DT)
PhrasePosTag(Wife[152],NN)
PhrasePosTag(Of[152],IN)
PhrasePosTag(U.S.[152],NNP)
PhrasePosTag(President[152],NN)
PhrasePosTag(Lincoln[152],NNP)
PhraseDepTag(Lincoln[152],Who[152],root)
PhraseDepTag(Who[152],Was[152],cop)
PhraseDepTag(Who[152],Wife[152],nsubj)
PhraseDepTag(Wife[152],The[152],det)
PhraseDepTag(Wife[152],Lincoln[152],nmod:of)
PhraseDepTag(Lincoln[152],Of[152],case)
PhraseDepTag(Lincoln[152],U.S.[152],compound)
PhraseDepTag(Lincoln[152],President[152],compound)
//[(('http://dbpedia.org/resource/', 'Abraham_Lincoln'), ('http://dbpedia.org/ontology/', 'spouse'), SparqlVar('uri'))]

ResourceType(Dbr_Abraham_Lincoln[152],Entity)
0.63 PriorMatchScore(Dbr_Abraham_Lincoln[152],Lincoln[152])


ResourceType(Dbo_Spouse[152],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:spouse ?uri. }


//Who developed the video game World of Warcraft? 
//[u'Who', u'developed', u'the', u'video', u'game', u'World', u'of', u'Warcraft', u'?']
PhraseIndex(Who[153],1,1)
PhraseIndex(Developed[153],2,2)
PhraseIndex(The[153],3,3)
PhraseIndex(Video[153],4,4)
PhraseIndex(Game[153],5,5)
PhraseIndex(World[153],6,6)
PhraseIndex(Of[153],7,7)
PhraseIndex(Warcraft[153],8,8)
PhrasePosTag(Who[153],WP)
PhrasePosTag(Developed[153],VBD)
PhrasePosTag(The[153],DT)
PhrasePosTag(Video[153],NN)
PhrasePosTag(Game[153],NN)
PhrasePosTag(World[153],NN)
PhrasePosTag(Of[153],IN)
PhrasePosTag(Warcraft[153],NNP)
PhraseDepTag(Warcraft[153],Developed[153],root)
PhraseDepTag(Developed[153],Who[153],nsubj)
PhraseDepTag(Developed[153],World[153],dobj)
PhraseDepTag(World[153],The[153],det)
PhraseDepTag(World[153],Video[153],compound)
PhraseDepTag(World[153],Game[153],compound)
PhraseDepTag(World[153],Warcraft[153],nmod:of)
PhraseDepTag(Warcraft[153],Of[153],case)
//[(('http://dbpedia.org/resource/', 'World_of_Warcraft'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('uri'))]

ResourceType(Dbr_World_Of_Warcraft[153],Entity)
0.64 PriorMatchScore(Dbr_World_Of_Warcraft[153],Warcraft[153])


ResourceType(Dbo_Developer[153],Relation)
0.77 PriorMatchScore(Dbo_Developer[153],Developed[153])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:World_of_Warcraft dbo:developer ?uri . }


//What is the official website of Tom Cruise? 
//[u'What', u'is', u'the', u'official', u'website', u'of', u'Tom', u'Cruise', u'?']
PhraseIndex(What[154],1,1)
PhraseIndex(Is[154],2,2)
PhraseIndex(The[154],3,3)
PhraseIndex(Official[154],4,4)
PhraseIndex(Website[154],5,5)
PhraseIndex(Of[154],6,6)
PhraseIndex(Tom[154],7,7)
PhraseIndex(Cruise[154],8,8)
PhrasePosTag(What[154],WP)
PhrasePosTag(Is[154],VBZ)
PhrasePosTag(The[154],DT)
PhrasePosTag(Official[154],JJ)
PhrasePosTag(Website[154],NN)
PhrasePosTag(Of[154],IN)
PhrasePosTag(Tom[154],NNP)
PhrasePosTag(Cruise[154],NNP)
PhraseDepTag(Cruise[154],What[154],root)
PhraseDepTag(What[154],Is[154],cop)
PhraseDepTag(What[154],Website[154],nsubj)
PhraseDepTag(Website[154],The[154],det)
PhraseDepTag(Website[154],Official[154],amod)
PhraseDepTag(Website[154],Cruise[154],nmod:of)
PhraseDepTag(Cruise[154],Of[154],case)
PhraseDepTag(Cruise[154],Tom[154],compound)
//[(('http://dbpedia.org/resource/', 'Tom_Cruise'), ('http://dbpedia.org/property/', 'website'), SparqlVar('string'))]

ResourceType(Dbr_Tom_Cruise[154],Entity)
0.75 PriorMatchScore(Dbr_Tom_Cruise[154],Cruise[154])


ResourceType(Website[154],Class)
0.85 PriorMatchScore(Website[154],Website[154])

//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Tom_Cruise dbp:website ?string . }


PhraseIndex(List[155],1,1)
PhraseIndex(All[155],2,2)
PhraseIndex(Episodes[155],3,3)
PhraseIndex(Of[155],4,4)
PhraseIndex(The[155],5,5)
PhraseIndex(First[155],6,6)
PhraseIndex(Season[155],7,7)
PhraseIndex(Of[155],8,8)
PhraseIndex(The[155],9,9)
PhraseIndex(Hbo[155],10,10)
PhraseIndex(Television[155],11,11)
PhraseIndex(Series[155],12,12)
PhraseIndex(The[155],13,13)
PhraseIndex(Sopranos[155],14,14)

//[u'List', u'All', u'Episodes', u'Of', u'The', u'First', u'Season', u'Of', u'The', u'Hbo', u'Television', u'Series', u'The', u'Sopranos']
//List all episodes of the first season of the HBO television series The Sopranos.

//La ligne est isolée 
PhrasePosTag(List[155],VB)
PhrasePosTag(All[155],DT)
PhrasePosTag(Episodes[155],NNS)
PhrasePosTag(Of[155],IN)
PhrasePosTag(The[155],DT)
PhrasePosTag(First[155],JJ)
PhrasePosTag(Season[155],NN)
PhrasePosTag(Of[155],IN)
PhrasePosTag(The[155],DT)
PhrasePosTag(Hbo[155],NNP)
PhrasePosTag(Television[155],NN)
PhrasePosTag(Series[155],NN)
PhrasePosTag(The[155],DT)
PhrasePosTag(Sopranos[155],NNPS)
PhraseDepTag(Sopranos[155],List[155],root)
PhraseDepTag(List[155],Sopranos[155],xcomp)
PhraseDepTag(Episodes[155],All[155],det)
PhraseDepTag(Episodes[155],Season[155],nmod:of)
PhraseDepTag(Season[155],Of[155],case)
PhraseDepTag(Season[155],The[155],det)
PhraseDepTag(Season[155],First[155],amod)
PhraseDepTag(Season[155],Series[155],nmod:of)
PhraseDepTag(Series[155],Of[155],case)
PhraseDepTag(Series[155],The[155],det)
PhraseDepTag(Series[155],Hbo[155],compound)
PhraseDepTag(Series[155],Television[155],compound)
PhraseDepTag(Sopranos[155],Episodes[155],nsubj)
PhraseDepTag(Sopranos[155],The[155],det)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'series'), ('http://dbpedia.org/resource/', 'The_Sopranos')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'seasonNumber'), '1')]

ResourceType(Dbo_Series[155],Relation)
0.83 PriorMatchScore(Dbo_Series[155],Series[155])


ResourceType(Dbr_The_Sopranos[155],Entity)
0.8 PriorMatchScore(Dbr_The_Sopranos[155],Sopranos[155])


ResourceType(Dbo_Seasonnumber[155],Relation)
0.55 PriorMatchScore(Dbo_Seasonnumber[155],Season[155])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:series res:The_Sopranos . ?uri dbo:seasonNumber 1 . }


//Who produced the most films? 
//[u'Who', u'produced', u'the', u'most', u'films', u'?']
PhraseIndex(Who[156],1,1)
PhraseIndex(Produced[156],2,2)
PhraseIndex(The[156],3,3)
PhraseIndex(Most[156],4,4)
PhraseIndex(Films[156],5,5)
PhrasePosTag(Who[156],WP)
PhrasePosTag(Produced[156],VBD)
PhrasePosTag(The[156],DT)
PhrasePosTag(Most[156],RBS)
PhrasePosTag(Films[156],NNS)
PhraseDepTag(Films[156],Produced[156],root)
PhraseDepTag(Produced[156],Who[156],nsubj)
PhraseDepTag(Produced[156],Most[156],advmod)
PhraseDepTag(Produced[156],Films[156],dobj)
PhraseDepTag(Most[156],The[156],det)
//[(('http://dbpedia.org/resource/', 'John_F._Kennedy'), ('http://dbpedia.org/ontology/', 'deathPlace'), SparqlVar('uri')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'City'))]

ResourceType(Dbr_John_F._Kennedy[158],Entity)

ResourceType(Dbo_Deathplace[158],Relation)

ResourceType(City[158],Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:deathPlace ?uri . ?uri rdf:type dbo:City . }


//Is there a video game called Battle Chess? 
//[u'Is', u'there', u'a', u'video', u'game', u'called', u'Battle', u'Chess', u'?']
PhraseIndex(Is[159],1,1)
PhraseIndex(There[159],2,2)
PhraseIndex(A[159],3,3)
PhraseIndex(Video[159],4,4)
PhraseIndex(Game[159],5,5)
PhraseIndex(Called[159],6,6)
PhraseIndex(Battle[159],7,7)
PhraseIndex(Chess[159],8,8)
PhrasePosTag(Is[159],VBZ)
PhrasePosTag(There[159],EX)
PhrasePosTag(A[159],DT)
PhrasePosTag(Video[159],NN)
PhrasePosTag(Game[159],NN)
PhrasePosTag(Called[159],VBN)
PhrasePosTag(Battle[159],NNP)
PhrasePosTag(Chess[159],NNP)
PhraseDepTag(Chess[159],Is[159],root)
PhraseDepTag(Is[159],There[159],expl)
PhraseDepTag(Is[159],Game[159],nsubj)
PhraseDepTag(Game[159],A[159],det)
PhraseDepTag(Game[159],Video[159],compound)
PhraseDepTag(Game[159],Called[159],acl)
PhraseDepTag(Called[159],Chess[159],dobj)
PhraseDepTag(Chess[159],Battle[159],compound)
//[(('http://dbpedia.org/resource/', 'Nanga_Parbat'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (('http://dbpedia.org/resource/', 'Nanga_Parbat'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (('http://dbpedia.org/resource/', 'Nanga_Parbat'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain'))]

ResourceType(Dbr_Nanga_Parbat[160],Entity)

ResourceType(Dbo_Elevation[160],Relation)

ResourceType(Mountain[160],Class)

ResourceType(Dbr_Nanga_Parbat[160],Entity)

ResourceType(Dbo_Elevation[160],Relation)

ResourceType(Mountain[160],Class)

ResourceType(Dbr_Nanga_Parbat[160],Entity)

ResourceType(Dbo_Elevation[160],Relation)

ResourceType(Mountain[160],Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Nanga_Parbat dbo:elevation ?elevation . ?uri rdf:type dbo:Mountain . { ?uri dbo:elevation ?otherelevation . } UNION { ?uri dbp:elevationM ?otherelevation . } FILTER (?otherelevation > ?elevation) . }


//Who created Wikipedia? 
//[u'Who', u'created', u'Wikipedia', u'?']
PhraseIndex(Who[161],1,1)
PhraseIndex(Created[161],2,2)
PhraseIndex(Wikipedia[161],3,3)
PhrasePosTag(Who[161],WP)
PhrasePosTag(Created[161],VBD)
PhrasePosTag(Wikipedia[161],NNP)
PhraseDepTag(Wikipedia[161],Created[161],root)
PhraseDepTag(Created[161],Who[161],nsubj)
PhraseDepTag(Created[161],Wikipedia[161],dobj)
//[(('http://dbpedia.org/resource/', 'Wikipedia'), ('http://dbpedia.org/ontology/', 'author'), SparqlVar('uri'))]

ResourceType(Dbr_Wikipedia[161],Entity)
1.0 PriorMatchScore(Dbr_Wikipedia[161],Wikipedia[161])


ResourceType(Dbo_Author[161],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Wikipedia dbo:author ?uri . }


//Give me all actors starring in Last Action Hero. 
//[u'Give', u'me', u'all', u'actors', u'starring', u'in', u'Last', u'Action', u'Hero', u'.']
PhraseIndex(Give[162],1,1)
PhraseIndex(Me[162],2,2)
PhraseIndex(All[162],3,3)
PhraseIndex(Actors[162],4,4)
PhraseIndex(Starring[162],5,5)
PhraseIndex(In[162],6,6)
PhraseIndex(Last[162],7,7)
PhraseIndex(Action[162],8,8)
PhraseIndex(Hero[162],9,9)
PhrasePosTag(Give[162],VB)
PhrasePosTag(Me[162],PRP)
PhrasePosTag(All[162],DT)
PhrasePosTag(Actors[162],NNS)
PhrasePosTag(Starring[162],VBG)
PhrasePosTag(In[162],IN)
PhrasePosTag(Last[162],JJ)
PhrasePosTag(Action[162],NNP)
PhrasePosTag(Hero[162],NNP)
PhraseDepTag(Hero[162],Give[162],root)
PhraseDepTag(Give[162],Me[162],iobj)
PhraseDepTag(Give[162],Actors[162],dobj)
PhraseDepTag(Actors[162],All[162],det)
PhraseDepTag(Actors[162],Starring[162],acl)
PhraseDepTag(Starring[162],Hero[162],nmod:in)
PhraseDepTag(Hero[162],In[162],case)
PhraseDepTag(Hero[162],Last[162],amod)
PhraseDepTag(Hero[162],Action[162],compound)
//[(('http://dbpedia.org/resource/', 'Last_Action_Hero'), ('http://dbpedia.org/ontology/', 'starring'), SparqlVar('uri'))]

ResourceType(Dbr_Last_Action_Hero[162],Entity)
0.54 PriorMatchScore(Dbr_Last_Action_Hero[162],Action[162])


ResourceType(Dbo_Starring[162],Relation)
0.87 PriorMatchScore(Dbo_Starring[162],Starring[162])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Last_Action_Hero dbo:starring ?uri . }


PhraseIndex(Which[163],1,1)
PhraseIndex(Software[163],2,2)
PhraseIndex(Has[163],3,3)
PhraseIndex(Been[163],4,4)
PhraseIndex(Developed[163],5,5)
PhraseIndex(By[163],6,6)
PhraseIndex(Organizations[163],7,7)
PhraseIndex(Founded[163],8,8)
PhraseIndex(In[163],9,9)
PhraseIndex(California[163],10,10)

//[u'Which', u'Software', u'Has', u'Been', u'Developed', u'By', u'Organizations', u'Founded', u'In', u'California']
//Which software has been developed by organizations founded in California?

//La ligne est isolée 
PhrasePosTag(Which[163],WDT)
PhrasePosTag(Software[163],NN)
PhrasePosTag(Has[163],VBZ)
PhrasePosTag(Been[163],VBN)
PhrasePosTag(Developed[163],VBN)
PhrasePosTag(By[163],IN)
PhrasePosTag(Organizations[163],NNS)
PhrasePosTag(Founded[163],VBN)
PhrasePosTag(In[163],IN)
PhrasePosTag(California[163],NNP)
PhraseDepTag(California[163],Developed[163],root)
PhraseDepTag(Software[163],Which[163],det)
PhraseDepTag(Developed[163],Software[163],nsubjpass)
PhraseDepTag(Developed[163],Has[163],aux)
PhraseDepTag(Developed[163],Been[163],auxpass)
PhraseDepTag(Developed[163],Organizations[163],nmod:agent)
PhraseDepTag(Organizations[163],By[163],case)
PhraseDepTag(Organizations[163],Founded[163],acl)
PhraseDepTag(Founded[163],California[163],nmod:in)
PhraseDepTag(California[163],In[163],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Software')), (SparqlVar('company'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('company')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Software')), (SparqlVar('company'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'developer'), SparqlVar('company'))]

ResourceType(Software[163],Class)
1.0 PriorMatchScore(Software[163],Software[163])


ResourceType(Company[163],Class)

ResourceType(Dbo_Developer[163],Relation)
0.77 PriorMatchScore(Dbo_Developer[163],Developed[163])


ResourceType(Software[163],Class)
1.0 PriorMatchScore(Software[163],Software[163])


ResourceType(Company[163],Class)

ResourceType(Dbo_Developer[163],Relation)
0.77 PriorMatchScore(Dbo_Developer[163],Developed[163])

//PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Software . ?company rdf:type dbo:Company . ?uri dbo:developer ?company . { ?company dbo:foundationPlace res:California . } UNION { ?company dbp:foundation res:California . } }


PhraseIndex(Which[164],1,1)
PhraseIndex(Companies[164],2,2)
PhraseIndex(Work[164],3,3)
PhraseIndex(In[164],4,4)
PhraseIndex(The[164],5,5)
PhraseIndex(Aerospace[164],6,6)
PhraseIndex(Industry[164],7,7)
PhraseIndex(As[164],8,8)
PhraseIndex(Well[164],9,9)
PhraseIndex(As[164],10,10)
PhraseIndex(In[164],11,11)
PhraseIndex(Medicine[164],12,12)

//[u'Which', u'Companies', u'Work', u'In', u'The', u'Aerospace', u'Industry', u'As', u'Well', u'As', u'In', u'Medicine']
//Which companies work in the aerospace industry as well as in medicine?

//La ligne est isolée 
PhrasePosTag(Which[164],WDT)
PhrasePosTag(Companies[164],NNS)
PhrasePosTag(Work[164],VBP)
PhrasePosTag(In[164],IN)
PhrasePosTag(The[164],DT)
PhrasePosTag(Aerospace[164],NN)
PhrasePosTag(Industry[164],NN)
PhrasePosTag(As[164],RB)
PhrasePosTag(Well[164],RB)
PhrasePosTag(As[164],IN)
PhrasePosTag(In[164],IN)
PhrasePosTag(Medicine[164],NN)
PhraseDepTag(Medicine[164],Work[164],root)
PhraseDepTag(Work[164],Which[164],dobj)
PhraseDepTag(Work[164],Companies[164],nsubj)
PhraseDepTag(Work[164],Work[164],conj:and)
PhraseDepTag(Work[164],Industry[164],nmod:in)
PhraseDepTag(Work[164],As[164],cc)
PhraseDepTag(Work[164],Companies[164],nsubj)
PhraseDepTag(Work[164],Medicine[164],nmod:in)
PhraseDepTag(Industry[164],In[164],case)
PhraseDepTag(Industry[164],The[164],det)
PhraseDepTag(Industry[164],Aerospace[164],compound)
PhraseDepTag(As[164],Well[164],mwe)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'industry'), ('http://dbpedia.org/resource/', 'Aerospace')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'industry'), ('http://dbpedia.org/resource/', 'Medicine'))]

ResourceType(Company[164],Class)
0.75 PriorMatchScore(Company[164],Companies[164])


ResourceType(Dbo_Industry[164],Relation)
0.87 PriorMatchScore(Dbo_Industry[164],Industry[164])


ResourceType(Dbr_Aerospace[164],Entity)
1.0 PriorMatchScore(Dbr_Aerospace[164],Aerospace[164])


ResourceType(Dbo_Industry[164],Relation)
0.87 PriorMatchScore(Dbo_Industry[164],Industry[164])


ResourceType(Dbr_Medicine[164],Entity)
1.0 PriorMatchScore(Dbr_Medicine[164],Medicine[164])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Company . ?uri dbo:industry res:Aerospace . ?uri dbo:industry res:Medicine . }


//Is Christian Bale starring in Velvet Goldmine? 
//[u'Is', u'Christian', u'Bale', u'starring', u'in', u'Velvet', u'Goldmine', u'?']
PhraseIndex(Is[165],1,1)
PhraseIndex(Christian[165],2,2)
PhraseIndex(Bale[165],3,3)
PhraseIndex(Starring[165],4,4)
PhraseIndex(In[165],5,5)
PhraseIndex(Velvet[165],6,6)
PhraseIndex(Goldmine[165],7,7)
PhrasePosTag(Is[165],VBZ)
PhrasePosTag(Christian[165],NNP)
PhrasePosTag(Bale[165],NNP)
PhrasePosTag(Starring[165],VBG)
PhrasePosTag(In[165],IN)
PhrasePosTag(Velvet[165],NNP)
PhrasePosTag(Goldmine[165],NNP)
PhraseDepTag(Goldmine[165],Starring[165],root)
PhraseDepTag(Bale[165],Christian[165],compound)
PhraseDepTag(Starring[165],Is[165],aux)
PhraseDepTag(Starring[165],Bale[165],nsubj)
PhraseDepTag(Starring[165],Goldmine[165],nmod:in)
PhraseDepTag(Goldmine[165],In[165],case)
PhraseDepTag(Goldmine[165],Velvet[165],compound)
//[(('http://dbpedia.org/resource/', 'Velvet_Goldmine'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Christian_Bale'))]

ResourceType(Dbr_Velvet_Goldmine[165],Entity)
0.57 PriorMatchScore(Dbr_Velvet_Goldmine[165],Velvet[165])

0.69 PriorMatchScore(Dbr_Velvet_Goldmine[165],Goldmine[165])


ResourceType(Dbo_Starring[165],Relation)
0.87 PriorMatchScore(Dbo_Starring[165],Starring[165])


ResourceType(Dbr_Christian_Bale[165],Entity)
0.78 PriorMatchScore(Dbr_Christian_Bale[165],Christian[165])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Velvet_Goldmine dbo:starring res:Christian_Bale . }


PhraseIndex(Give[166],1,1)
PhraseIndex(Me[166],2,2)
PhraseIndex(The[166],3,3)
PhraseIndex(Websites[166],4,4)
PhraseIndex(Of[166],5,5)
PhraseIndex(Companies[166],6,6)
PhraseIndex(With[166],7,7)
PhraseIndex(More[166],8,8)
PhraseIndex(Than[166],9,9)
PhraseIndex(500000[166],10,10)
PhraseIndex(Employees[166],11,11)

//[u'Give', u'Me', u'The', u'Websites', u'Of', u'Companies', u'With', u'More', u'Than', u'500000', u'Employees']
//Give me the websites of companies with more than 500000 employees.

//La ligne est isolée 
PhrasePosTag(Give[166],VB)
PhrasePosTag(Me[166],PRP)
PhrasePosTag(The[166],DT)
PhrasePosTag(Websites[166],NNS)
PhrasePosTag(Of[166],IN)
PhrasePosTag(Companies[166],NNS)
PhrasePosTag(With[166],IN)
PhrasePosTag(More[166],JJR)
PhrasePosTag(Than[166],IN)
PhrasePosTag(500000[166],CD)
PhrasePosTag(Employees[166],NNS)
PhraseDepTag(Employees[166],Give[166],root)
PhraseDepTag(Give[166],Me[166],iobj)
PhraseDepTag(Give[166],Websites[166],dobj)
PhraseDepTag(Websites[166],The[166],det)
PhraseDepTag(Websites[166],Companies[166],nmod:of)
PhraseDepTag(Companies[166],Of[166],case)
PhraseDepTag(Companies[166],Employees[166],nmod:with)
PhraseDepTag(More[166],Than[166],mwe)
PhraseDepTag(500000[166],More[166],advmod)
PhraseDepTag(Employees[166],With[166],case)
PhraseDepTag(Employees[166],500000[166],nummod)
//[(SparqlVar('c'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('c'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Company')), (SparqlVar('c'), ('http://dbpedia.org/property/', 'homepage'), SparqlVar('string'))]

ResourceType(Company[166],Class)
0.75 PriorMatchScore(Company[166],Companies[166])


ResourceType(Company[166],Class)
0.75 PriorMatchScore(Company[166],Companies[166])


ResourceType(Homepage[166],Class)
0.58 PriorMatchScore(Homepage[166],Companies[166])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> SELECT DISTINCT ?string WHERE { ?c rdf:type dbo:Company . { ?c dbo:numberOfEmployees ?employees . } UNION { ?c dbp:numEmployees ?employees . } FILTER( xsd:integer(?employees) > 500000 ) . ?c dbp:homepage ?string . }


//Which actors were born in Germany? 
//[u'Which', u'actors', u'were', u'born', u'in', u'Germany', u'?']
PhraseIndex(Which[167],1,1)
PhraseIndex(Actors[167],2,2)
PhraseIndex(Were[167],3,3)
PhraseIndex(Born[167],4,4)
PhraseIndex(In[167],5,5)
PhraseIndex(Germany[167],6,6)
PhrasePosTag(Which[167],WDT)
PhrasePosTag(Actors[167],NNS)
PhrasePosTag(Were[167],VBD)
PhrasePosTag(Born[167],VBN)
PhrasePosTag(In[167],IN)
PhrasePosTag(Germany[167],NNP)
PhraseDepTag(Germany[167],Born[167],root)
PhraseDepTag(Actors[167],Which[167],det)
PhraseDepTag(Born[167],Actors[167],nsubjpass)
PhraseDepTag(Born[167],Were[167],auxpass)
PhraseDepTag(Born[167],Germany[167],nmod:in)
PhraseDepTag(Germany[167],In[167],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Actor')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Actor'))]

ResourceType(Actor[167],Class)
0.90 PriorMatchScore(Actor[167],Actors[167])


ResourceType(Actor[167],Class)
0.90 PriorMatchScore(Actor[167],Actors[167])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Actor . { ?uri dbo:birthPlace res:Germany . } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country res:Germany . } }


//Which caves have more than 3 entrances? 
//[u'Which', u'caves', u'have', u'more', u'than', u'3', u'entrances', u'?']
PhraseIndex(Which[168],1,1)
PhraseIndex(Caves[168],2,2)
PhraseIndex(Have[168],3,3)
PhraseIndex(More[168],4,4)
PhraseIndex(Than[168],5,5)
PhraseIndex(3[168],6,6)
PhraseIndex(Entrances[168],7,7)
PhrasePosTag(Which[168],WDT)
PhrasePosTag(Caves[168],NNS)
PhrasePosTag(Have[168],VBP)
PhrasePosTag(More[168],JJR)
PhrasePosTag(Than[168],IN)
PhrasePosTag(3[168],CD)
PhrasePosTag(Entrances[168],NNS)
PhraseDepTag(Entrances[168],Have[168],root)
PhraseDepTag(Caves[168],Which[168],det)
PhraseDepTag(Have[168],Caves[168],nsubj)
PhraseDepTag(Have[168],Entrances[168],dobj)
PhraseDepTag(More[168],Than[168],mwe)
PhraseDepTag(3[168],More[168],advmod)
PhraseDepTag(Entrances[168],3[168],nummod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'entranceCount'), SparqlVar('entrance')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave')), (SparqlVar('uri'), ('http://dbpedia.org/property/', 'entranceCount'), SparqlVar('entrance'))]

ResourceType(Cave[168],Class)
0.88 PriorMatchScore(Cave[168],Caves[168])

0.75 PriorMatchScore(Cave[168],Have[168])


ResourceType(Entrancecount[168],Class)
0.63 PriorMatchScore(Entrancecount[168],Entrances[168])


ResourceType(Cave[168],Class)
0.88 PriorMatchScore(Cave[168],Caves[168])

0.75 PriorMatchScore(Cave[168],Have[168])


ResourceType(Entrancecount[168],Class)
0.63 PriorMatchScore(Entrancecount[168],Entrances[168])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Cave . ?uri dbp:entranceCount ?entrance . FILTER (?entrance > 3) . }


//Is the wife of president Obama called Michelle? 
//[u'Is', u'the', u'wife', u'of', u'president', u'Obama', u'called', u'Michelle', u'?']
PhraseIndex(Is[169],1,1)
PhraseIndex(The[169],2,2)
PhraseIndex(Wife[169],3,3)
PhraseIndex(Of[169],4,4)
PhraseIndex(President[169],5,5)
PhraseIndex(Obama[169],6,6)
PhraseIndex(Called[169],7,7)
PhraseIndex(Michelle[169],8,8)
PhrasePosTag(Is[169],VBZ)
PhrasePosTag(The[169],DT)
PhrasePosTag(Wife[169],NN)
PhrasePosTag(Of[169],IN)
PhrasePosTag(President[169],NN)
PhrasePosTag(Obama[169],NNP)
PhrasePosTag(Called[169],VBD)
PhrasePosTag(Michelle[169],NNP)
PhraseDepTag(Michelle[169],Obama[169],root)
PhraseDepTag(Wife[169],The[169],det)
PhraseDepTag(Obama[169],Is[169],cop)
PhraseDepTag(Obama[169],Wife[169],nsubj)
PhraseDepTag(Obama[169],Of[169],advmod)
PhraseDepTag(Obama[169],President[169],dep)
PhraseDepTag(Obama[169],Called[169],acl:relcl)
PhraseDepTag(Called[169],Michelle[169],dobj)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'producer'), ('http://dbpedia.org/resource/', 'Hal_Roach'))]

ResourceType(Film[170],Class)

ResourceType(Dbo_Producer[170],Relation)

ResourceType(Dbr_Hal_Roach[170],Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:producer res:Hal_Roach . }


PhraseIndex(Give[171],1,1)
PhraseIndex(Me[171],2,2)
PhraseIndex(All[171],3,3)
PhraseIndex(Video[171],4,4)
PhraseIndex(Games[171],5,5)
PhraseIndex(Published[171],6,6)
PhraseIndex(By[171],7,7)
PhraseIndex(Mean[171],8,8)
PhraseIndex(Hamster[171],9,9)
PhraseIndex(Software[171],10,10)

//[u'Give', u'Me', u'All', u'Video', u'Games', u'Published', u'By', u'Mean', u'Hamster', u'Software']
//Give me all video games published by Mean Hamster Software.

//La ligne est isolée 
PhrasePosTag(Give[171],VB)
PhrasePosTag(Me[171],PRP)
PhrasePosTag(All[171],DT)
PhrasePosTag(Video[171],NN)
PhrasePosTag(Games[171],NNS)
PhrasePosTag(Published[171],VBN)
PhrasePosTag(By[171],IN)
PhrasePosTag(Mean[171],NN)
PhrasePosTag(Hamster[171],NNP)
PhrasePosTag(Software[171],NNP)
PhraseDepTag(Software[171],Give[171],root)
PhraseDepTag(Give[171],Me[171],iobj)
PhraseDepTag(Give[171],Games[171],dobj)
PhraseDepTag(Games[171],All[171],det)
PhraseDepTag(Games[171],Video[171],compound)
PhraseDepTag(Games[171],Published[171],acl)
PhraseDepTag(Published[171],Software[171],nmod:by)
PhraseDepTag(Software[171],By[171],case)
PhraseDepTag(Software[171],Mean[171],compound)
PhraseDepTag(Software[171],Hamster[171],compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'VideoGame')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'publisher'), ('http://dbpedia.org/resource/', 'Mean_Hamster_Software'))]

ResourceType(VideoGame[171],Class)
0.71 PriorMatchScore(VideoGame[171],Video[171])

0.57 PriorMatchScore(VideoGame[171],Games[171])


ResourceType(Dbo_Publisher[171],Relation)
0.77 PriorMatchScore(Dbo_Publisher[171],Published[171])


ResourceType(Dbr_Mean_Hamster_Software[171],Entity)
0.55 PriorMatchScore(Dbr_Mean_Hamster_Software[171],Software[171])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:VideoGame . ?uri dbo:publisher res:Mean_Hamster_Software . }


//Which languages are spoken in Estonia? 
//[u'Which', u'languages', u'are', u'spoken', u'in', u'Estonia', u'?']
PhraseIndex(Which[172],1,1)
PhraseIndex(Languages[172],2,2)
PhraseIndex(Are[172],3,3)
PhraseIndex(Spoken[172],4,4)
PhraseIndex(In[172],5,5)
PhraseIndex(Estonia[172],6,6)
PhrasePosTag(Which[172],WDT)
PhrasePosTag(Languages[172],NNS)
PhrasePosTag(Are[172],VBP)
PhrasePosTag(Spoken[172],VBN)
PhrasePosTag(In[172],IN)
PhrasePosTag(Estonia[172],NNP)
PhraseDepTag(Estonia[172],Spoken[172],root)
PhraseDepTag(Languages[172],Which[172],det)
PhraseDepTag(Spoken[172],Languages[172],nsubjpass)
PhraseDepTag(Spoken[172],Are[172],auxpass)
PhraseDepTag(Spoken[172],Estonia[172],nmod:in)
PhraseDepTag(Estonia[172],In[172],case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'spokenIn'), ('http://dbpedia.org/resource/', 'Estonia'))]

ResourceType(Dbo_Spokenin[172],Relation)
0.71 PriorMatchScore(Dbo_Spokenin[172],Spoken[172])


ResourceType(Dbr_Estonia[172],Entity)
1.0 PriorMatchScore(Dbr_Estonia[172],Estonia[172])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:spokenIn res:Estonia . }


//How many Aldi stores are there? 
//[u'How', u'many', u'Aldi', u'stores', u'are', u'there', u'?']
PhraseIndex(How[173],1,1)
PhraseIndex(Many[173],2,2)
PhraseIndex(Aldi[173],3,3)
PhraseIndex(Stores[173],4,4)
PhraseIndex(Are[173],5,5)
PhraseIndex(There[173],6,6)
PhrasePosTag(How[173],WRB)
PhrasePosTag(Many[173],JJ)
PhrasePosTag(Aldi[173],NNP)
PhrasePosTag(Stores[173],NNS)
PhrasePosTag(Are[173],VBP)
PhrasePosTag(There[173],EX)
PhraseDepTag(There[173],Are[173],root)
PhraseDepTag(Many[173],How[173],advmod)
PhraseDepTag(Aldi[173],Many[173],amod)
PhraseDepTag(Aldi[173],Stores[173],dep)
PhraseDepTag(Are[173],Aldi[173],nsubj)
PhraseDepTag(Are[173],There[173],expl)
//[(('http://dbpedia.org/resource/', 'Aldi'), ('http://dbpedia.org/ontology/', 'numberOfLocations'), SparqlVar('number'))]

ResourceType(Dbr_Aldi[173],Entity)
1.0 PriorMatchScore(Dbr_Aldi[173],Aldi[173])


ResourceType(Dbo_Numberoflocations[173],Relation)
//PREFIX res: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?number WHERE { res:Aldi dbo:numberOfLocations ?number . }


PhraseIndex(Which[174],1,1)
PhraseIndex(Capitals[174],2,2)
PhraseIndex(In[174],3,3)
PhraseIndex(Europe[174],4,4)
PhraseIndex(Were[174],5,5)
PhraseIndex(Host[174],6,6)
PhraseIndex(Cities[174],7,7)
PhraseIndex(Of[174],8,8)
PhraseIndex(The[174],9,9)
PhraseIndex(Summer[174],10,10)
PhraseIndex(Olympic[174],11,11)
PhraseIndex(Games[174],12,12)

//[u'Which', u'Capitals', u'In', u'Europe', u'Were', u'Host', u'Cities', u'Of', u'The', u'Summer', u'Olympic', u'Games']
//Which capitals in Europe were host cities of the summer olympic games?

//La ligne est isolée 
PhrasePosTag(Which[174],WDT)
PhrasePosTag(Capitals[174],NNS)
PhrasePosTag(In[174],IN)
PhrasePosTag(Europe[174],NNP)
PhrasePosTag(Were[174],VBD)
PhrasePosTag(Host[174],NN)
PhrasePosTag(Cities[174],NNS)
PhrasePosTag(Of[174],IN)
PhrasePosTag(The[174],DT)
PhrasePosTag(Summer[174],NN)
PhrasePosTag(Olympic[174],JJ)
PhrasePosTag(Games[174],NNS)
PhraseDepTag(Games[174],Were[174],root)
PhraseDepTag(Capitals[174],Which[174],det)
PhraseDepTag(Capitals[174],Europe[174],nmod:in)
PhraseDepTag(Europe[174],In[174],case)
PhraseDepTag(Were[174],Capitals[174],dep)
PhraseDepTag(Were[174],Cities[174],nsubj)
PhraseDepTag(Cities[174],Host[174],compound)
PhraseDepTag(Cities[174],Games[174],nmod:of)
PhraseDepTag(Games[174],Of[174],case)
PhraseDepTag(Games[174],The[174],det)
PhraseDepTag(Games[174],Summer[174],compound)
PhraseDepTag(Games[174],Olympic[174],amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'CapitalsInEurope')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'HostCitiesOfTheSummerOlympicGames'))]

ResourceType(CapitalsInEurope[174],Class)
0.66 PriorMatchScore(CapitalsInEurope[174],Capitals[174])

0.54 PriorMatchScore(CapitalsInEurope[174],Europe[174])


ResourceType(HostCitiesOfTheSummerOlympicGames[174],Class)
//PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:CapitalsInEurope . ?uri rdf:type yago:HostCitiesOfTheSummerOlympicGames . }


//Who was the first president of the United States? 
//[u'Who', u'was', u'the', u'first', u'president', u'of', u'the', u'United', u'States', u'?']
PhraseIndex(Who[175],1,1)
PhraseIndex(Was[175],2,2)
PhraseIndex(The[175],3,3)
PhraseIndex(First[175],4,4)
PhraseIndex(President[175],5,5)
PhraseIndex(Of[175],6,6)
PhraseIndex(The[175],7,7)
PhraseIndex(United[175],8,8)
PhraseIndex(States[175],9,9)
PhrasePosTag(Who[175],WP)
PhrasePosTag(Was[175],VBD)
PhrasePosTag(The[175],DT)
PhrasePosTag(First[175],JJ)
PhrasePosTag(President[175],NN)
PhrasePosTag(Of[175],IN)
PhrasePosTag(The[175],DT)
PhrasePosTag(United[175],NNP)
PhrasePosTag(States[175],NNPS)
PhraseDepTag(States[175],Who[175],root)
PhraseDepTag(Who[175],Was[175],cop)
PhraseDepTag(Who[175],President[175],nsubj)
PhraseDepTag(President[175],The[175],det)
PhraseDepTag(President[175],First[175],amod)
PhraseDepTag(President[175],States[175],nmod:of)
PhraseDepTag(States[175],Of[175],case)
PhraseDepTag(States[175],The[175],det)
PhraseDepTag(States[175],United[175],compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Airport')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Airport'))]

ResourceType(Airport[179],Class)

ResourceType(Airport[179],Class)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Airport . { ?uri dbo:location res:California . } UNION { ?uri dbo:city res:California . } UNION { ?uri dbo:city ?city . ?city dbo:isPartOf res:California . } UNION { ?uri dbo:operator res:California . } }


PhraseIndex(Which[180],1,1)
PhraseIndex(States[180],2,2)
PhraseIndex(Of[180],3,3)
PhraseIndex(Germany[180],4,4)
PhraseIndex(Are[180],5,5)
PhraseIndex(Governed[180],6,6)
PhraseIndex(By[180],7,7)
PhraseIndex(The[180],8,8)
PhraseIndex(Social[180],9,9)
PhraseIndex(Democratic[180],10,10)
PhraseIndex(Party[180],11,11)

//[u'Which', u'States', u'Of', u'Germany', u'Are', u'Governed', u'By', u'The', u'Social', u'Democratic', u'Party']
//Which states of Germany are governed by the Social Democratic Party?

//La ligne est isolée 
PhrasePosTag(Which[180],WDT)
PhrasePosTag(States[180],NNS)
PhrasePosTag(Of[180],IN)
PhrasePosTag(Germany[180],NNP)
PhrasePosTag(Are[180],VBP)
PhrasePosTag(Governed[180],VBN)
PhrasePosTag(By[180],IN)
PhrasePosTag(The[180],DT)
PhrasePosTag(Social[180],NNP)
PhrasePosTag(Democratic[180],NNP)
PhrasePosTag(Party[180],NNP)
PhraseDepTag(Party[180],Governed[180],root)
PhraseDepTag(States[180],Which[180],det)
PhraseDepTag(States[180],Germany[180],nmod:of)
PhraseDepTag(Germany[180],Of[180],case)
PhraseDepTag(Governed[180],States[180],nsubjpass)
PhraseDepTag(Governed[180],Are[180],auxpass)
PhraseDepTag(Governed[180],Party[180],nmod:agent)
PhraseDepTag(Party[180],By[180],case)
PhraseDepTag(Party[180],The[180],det)
PhraseDepTag(Party[180],Social[180],compound)
PhraseDepTag(Party[180],Democratic[180],compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'RecordLabel')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'genre'), ('http://dbpedia.org/resource/', 'Grunge')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Canada'))]

ResourceType(RecordLabel[181],Class)

ResourceType(Dbo_Genre[181],Relation)

ResourceType(Dbr_Grunge[181],Entity)
0.57 PriorMatchScore(Dbr_Grunge[181],Governed[181])


ResourceType(Dbo_Country[181],Relation)

ResourceType(Dbr_Canada[181],Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:RecordLabel . ?uri dbo:genre res:Grunge . ?uri dbo:country res:Canada . }


//Which country has the most official languages? 
//[u'Which', u'country', u'has', u'the', u'most', u'official', u'languages', u'?']
PhraseIndex(Which[182],1,1)
PhraseIndex(Country[182],2,2)
PhraseIndex(Has[182],3,3)
PhraseIndex(The[182],4,4)
PhraseIndex(Most[182],5,5)
PhraseIndex(Official[182],6,6)
PhraseIndex(Languages[182],7,7)
PhrasePosTag(Which[182],WDT)
PhrasePosTag(Country[182],NN)
PhrasePosTag(Has[182],VBZ)
PhrasePosTag(The[182],DT)
PhrasePosTag(Most[182],RBS)
PhrasePosTag(Official[182],JJ)
PhrasePosTag(Languages[182],NNS)
PhraseDepTag(Languages[182],Has[182],root)
PhraseDepTag(Country[182],Which[182],det)
PhraseDepTag(Has[182],Country[182],nsubj)
PhraseDepTag(Has[182],Languages[182],dobj)
PhraseDepTag(Languages[182],The[182],det)
PhraseDepTag(Languages[182],Most[182],advmod)
PhraseDepTag(Languages[182],Official[182],amod)
//[(('http://dbpedia.org/resource/', 'GIMP'), ('http://dbpedia.org/ontology/', 'programmingLanguage'), SparqlVar('uri'))]

ResourceType(Dbr_Gimp[183],Entity)

ResourceType(Dbo_Programminglanguage[183],Relation)
0.57 PriorMatchScore(Dbo_Programminglanguage[183],Languages[183])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:GIMP dbo:programmingLanguage ?uri . }


//Who produced films starring Natalie Portman? 
//[u'Who', u'produced', u'films', u'starring', u'Natalie', u'Portman', u'?']
PhraseIndex(Who[184],1,1)
PhraseIndex(Produced[184],2,2)
PhraseIndex(Films[184],3,3)
PhraseIndex(Starring[184],4,4)
PhraseIndex(Natalie[184],5,5)
PhraseIndex(Portman[184],6,6)
PhrasePosTag(Who[184],WP)
PhrasePosTag(Produced[184],VBD)
PhrasePosTag(Films[184],NNS)
PhrasePosTag(Starring[184],VBG)
PhrasePosTag(Natalie[184],NNP)
PhrasePosTag(Portman[184],NNP)
PhraseDepTag(Portman[184],Produced[184],root)
PhraseDepTag(Produced[184],Who[184],nsubj)
PhraseDepTag(Produced[184],Films[184],dobj)
PhraseDepTag(Produced[184],Starring[184],xcomp)
PhraseDepTag(Starring[184],Portman[184],dobj)
PhraseDepTag(Portman[184],Natalie[184],compound)
//[(SparqlVar('film'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('film'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Natalie_Portman')), (SparqlVar('film'), ('http://dbpedia.org/ontology/', 'producer'), SparqlVar('uri'))]

ResourceType(Film[184],Class)
0.88 PriorMatchScore(Film[184],Films[184])


ResourceType(Dbo_Starring[184],Relation)
0.87 PriorMatchScore(Dbo_Starring[184],Starring[184])


ResourceType(Dbr_Natalie_Portman[184],Entity)
0.63 PriorMatchScore(Dbr_Natalie_Portman[184],Natalie[184])

0.63 PriorMatchScore(Dbr_Natalie_Portman[184],Portman[184])


ResourceType(Dbo_Producer[184],Relation)
0.75 PriorMatchScore(Dbo_Producer[184],Produced[184])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?film rdf:type dbo:Film . ?film dbo:starring res:Natalie_Portman . ?film dbo:producer ?uri . }


//Give me all movies with Tom Cruise. 
//[u'Give', u'me', u'all', u'movies', u'with', u'Tom', u'Cruise', u'.']
PhraseIndex(Give[185],1,1)
PhraseIndex(Me[185],2,2)
PhraseIndex(All[185],3,3)
PhraseIndex(Movies[185],4,4)
PhraseIndex(With[185],5,5)
PhraseIndex(Tom[185],6,6)
PhraseIndex(Cruise[185],7,7)
PhrasePosTag(Give[185],VB)
PhrasePosTag(Me[185],PRP)
PhrasePosTag(All[185],DT)
PhrasePosTag(Movies[185],NNS)
PhrasePosTag(With[185],IN)
PhrasePosTag(Tom[185],NNP)
PhrasePosTag(Cruise[185],NNP)
PhraseDepTag(Cruise[185],Give[185],root)
PhraseDepTag(Give[185],Me[185],iobj)
PhraseDepTag(Give[185],Movies[185],dobj)
PhraseDepTag(Movies[185],All[185],det)
PhraseDepTag(Movies[185],Cruise[185],nmod:with)
PhraseDepTag(Cruise[185],With[185],case)
PhraseDepTag(Cruise[185],Tom[185],compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Tom_Cruise'))]

ResourceType(Film[185],Class)

ResourceType(Dbo_Starring[185],Relation)

ResourceType(Dbr_Tom_Cruise[185],Entity)
0.75 PriorMatchScore(Dbr_Tom_Cruise[185],Cruise[185])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film. ?uri dbo:starring res:Tom_Cruise . }


PhraseIndex(In[186],1,1)
PhraseIndex(Which[186],2,2)
PhraseIndex(Films[186],3,3)
PhraseIndex(Did[186],4,4)
PhraseIndex(Julia[186],5,5)
PhraseIndex(Roberts[186],6,6)
PhraseIndex(As[186],7,7)
PhraseIndex(Well[186],8,8)
PhraseIndex(As[186],9,9)
PhraseIndex(Richard[186],10,10)
PhraseIndex(Gere[186],11,11)
PhraseIndex(Play[186],12,12)

//[u'In', u'Which', u'Films', u'Did', u'Julia', u'Roberts', u'As', u'Well', u'As', u'Richard', u'Gere', u'Play']
//In which films did Julia Roberts as well as Richard Gere play?

//La ligne est isolée 
PhrasePosTag(In[186],IN)
PhrasePosTag(Which[186],WDT)
PhrasePosTag(Films[186],NNS)
PhrasePosTag(Did[186],VBD)
PhrasePosTag(Julia[186],NNP)
PhrasePosTag(Roberts[186],NNP)
PhrasePosTag(As[186],RB)
PhrasePosTag(Well[186],RB)
PhrasePosTag(As[186],IN)
PhrasePosTag(Richard[186],NNP)
PhrasePosTag(Gere[186],NNP)
PhrasePosTag(Play[186],VB)
PhraseDepTag(Play[186],Play[186],root)
PhraseDepTag(Films[186],In[186],case)
PhraseDepTag(Films[186],Which[186],det)
PhraseDepTag(Roberts[186],Julia[186],compound)
PhraseDepTag(As[186],Well[186],mwe)
PhraseDepTag(As[186],Gere[186],nmod:as)
PhraseDepTag(Gere[186],As[186],case)
PhraseDepTag(Gere[186],Richard[186],compound)
PhraseDepTag(Play[186],Films[186],nmod:in)
PhraseDepTag(Play[186],Did[186],aux)
PhraseDepTag(Play[186],Roberts[186],nsubj)
PhraseDepTag(Play[186],As[186],advmod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Film')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Julia_Roberts')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'starring'), ('http://dbpedia.org/resource/', 'Richard_Gere'))]

ResourceType(Film[186],Class)
0.88 PriorMatchScore(Film[186],Films[186])


ResourceType(Dbo_Starring[186],Relation)

ResourceType(Dbr_Julia_Roberts[186],Entity)
0.55 PriorMatchScore(Dbr_Julia_Roberts[186],Julia[186])

0.7 PriorMatchScore(Dbr_Julia_Roberts[186],Roberts[186])


ResourceType(Dbo_Starring[186],Relation)

ResourceType(Dbr_Richard_Gere[186],Entity)
0.73 PriorMatchScore(Dbr_Richard_Gere[186],Richard[186])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film . ?uri dbo:starring res:Julia_Roberts . ?uri dbo:starring res:Richard_Gere. }


//Give me all female given names. 
//[u'Give', u'me', u'all', u'female', u'given', u'names', u'.']
PhraseIndex(Give[187],1,1)
PhraseIndex(Me[187],2,2)
PhraseIndex(All[187],3,3)
PhraseIndex(Female[187],4,4)
PhraseIndex(Given[187],5,5)
PhraseIndex(Names[187],6,6)
PhrasePosTag(Give[187],VB)
PhrasePosTag(Me[187],PRP)
PhrasePosTag(All[187],DT)
PhrasePosTag(Female[187],JJ)
PhrasePosTag(Given[187],JJ)
PhrasePosTag(Names[187],NNS)
PhraseDepTag(Names[187],Give[187],root)
PhraseDepTag(Give[187],Me[187],iobj)
PhraseDepTag(Give[187],Names[187],dobj)
PhraseDepTag(Names[187],All[187],det)
PhraseDepTag(Names[187],Female[187],amod)
PhraseDepTag(Names[187],Given[187],amod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'GivenName')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'gender'), ('http://dbpedia.org/resource/', 'Female'))]

ResourceType(GivenName[187],Class)
0.61 PriorMatchScore(GivenName[187],Give[187])

0.71 PriorMatchScore(GivenName[187],Given[187])

0.57 PriorMatchScore(GivenName[187],Names[187])


ResourceType(Dbo_Gender[187],Relation)

ResourceType(Dbr_Female[187],Entity)
1.0 PriorMatchScore(Dbr_Female[187],Female[187])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:GivenName . ?uri dbo:gender res:Female . }


//Who wrote the book The Pillars of the Earth? 
//[u'Who', u'wrote', u'the', u'book', u'The', u'Pillars', u'of', u'the', u'Earth', u'?']
PhraseIndex(Who[188],1,1)
PhraseIndex(Wrote[188],2,2)
PhraseIndex(The[188],3,3)
PhraseIndex(Book[188],4,4)
PhraseIndex(The[188],5,5)
PhraseIndex(Pillars[188],6,6)
PhraseIndex(Of[188],7,7)
PhraseIndex(The[188],8,8)
PhraseIndex(Earth[188],9,9)
PhrasePosTag(Who[188],WP)
PhrasePosTag(Wrote[188],VBD)
PhrasePosTag(The[188],DT)
PhrasePosTag(Book[188],NN)
PhrasePosTag(The[188],DT)
PhrasePosTag(Pillars[188],NNPS)
PhrasePosTag(Of[188],IN)
PhrasePosTag(The[188],DT)
PhrasePosTag(Earth[188],NNP)
PhraseDepTag(Earth[188],Wrote[188],root)
PhraseDepTag(Wrote[188],Who[188],nsubj)
PhraseDepTag(Wrote[188],Book[188],iobj)
PhraseDepTag(Wrote[188],Pillars[188],dobj)
PhraseDepTag(Book[188],The[188],det)
PhraseDepTag(Pillars[188],The[188],det)
PhraseDepTag(Pillars[188],Earth[188],nmod:of)
PhraseDepTag(Earth[188],Of[188],case)
PhraseDepTag(Earth[188],The[188],det)
//[(('http://dbpedia.org/resource/', 'The_Pillars_of_the_Earth'), ('http://dbpedia.org/ontology/', 'author'), SparqlVar('uri'))]

ResourceType(Dbr_The_Pillars_Of_The_Earth[188],Entity)

ResourceType(Dbo_Author[188],Relation)
0.54 PriorMatchScore(Dbo_Author[188],Earth[188])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri . }


//How many films did Leonardo DiCaprio star in? 
//[u'How', u'many', u'films', u'did', u'Leonardo', u'DiCaprio', u'star', u'in', u'?']
PhraseIndex(How[189],1,1)
PhraseIndex(Many[189],2,2)
PhraseIndex(Films[189],3,3)
PhraseIndex(Did[189],4,4)
PhraseIndex(Leonardo[189],5,5)
PhraseIndex(Dicaprio[189],6,6)
PhraseIndex(Star[189],7,7)
PhraseIndex(In[189],8,8)
PhrasePosTag(How[189],WRB)
PhrasePosTag(Many[189],JJ)
PhrasePosTag(Films[189],NNS)
PhrasePosTag(Did[189],VBD)
PhrasePosTag(Leonardo[189],NNP)
PhrasePosTag(Dicaprio[189],NNP)
PhrasePosTag(Star[189],NN)
PhrasePosTag(In[189],IN)
PhraseDepTag(In[189],Did[189],root)
PhraseDepTag(Many[189],How[189],advmod)
PhraseDepTag(Films[189],Many[189],amod)
PhraseDepTag(Films[189],In[189],case)
PhraseDepTag(Did[189],Films[189],nmod:in)
PhraseDepTag(Did[189],Star[189],dobj)
PhraseDepTag(Star[189],Leonardo[189],compound)
PhraseDepTag(Star[189],Dicaprio[189],compound)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'SoccerClub')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'league'), ('http://dbpedia.org/resource/', 'Premier_League'))]

ResourceType(SoccerClub[190],Class)

ResourceType(Dbo_League[190],Relation)

ResourceType(Dbr_Premier_League[190],Entity)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:SoccerClub . ?uri dbo:league res:Premier_League . }


//In which U.S. state is Mount McKinley located? 
//[u'In', u'which', u'U.S.', u'state', u'is', u'Mount', u'McKinley', u'located', u'?']
PhraseIndex(In[191],1,1)
PhraseIndex(Which[191],2,2)
PhraseIndex(U.S.[191],3,3)
PhraseIndex(State[191],4,4)
PhraseIndex(Is[191],5,5)
PhraseIndex(Mount[191],6,6)
PhraseIndex(Mckinley[191],7,7)
PhraseIndex(Located[191],8,8)
PhrasePosTag(In[191],IN)
PhrasePosTag(Which[191],WDT)
PhrasePosTag(U.S.[191],NNP)
PhrasePosTag(State[191],NN)
PhrasePosTag(Is[191],VBZ)
PhrasePosTag(Mount[191],NNP)
PhrasePosTag(Mckinley[191],NNP)
PhrasePosTag(Located[191],JJ)
PhraseDepTag(Located[191],Located[191],root)
PhraseDepTag(State[191],In[191],case)
PhraseDepTag(State[191],Which[191],det)
PhraseDepTag(State[191],U.S.[191],compound)
PhraseDepTag(Mckinley[191],Mount[191],compound)
PhraseDepTag(Located[191],State[191],nmod:in)
PhraseDepTag(Located[191],Is[191],cop)
PhraseDepTag(Located[191],Mckinley[191],nsubj)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/class/yago/', 'StatesOfTheUnitedStates')), (('http://dbpedia.org/resource/', 'Mount_McKinley'), ('http://dbpedia.org/ontology/', 'locatedInArea'), SparqlVar('uri'))]

ResourceType(StatesOfTheUnitedStates[191],Class)

ResourceType(Dbr_Mount_Mckinley[191],Entity)
0.52 PriorMatchScore(Dbr_Mount_Mckinley[191],Mount[191])

0.63 PriorMatchScore(Dbr_Mount_Mckinley[191],Mckinley[191])


ResourceType(Dbo_Locatedinarea[191],Relation)
0.6 PriorMatchScore(Dbo_Locatedinarea[191],Located[191])

//PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:StatesOfTheUnitedStates . res:Mount_McKinley dbo:locatedInArea ?uri . }


//When was Capcom founded? 
//[u'When', u'was', u'Capcom', u'founded', u'?']
PhraseIndex(When[192],1,1)
PhraseIndex(Was[192],2,2)
PhraseIndex(Capcom[192],3,3)
PhraseIndex(Founded[192],4,4)
PhrasePosTag(When[192],WRB)
PhrasePosTag(Was[192],VBD)
PhrasePosTag(Capcom[192],NNP)
PhrasePosTag(Founded[192],VBN)
PhraseDepTag(Founded[192],Founded[192],root)
PhraseDepTag(Founded[192],When[192],advmod)
PhraseDepTag(Founded[192],Was[192],auxpass)
PhraseDepTag(Founded[192],Capcom[192],nsubjpass)
//[(('http://dbpedia.org/resource/', 'Capcom'), ('http://dbpedia.org/ontology/', 'foundingDate'), SparqlVar('date'))]

ResourceType(Dbr_Capcom[192],Entity)
1.0 PriorMatchScore(Dbr_Capcom[192],Capcom[192])


ResourceType(Dbo_Foundingdate[192],Relation)
0.52 PriorMatchScore(Dbo_Foundingdate[192],Founded[192])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Capcom dbo:foundingDate ?date . }


//Which organizations were founded in 1930? 
//[u'Which', u'organizations', u'were', u'founded', u'in', u'1930', u'?']
PhraseIndex(Which[193],1,1)
PhraseIndex(Organizations[193],2,2)
PhraseIndex(Were[193],3,3)
PhraseIndex(Founded[193],4,4)
PhraseIndex(In[193],5,5)
PhraseIndex(1930[193],6,6)
PhrasePosTag(Which[193],WDT)
PhrasePosTag(Organizations[193],NNS)
PhrasePosTag(Were[193],VBD)
PhrasePosTag(Founded[193],VBN)
PhrasePosTag(In[193],IN)
PhrasePosTag(1930[193],CD)
PhraseDepTag(1930[193],Founded[193],root)
PhraseDepTag(Organizations[193],Which[193],det)
PhraseDepTag(Founded[193],Organizations[193],nsubjpass)
PhraseDepTag(Founded[193],Were[193],auxpass)
PhraseDepTag(Founded[193],1930[193],nmod:in)
PhraseDepTag(1930[193],In[193],case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation'))]

ResourceType(Mountain[194],Class)

ResourceType(Dbo_Elevation[194],Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain . ?uri dbo:elevation ?elevation . } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1


//Was Natalie Portman born in the United States? 
//[u'Was', u'Natalie', u'Portman', u'born', u'in', u'the', u'United', u'States', u'?']
PhraseIndex(Was[195],1,1)
PhraseIndex(Natalie[195],2,2)
PhraseIndex(Portman[195],3,3)
PhraseIndex(Born[195],4,4)
PhraseIndex(In[195],5,5)
PhraseIndex(The[195],6,6)
PhraseIndex(United[195],7,7)
PhraseIndex(States[195],8,8)
PhrasePosTag(Was[195],VBD)
PhrasePosTag(Natalie[195],NNP)
PhrasePosTag(Portman[195],NNP)
PhrasePosTag(Born[195],VBN)
PhrasePosTag(In[195],IN)
PhrasePosTag(The[195],DT)
PhrasePosTag(United[195],NNP)
PhrasePosTag(States[195],NNPS)
PhraseDepTag(States[195],Born[195],root)
PhraseDepTag(Portman[195],Natalie[195],compound)
PhraseDepTag(Born[195],Was[195],auxpass)
PhraseDepTag(Born[195],Portman[195],nsubjpass)
PhraseDepTag(Born[195],States[195],nmod:in)
PhraseDepTag(States[195],In[195],case)
PhraseDepTag(States[195],The[195],det)
PhraseDepTag(States[195],United[195],compound)
//[(('http://dbpedia.org/resource/', 'Natalie_Portman'), ('http://dbpedia.org/ontology/', 'birthPlace'), SparqlVar('city')), (SparqlVar('city'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'United_States'))]

ResourceType(Dbr_Natalie_Portman[195],Entity)
0.63 PriorMatchScore(Dbr_Natalie_Portman[195],Natalie[195])

0.63 PriorMatchScore(Dbr_Natalie_Portman[195],Portman[195])


ResourceType(Dbo_Birthplace[195],Relation)

ResourceType(Dbo_Country[195],Relation)

ResourceType(Dbr_United_States[195],Entity)
0.63 PriorMatchScore(Dbr_United_States[195],United[195])

0.63 PriorMatchScore(Dbr_United_States[195],States[195])

//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Natalie_Portman dbo:birthPlace ?city . ?city dbo:country res:United_States . }


PhraseIndex(Which[196],1,1)
PhraseIndex(Budget[196],2,2)
PhraseIndex(Did[196],3,3)
PhraseIndex(The[196],4,4)
PhraseIndex(First[196],5,5)
PhraseIndex(Movie[196],6,6)
PhraseIndex(Of[196],7,7)
PhraseIndex(Zdenek[196],8,8)
PhraseIndex(Sverak[196],9,9)
PhraseIndex(Have[196],10,10)

//[u'Which', u'Budget', u'Did', u'The', u'First', u'Movie', u'Of', u'Zdenek', u'Sverak', u'Have']
//Which budget did the first movie of Zdenek Sverak have?

//La ligne est isolée 
PhrasePosTag(Which[196],WDT)
PhrasePosTag(Budget[196],NN)
PhrasePosTag(Did[196],VBD)
PhrasePosTag(The[196],DT)
PhrasePosTag(First[196],JJ)
PhrasePosTag(Movie[196],NN)
PhrasePosTag(Of[196],IN)
PhrasePosTag(Zdenek[196],NNP)
PhrasePosTag(Sverak[196],NNP)
PhrasePosTag(Have[196],VB)
PhraseDepTag(Have[196],Have[196],root)
PhraseDepTag(Budget[196],Which[196],det)
PhraseDepTag(Movie[196],The[196],det)
PhraseDepTag(Movie[196],First[196],amod)
PhraseDepTag(Movie[196],Sverak[196],nmod:of)
PhraseDepTag(Sverak[196],Of[196],case)
PhraseDepTag(Sverak[196],Zdenek[196],compound)
PhraseDepTag(Have[196],Budget[196],dobj)
PhraseDepTag(Have[196],Did[196],aux)
PhraseDepTag(Have[196],Movie[196],nsubj)
PhraseIndex(How[197],1,1)
PhraseIndex(Many[197],2,2)
PhraseIndex(Big[197],3,3)
PhraseIndex(Fires[197],4,4)
PhraseIndex(Struck[197],5,5)
PhraseIndex(Paris[197],6,6)
PhraseIndex(During[197],7,7)
PhraseIndex(The[197],8,8)
PhraseIndex(Middle[197],9,9)
PhraseIndex(Ages[197],10,10)

//[u'How', u'Many', u'Big', u'Fires', u'Struck', u'Paris', u'During', u'The', u'Middle', u'Ages']
//How many big fires struck Paris during the Middle Ages?

//La ligne est isolée 
PhrasePosTag(How[197],WRB)
PhrasePosTag(Many[197],JJ)
PhrasePosTag(Big[197],JJ)
PhrasePosTag(Fires[197],NNS)
PhrasePosTag(Struck[197],VBD)
PhrasePosTag(Paris[197],NNP)
PhrasePosTag(During[197],IN)
PhrasePosTag(The[197],DT)
PhrasePosTag(Middle[197],NNP)
PhrasePosTag(Ages[197],NNPS)
PhraseDepTag(Ages[197],Struck[197],root)
PhraseDepTag(Many[197],How[197],advmod)
PhraseDepTag(Fires[197],Many[197],amod)
PhraseDepTag(Fires[197],Big[197],amod)
PhraseDepTag(Struck[197],Fires[197],nsubj)
PhraseDepTag(Struck[197],Paris[197],dobj)
PhraseDepTag(Struck[197],Ages[197],nmod:during)
PhraseDepTag(Ages[197],During[197],case)
PhraseDepTag(Ages[197],The[197],det)
PhraseDepTag(Ages[197],Middle[197],compound)
//Is Jens Friebe a vegan? 
//[u'Is', u'Jens', u'Friebe', u'a', u'vegan', u'?']
PhraseIndex(Is[198],1,1)
PhraseIndex(Jens[198],2,2)
PhraseIndex(Friebe[198],3,3)
PhraseIndex(A[198],4,4)
PhraseIndex(Vegan[198],5,5)
PhrasePosTag(Is[198],VBZ)
PhrasePosTag(Jens[198],NNP)
PhrasePosTag(Friebe[198],NNP)
PhrasePosTag(A[198],DT)
PhrasePosTag(Vegan[198],NN)
PhraseDepTag(Vegan[198],Vegan[198],root)
PhraseDepTag(Friebe[198],Jens[198],compound)
PhraseDepTag(Vegan[198],Is[198],cop)
PhraseDepTag(Vegan[198],Friebe[198],nsubj)
PhraseDepTag(Vegan[198],A[198],det)
//How often was Michael Jordan divorced? 
//[u'How', u'often', u'was', u'Michael', u'Jordan', u'divorced', u'?']
PhraseIndex(How[199],1,1)
PhraseIndex(Often[199],2,2)
PhraseIndex(Was[199],3,3)
PhraseIndex(Michael[199],4,4)
PhraseIndex(Jordan[199],5,5)
PhraseIndex(Divorced[199],6,6)
PhrasePosTag(How[199],WRB)
PhrasePosTag(Often[199],RB)
PhrasePosTag(Was[199],VBD)
PhrasePosTag(Michael[199],NNP)
PhrasePosTag(Jordan[199],NNP)
PhrasePosTag(Divorced[199],VBN)
PhraseDepTag(Divorced[199],Divorced[199],root)
PhraseDepTag(Often[199],How[199],advmod)
PhraseDepTag(Jordan[199],Michael[199],compound)
PhraseDepTag(Divorced[199],Often[199],advmod)
PhraseDepTag(Divorced[199],Was[199],auxpass)
PhraseDepTag(Divorced[199],Jordan[199],nsubjpass)
//What is the most beautiful painting? 
//[u'What', u'is', u'the', u'most', u'beautiful', u'painting', u'?']
PhraseIndex(What[200],1,1)
PhraseIndex(Is[200],2,2)
PhraseIndex(The[200],3,3)
PhraseIndex(Most[200],4,4)
PhraseIndex(Beautiful[200],5,5)
PhraseIndex(Painting[200],6,6)
PhrasePosTag(What[200],WP)
PhrasePosTag(Is[200],VBZ)
PhrasePosTag(The[200],DT)
PhrasePosTag(Most[200],RBS)
PhrasePosTag(Beautiful[200],JJ)
PhrasePosTag(Painting[200],NN)
PhraseDepTag(Painting[200],What[200],root)
PhraseDepTag(What[200],Is[200],cop)
PhraseDepTag(What[200],Painting[200],nsubj)
PhraseDepTag(Beautiful[200],Most[200],advmod)
PhraseDepTag(Painting[200],The[200],det)
PhraseDepTag(Painting[200],Beautiful[200],amod)
PhraseIndex(Give[201],1,1)
PhraseIndex(Me[201],2,2)
PhraseIndex(All[201],3,3)
PhraseIndex(Animal[201],4,4)
PhraseIndex(Species[201],5,5)
PhraseIndex(That[201],6,6)
PhraseIndex(Live[201],7,7)
PhraseIndex(In[201],8,8)
PhraseIndex(The[201],9,9)
PhraseIndex(Teutoburg[201],10,10)
PhraseIndex(Forest[201],11,11)

//[u'Give', u'Me', u'All', u'Animal', u'Species', u'That', u'Live', u'In', u'The', u'Teutoburg', u'Forest']
//Give me all animal species that live in the Teutoburg Forest.

//La ligne est isolée 
PhrasePosTag(Give[201],VB)
PhrasePosTag(Me[201],PRP)
PhrasePosTag(All[201],DT)
PhrasePosTag(Animal[201],NN)
PhrasePosTag(Species[201],NNS)
PhrasePosTag(That[201],WDT)
PhrasePosTag(Live[201],VBP)
PhrasePosTag(In[201],IN)
PhrasePosTag(The[201],DT)
PhrasePosTag(Teutoburg[201],NNP)
PhrasePosTag(Forest[201],NNP)
PhraseDepTag(Forest[201],Give[201],root)
PhraseDepTag(Give[201],Me[201],iobj)
PhraseDepTag(Give[201],Species[201],dobj)
PhraseDepTag(Species[201],All[201],det)
PhraseDepTag(Species[201],Animal[201],compound)
PhraseDepTag(Species[201],Live[201],acl:relcl)
PhraseDepTag(Live[201],That[201],nsubj)
PhraseDepTag(Live[201],Forest[201],nmod:in)
PhraseDepTag(Forest[201],In[201],case)
PhraseDepTag(Forest[201],The[201],det)
PhraseDepTag(Forest[201],Teutoburg[201],compound)
