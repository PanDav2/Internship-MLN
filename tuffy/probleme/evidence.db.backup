
2) Who is the mayor of Berlin? 

//u_u = 1_1 | u_d = 1_2 | d_u = 2_1 | d_d = 2_2

[u'Who', u'is', u'the', u'mayor', u'of', u'Berlin', u'?']
PhrasePosTag(Who,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Mayor,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Berlin,NNP)
phraseDepTag(Berlin,Who,root)
phraseDepTag(Who,Is,cop)
phraseDepTag(Who,Mayor,nsubj)
phraseDepTag(Mayor,The,det)
phraseDepTag(Mayor,Berlin,nmod:of)
phraseDepTag(Berlin,Of,case)
[(('http://dbpedia.org/resource/', 'Berlin'), ('http://dbpedia.org/ontology/', 'leader'), SparqlVar('uri'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Berlin dbo:leader ?uri . }

PhraseIndex(Who,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Mayor,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(Berlin,6,6)

PriorMatchScore(Berlin,Berlin,0.9)
PriorMatchScore(Who,Uri,0.8)
priorMatchScore(Mayor,Uri,0.75)

ResourceType(Berlin,Entity)
ResourceType(Leader,Relation)
ResourceType(Uri,Entity)
	

 
*** HANDCRAFTED

HasPhrase(Berlin)

HasResource(Berlin,Berlin)

HasResource(Mayor,Uri)

HasRelation(Berlin,leader,U_u)

HasRelation(Uri,leader,D_d)




3)How many students does the Free University in Amsterdam have?

PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Students,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Free,6,6)
PhraseIndex(University,7,7)
PhraseIndex(In,8,8)
PhraseIndex(Amsterdam,9,9)
PhraseIndex(Have,10,10)
PhraseIndex(?,11,11)

phraseDepTag(?,Have,Root)
phraseDepTag(Many,How,Advmod)
phraseDepTag(Students,Many,Amod)
phraseDepTag(University,The,Det)
phraseDepTag(University,Free,Compound)
phraseDepTag(University,Amsterdam,Nmod:In)
phraseDepTag(Amsterdam,In,Case)
phraseDepTag(Have,Students,Dobj)
phraseDepTag(Have,Does,Aux)
phraseDepTag(Have,University,Nsubj)

phrasePosTag(How,WRB)
phrasePosTag(Many,JJ)
phrasePosTag(Students,NNS)
phrasePosTag(Does,VBZ)
phrasePosTag(The,DT)
phrasePosTag(Free,NNP)
phrasePosTag(University,NNP)
phrasePosTag(In,IN)
phrasePosTag(Amsterdam,NNP)
phrasePosTag(Have,VB)








[(('http://dbpedia.org/resource/', 'Vrije_Universiteit'), ('http://dbpedia.org/ontology/', 'numberOfStudents'), SparqlVar('num'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Vrije_Universiteit dbo:numberOfStudents ?num . }


3)Give me all professional skateboarders from Sweden.

PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Professional,4,4)
PhraseIndex(Skateboarders,5,5)
PhraseIndex(From,6,6)
PhraseIndex(Sweden,7,7)
PhraseIndex(.,8,8)


phraseDepTag(.,Give,Root)
phraseDepTag(Give,Me,Iobj)
phraseDepTag(Give,Skateboarders,Dobj)
phraseDepTag(Skateboarders,All,Det)
phraseDepTag(Skateboarders,Professional,Amod)
phraseDepTag(Skateboarders,Sweden,Nmod:From)
phraseDepTag(Sweden,From,Case)


phrasePosTag(Give,VB)
phrasePosTag(Me,PRP)
phrasePosTag(All,DT)
phrasePosTag(Professional,JJ)
phrasePosTag(Skateboarders,NNS)
phrasePosTag(From,IN)
phrasePosTag(Sweden,NNP)



[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Skateboarding')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Skateboarding'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Skateboarding . { ?uri dbo:birthPlace res:Sweden . } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country res:Sweden . } }


4)To which countries does the Himalayan mountain system extend?

PhraseIndex(To,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Countries,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Himalayan,6,6)
PhraseIndex(Mountain,7,7)
PhraseIndex(System,8,8)
PhraseIndex(Extend,9,9)
PhraseIndex(?,10,10)


phraseDepTag(?,Extend,Root)
phraseDepTag(Countries,To,Case)
phraseDepTag(Countries,Which,Det)
phraseDepTag(System,The,Det)
phraseDepTag(System,Himalayan,Amod)
phraseDepTag(System,Mountain,Compound)
phraseDepTag(Extend,Countries,Nmod:To)
phraseDepTag(Extend,Does,Aux)
phraseDepTag(Extend,System,Nsubj)


phrasePosTag(To,TO)
phrasePosTag(Which,WDT)
phrasePosTag(Countries,NNS)
phrasePosTag(Does,VBZ)
phrasePosTag(The,DT)
phrasePosTag(Himalayan,JJ)
phrasePosTag(Mountain,NN)
phrasePosTag(System,NN)
phrasePosTag(Extend,VB)

HasPhrase(

HasResource

HasRelation(

PriorMatchScore(

IsTypeCompatible(

ResourceType(


[(('http://dbpedia.org/resource/', 'Himalayas'), ('http://dbpedia.org/property/', 'country'), SparqlVar('uri'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Himalayas dbp:country ?uri . }


5)Give me a list of all bandleaders that play trumpet.

PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(A,3,3)
PhraseIndex(List,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(All,6,6)
PhraseIndex(Bandleaders,7,7)
PhraseIndex(That,8,8)
PhraseIndex(Play,9,9)
PhraseIndex(Trumpet,10,10)
PhraseIndex(.,11,11)


phraseDepTag(.,Give,Root)
phraseDepTag(Give,Me,Iobj)
phraseDepTag(Give,List,Dobj)
phraseDepTag(List,A,Det)
phraseDepTag(List,Bandleaders,Nmod:Of)
phraseDepTag(Bandleaders,Of,Case)
phraseDepTag(Bandleaders,All,Det)
phraseDepTag(Bandleaders,Play,Acl:Relcl)
phraseDepTag(Play,That,Nsubj)
phraseDepTag(Play,Trumpet,Dobj)


phrasePosTag(Give,VB)
phrasePosTag(Me,PRP)
phrasePosTag(A,DT)
phrasePosTag(List,NN)
phrasePosTag(Of,IN)
phrasePosTag(All,DT)
phrasePosTag(Bandleaders,NNS)
phrasePosTag(That,WDT)
phrasePosTag(Play,VBP)
phrasePosTag(Trumpet,NN)



HasePhrase(

HasResource

HasRelation(

PriorMatchScore(

IsTypeCompatible(

ResourceType(



[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Bandleader')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'instrument'), ('http://dbpedia.org/resource/', 'Trumpet'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader . ?uri dbo:instrument res:Trumpet . }


6)What is the total amount of men and women serving in the FDNY?


PhraseIndex(What,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Total,4,4)
PhraseIndex(Amount,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(Men,7,7)
PhraseIndex(And,8,8)
PhraseIndex(Women,9,9)
PhraseIndex(Serving,10,10)
PhraseIndex(In,11,11)
PhraseIndex(The,12,12)
PhraseIndex(Fdny,13,13)
PhraseIndex(?,14,14)


phraseDepTag(?,Serving,Root)
phraseDepTag(Amount,The,Det)
phraseDepTag(Amount,Total,Amod)
phraseDepTag(Amount,Men,Nmod:Of)
phraseDepTag(Amount,Women,Nmod:Of)
phraseDepTag(Men,Of,Case)
phraseDepTag(Men,And,Cc)
phraseDepTag(Men,Women,Conj:And)
phraseDepTag(Serving,What,Dobj)
phraseDepTag(Serving,Is,Aux)
phraseDepTag(Serving,Amount,Nsubj)
phraseDepTag(Serving,Fdny,Nmod:In)
phraseDepTag(Fdny,In,Case)
phraseDepTag(Fdny,The,Det)


phrasePosTag(What,WP)
phrasePosTag(Is,VBZ)
phrasePosTag(The,DT)
phrasePosTag(Total,JJ)
phrasePosTag(Amount,NN)
phrasePosTag(Of,IN)
phrasePosTag(Men,NNS)
phrasePosTag(And,CC)
phrasePosTag(Women,NNS)
phrasePosTag(Serving,VBG)
phrasePosTag(In,IN)
phrasePosTag(The,DT)
phrasePosTag(Fdny,NNP)


[(('http://dbpedia.org/resource/', 'New_York_City_Fire_Department'), ('http://dbpedia.org/property/', 'strength'), SparqlVar('num'))]
PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:New_York_City_Fire_Department dbp:strength ?num . }


7)Who is the Formula 1 race driver with the most races?




[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'FormulaOneRacer')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'races'), SparqlVar('x'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:FormulaOneRacer . ?uri dbo:races ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1


8)Give me all world heritage sites designated within the past two years.

PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(World,NN)
PhrasePosTag(Heritage,NN)
PhrasePosTag(Sites,NNS)
PhrasePosTag(Designated,VBN)
PhrasePosTag(Within,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Past,JJ)
PhrasePosTag(Two,CD)
PhrasePosTag(Years,NNS)


PhraseDepTag(Years,Give,root)
PhraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Sites,dobj)
phraseDepTag(Sites,All,det)
phraseDepTag(Sites,World,compound)
phraseDepTag(Sites,Heritage,compound)
phraseDepTag(Sites,Designated,acl)
phraseDepTag(Designated,Years,nmod:within)
phraseDepTag(Years,Within,case)
phraseDepTag(Years,The,det)
phraseDepTag(Years,Past,amod)
phraseDepTag(Years,Two,nummod)

[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'team'), SparqlVar('x')), (SparqlVar('x'), ('http://dbpedia.org/ontology/', 'league'), ('http://dbpedia.org/resource/', 'Premier_League')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthDate'), SparqlVar('y'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:team ?x . ?x dbo:league res:Premier_League . ?uri dbo:birthDate ?y . } ORDER BY DESC(?y) OFFSET 0 LIMIT 1



9)Does Breaking Bad have more episodes than Game of Thrones?


PhraseIndex(Does,1,1)
PhraseIndex(Breaking,2,2)
PhraseIndex(Bad,3,3)
PhraseIndex(Have,4,4)
PhraseIndex(More,5,5)
PhraseIndex(Episodes,6,6)
PhraseIndex(Than,7,7)
PhraseIndex(Game,8,8)
PhraseIndex(Of,9,9)
PhraseIndex(Thrones,10,10)
PhraseIndex(?,11,11)


phraseDepTag(?,Have,Root)
phraseDepTag(Does,Breaking,Xcomp)
phraseDepTag(Breaking,Bad,Xcomp)
phraseDepTag(Have,Does,Csubj)
phraseDepTag(Have,Episodes,Dobj)
phraseDepTag(Have,Game,Nmod:Than)
phraseDepTag(Episodes,More,Amod)
phraseDepTag(Game,Than,Case)
phraseDepTag(Game,Thrones,Nmod:Of)
phraseDepTag(Thrones,Of,Case)


phrasePosTag(Does,VBZ)
phrasePosTag(Breaking,VBG)
phrasePosTag(Bad,JJ)
phrasePosTag(Have,VBP)
phrasePosTag(More,JJR)
phrasePosTag(Episodes,NNS)
phrasePosTag(Than,IN)
phrasePosTag(Game,NN)
phrasePosTag(Of,IN)
phrasePosTag(Thrones,NNPS)


[(('http://dbpedia.org/resource/', 'Breaking_Bad'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Game_of_Thrones'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('y')), (('http://dbpedia.org/resource/', 'Breaking_Bad'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('x')), (('http://dbpedia.org/resource/', 'Game_of_Thrones'), ('http://dbpedia.org/ontology/', 'numberOfEpisodes'), SparqlVar('y'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> ASK WHERE { res:Breaking_Bad dbo:numberOfEpisodes ?x . res:Game_of_Thrones dbo:numberOfEpisodes ?y . FILTER (?y > ?x) }



What were the main discoveries of the Mars rover Curiosity?

PhraseIndex(What,1,1)
PhraseIndex(Were,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Main,4,4)
PhraseIndex(Discoveries,5,5)
PhraseIndex(Of,6,6)
PhraseIndex(The,7,7)
PhraseIndex(Mars,8,8)
PhraseIndex(Rover,9,9)
PhraseIndex(Curiosity,10,10)
PhraseIndex(?,11,11)


phraseDepTag(?,What,Root)
phraseDepTag(What,Were,Cop)
phraseDepTag(What,Discoveries,Nsubj)
phraseDepTag(Discoveries,The,Det)
phraseDepTag(Discoveries,Main,Amod)
phraseDepTag(Discoveries,Curiosity,Nmod:Of)
phraseDepTag(Curiosity,Of,Case)
phraseDepTag(Curiosity,The,Det)
phraseDepTag(Curiosity,Mars,Compound)
phraseDepTag(Curiosity,Rover,Compound)


phrasePosTag(What,WP)
phrasePosTag(Were,VBD)
phrasePosTag(The,DT)
phrasePosTag(Main,JJ)
phrasePosTag(Discoveries,NNS)
phrasePosTag(Of,IN)
phrasePosTag(The,DT)
phrasePosTag(Mars,NNP)
phrasePosTag(Rover,NN)
phrasePosTag(Curiosity,NN)



Give me all people that were born in Vienna and died in Berlin.

PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(People,4,4)
PhraseIndex(That,5,5)
PhraseIndex(Were,6,6)
PhraseIndex(Born,7,7)
PhraseIndex(In,8,8)
PhraseIndex(Vienna,9,9)
PhraseIndex(And,10,10)
PhraseIndex(Died,11,11)
PhraseIndex(In,12,12)
PhraseIndex(Berlin,13,13)
PhraseIndex(.,14,14)


phraseDepTag(.,Give,Root)
phraseDepTag(Give,Me,Iobj)
phraseDepTag(Give,People,Dobj)
phraseDepTag(Give,And,Cc)
phraseDepTag(Give,Died,Conj:And)
phraseDepTag(People,All,Det)
phraseDepTag(People,Born,Acl:Relcl)
phraseDepTag(Born,That,Nsubjpass)
phraseDepTag(Born,Were,Auxpass)
phraseDepTag(Born,Vienna,Nmod:In)
phraseDepTag(Vienna,In,Case)
phraseDepTag(Died,Berlin,Nmod:In)
phraseDepTag(Berlin,In,Case)


phrasePosTag(Give,VB)
phrasePosTag(Me,PRP)
phrasePosTag(All,DT)
phrasePosTag(People,NNS)
phrasePosTag(That,WDT)
phrasePosTag(Were,VBD)
phrasePosTag(Born,VBN)
phrasePosTag(In,IN)
phrasePosTag(Vienna,NNP)
phrasePosTag(And,CC)
phrasePosTag(Died,VBD)
phrasePosTag(In,IN)
phrasePosTag(Berlin,NNP)


[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'birthPlace'), ('http://dbpedia.org/resource/', 'Vienna')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'deathPlace'), ('http://dbpedia.org/resource/', 'Berlin'))]
PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:birthPlace res:Vienna . ?uri dbo:deathPlace res:Berlin . }