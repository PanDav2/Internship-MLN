//Give me all cosmonauts. 
//[u'Give', u'me', u'all', u'cosmonauts', u'.']
PhraseIndex(Give,1,1)
PhraseIndex(me,2,2)
PhraseIndex(all,3,3)
PhraseIndex(cosmonauts,4,4)
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Cosmonauts,NNS)
PhraseDepTag(Cosmonauts,Give,root)
PhraseDepTag(Give,Me,iobj)
PhraseDepTag(Give,Cosmonauts,dobj)
PhraseDepTag(Cosmonauts,All,det)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Astronaut')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Astronaut'))]
ResourceType(Astronaut,Class)
0.63 PriorMatchScore(Astronaut,Cosmonauts)
ResourceType(Astronaut,Class)
0.63 PriorMatchScore(Astronaut,Cosmonauts)
//PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Astronaut . { ?uri dbo:nationality res:Russia . } UNION { ?uri dbo:nationality res:Soviet_Union . } }


//In which country does the Nile start? 
//[u'In', u'which', u'country', u'does', u'the', u'Nile', u'start', u'?']
PhraseIndex(In,1,1)
PhraseIndex(which,2,2)
PhraseIndex(country,3,3)
PhraseIndex(does,4,4)
PhraseIndex(the,5,5)
PhraseIndex(Nile,6,6)
PhraseIndex(start,7,7)
PhrasePosTag(In,IN)
PhrasePosTag(Which,WDT)
PhrasePosTag(Country,NN)
PhrasePosTag(Does,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Nile,NNP)
PhrasePosTag(Start,VB)
PhraseDepTag(Start,Start,root)
PhraseDepTag(Country,In,case)
PhraseDepTag(Country,Which,det)
PhraseDepTag(Nile,The,det)
PhraseDepTag(Start,Country,nmod:in)
PhraseDepTag(Start,Does,aux)
PhraseDepTag(Start,Nile,nsubj)
//[(('http://dbpedia.org/resource/', 'Nile'), ('http://dbpedia.org/ontology/', 'sourceCountry'), SparqlVar('uri'))]
ResourceType(Dbr_Nile,Entity)
1.0 PriorMatchScore(Nile,Nile)
ResourceType(Dbo_Sourcecountry,Relation)
0.7 PriorMatchScore(sourceCountry,Country)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Nile dbo:sourceCountry ?uri . }


PhraseIndex(When,1,1)
PhraseIndex(Is,2,2)
PhraseIndex(The,3,3)
PhraseIndex(Movie,4,4)
PhraseIndex(Worst,5,5)
PhraseIndex(Case,6,6)
PhraseIndex(Scenario,7,7)
PhraseIndex(Going,8,8)
PhraseIndex(To,9,9)
PhraseIndex(Be,10,10)
PhraseIndex(In,11,11)
PhraseIndex(Cinemas,12,12)
PhraseIndex(In,13,13)
PhraseIndex(The,14,14)
PhraseIndex(Netherlands,15,15)

//[u'When', u'Is', u'The', u'Movie', u'Worst', u'Case', u'Scenario', u'Going', u'To', u'Be', u'In', u'Cinemas', u'In', u'The', u'Netherlands']
//When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?

//La ligne est isolée 
PhrasePosTag(When,WRB)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Movie,NN)
PhrasePosTag(Worst,JJS)
PhrasePosTag(Case,NN)
PhrasePosTag(Scenario,NN)
PhrasePosTag(Going,VBG)
PhrasePosTag(To,TO)
PhrasePosTag(Be,VB)
PhrasePosTag(In,IN)
PhrasePosTag(Cinemas,NNS)
PhrasePosTag(In,IN)
PhrasePosTag(The,DT)
PhrasePosTag(Netherlands,NNP)
phraseDepTag(Netherlands,Going,root)
phraseDepTag(Movie,The,det)
phraseDepTag(Movie,Scenario,dep)
phraseDepTag(Scenario,Worst,amod)
phraseDepTag(Scenario,Case,compound)
phraseDepTag(Going,When,advmod)
phraseDepTag(Going,Is,aux)
phraseDepTag(Going,Movie,nsubj)
phraseDepTag(Going,Cinemas,xcomp)
phraseDepTag(Cinemas,To,mark)
phraseDepTag(Cinemas,Be,cop)
phraseDepTag(Cinemas,In,case)
phraseDepTag(Cinemas,Netherlands,nmod:in)
phraseDepTag(Netherlands,In,case)
phraseDepTag(Netherlands,The,det)
PhraseIndex(Which,1,1)
PhraseIndex(German,2,2)
PhraseIndex(Cities,3,3)
PhraseIndex(Have,4,4)
PhraseIndex(More,5,5)
PhraseIndex(Than,6,6)
PhraseIndex(250000,7,7)
PhraseIndex(Inhabitants,8,8)

//[u'Which', u'German', u'Cities', u'Have', u'More', u'Than', u'250000', u'Inhabitants']
//Which German cities have more than 250000 inhabitants?

//La ligne est isolée 
PhrasePosTag(Which,WDT)
PhrasePosTag(German,JJ)
PhrasePosTag(Cities,NNS)
PhrasePosTag(Have,VBP)
PhrasePosTag(More,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(250000,CD)
PhrasePosTag(Inhabitants,NNS)
phraseDepTag(Inhabitants,Have,root)
phraseDepTag(Cities,Which,det)
phraseDepTag(Cities,German,amod)
phraseDepTag(Have,Cities,nsubj)
phraseDepTag(Have,Inhabitants,dobj)
phraseDepTag(More,Than,mwe)
phraseDepTag(250000,More,advmod)
phraseDepTag(Inhabitants,250000,nummod)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Germany')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('population')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'country'), ('http://dbpedia.org/resource/', 'Germany')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'populationTotal'), SparqlVar('population'))]
ResourceType(Dbo_Country,Relation)
ResourceType(Dbr_Germany,Entity)
0.92 PriorMatchScore(Germany,German)
ResourceType(Dbo_Populationtotal,Relation)
ResourceType(Dbo_Country,Relation)
ResourceType(Dbr_Germany,Entity)
0.92 PriorMatchScore(Germany,German)
ResourceType(Dbo_Populationtotal,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { { ?uri rdf:type dbo:City . } UNION { ?uri rdf:type dbo:Town . } ?uri dbo:country res:Germany . ?uri dbo:populationTotal ?population . FILTER ( ?population > 250000 ) }


//Who was John F. Kennedy's vice president? 
//[u'Who', u'was', u'John', u'F.', u'Kennedy', u"'s", u'vice', u'president', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(was,2,2)
PhraseIndex(John,3,3)
PhraseIndex(F.,4,4)
PhraseIndex(Kennedy,5,5)
PhraseIndex('s,6,6)
PhraseIndex(vice,7,7)
PhraseIndex(president,8,8)
PhrasePosTag(Who,WP)
PhrasePosTag(Was,VBD)
PhrasePosTag(John,NNP)
PhrasePosTag(F.,NNP)
PhrasePosTag(Kennedy,NNP)
PhrasePosTag('S,POS)
PhrasePosTag(Vice,NN)
PhrasePosTag(President,NN)
PhraseDepTag(President,Who,root)
PhraseDepTag(Who,Was,cop)
PhraseDepTag(Who,President,nsubj)
PhraseDepTag(Kennedy,John,compound)
PhraseDepTag(Kennedy,F.,compound)
PhraseDepTag(Kennedy,'S,case)
PhraseDepTag(President,Kennedy,nmod:poss)
PhraseDepTag(President,Vice,compound)
//[(('http://dbpedia.org/resource/', 'John_F._Kennedy'), ('http://dbpedia.org/ontology/', 'vicePresident'), SparqlVar('uri'))]
ResourceType(Dbr_John_F._Kennedy,Entity)
0.63 PriorMatchScore(John_F._Kennedy,Kennedy)
ResourceType(Dbo_Vicepresident,Relation)
0.81 PriorMatchScore(vicePresident,President)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:John_F._Kennedy dbo:vicePresident ?uri . }


//Who is the mayor of Berlin? 
//[u'Who', u'is', u'the', u'mayor', u'of', u'Berlin', u'?']
PhraseIndex(Who,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(mayor,4,4)
PhraseIndex(of,5,5)
PhraseIndex(Berlin,6,6)
PhrasePosTag(Who,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Mayor,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(Berlin,NNP)
PhraseDepTag(Berlin,Who,root)
PhraseDepTag(Who,Is,cop)
PhraseDepTag(Who,Mayor,nsubj)
PhraseDepTag(Mayor,The,det)
PhraseDepTag(Mayor,Berlin,nmod:of)
PhraseDepTag(Berlin,Of,case)
//[(('http://dbpedia.org/resource/', 'Berlin'), ('http://dbpedia.org/ontology/', 'leader'), SparqlVar('uri'))]
ResourceType(Dbr_Berlin,Entity)
1.0 PriorMatchScore(Berlin,Berlin)
ResourceType(Dbo_Leader,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Berlin dbo:leader ?uri . }


PhraseIndex(How,1,1)
PhraseIndex(Many,2,2)
PhraseIndex(Students,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Free,6,6)
PhraseIndex(University,7,7)
PhraseIndex(In,8,8)
PhraseIndex(Amsterdam,9,9)
PhraseIndex(Have,10,10)

//[u'How', u'Many', u'Students', u'Does', u'The', u'Free', u'University', u'In', u'Amsterdam', u'Have']
//How many students does the Free University in Amsterdam have?

//La ligne est isolée 
PhrasePosTag(How,WRB)
PhrasePosTag(Many,JJ)
PhrasePosTag(Students,NNS)
PhrasePosTag(Does,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Free,NNP)
PhrasePosTag(University,NNP)
PhrasePosTag(In,IN)
PhrasePosTag(Amsterdam,NNP)
PhrasePosTag(Have,VB)
phraseDepTag(Have,Have,root)
phraseDepTag(Many,How,advmod)
phraseDepTag(Students,Many,amod)
phraseDepTag(University,The,det)
phraseDepTag(University,Free,compound)
phraseDepTag(University,Amsterdam,nmod:in)
phraseDepTag(Amsterdam,In,case)
phraseDepTag(Have,Students,dobj)
phraseDepTag(Have,Does,aux)
phraseDepTag(Have,University,nsubj)
//[(('http://dbpedia.org/resource/', 'Vrije_Universiteit'), ('http://dbpedia.org/ontology/', 'numberOfStudents'), SparqlVar('num'))]
ResourceType(Dbr_Vrije_Universiteit,Entity)
0.64 PriorMatchScore(Vrije_Universiteit,University)
ResourceType(Dbo_Numberofstudents,Relation)
0.66 PriorMatchScore(numberOfStudents,Students)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?num WHERE { res:Vrije_Universiteit dbo:numberOfStudents ?num . }


//What is the second highest mountain on Earth? 
//[u'What', u'is', u'the', u'second', u'highest', u'mountain', u'on', u'Earth', u'?']
PhraseIndex(What,1,1)
PhraseIndex(is,2,2)
PhraseIndex(the,3,3)
PhraseIndex(second,4,4)
PhraseIndex(highest,5,5)
PhraseIndex(mountain,6,6)
PhraseIndex(on,7,7)
PhraseIndex(Earth,8,8)
PhrasePosTag(What,WP)
PhrasePosTag(Is,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Second,JJ)
PhrasePosTag(Highest,JJS)
PhrasePosTag(Mountain,NN)
PhrasePosTag(On,IN)
PhrasePosTag(Earth,NNP)
PhraseDepTag(Earth,What,root)
PhraseDepTag(What,Is,cop)
PhraseDepTag(What,Mountain,nsubj)
PhraseDepTag(What,Earth,dep)
PhraseDepTag(Mountain,The,det)
PhraseDepTag(Mountain,Second,amod)
PhraseDepTag(Mountain,Highest,amod)
PhraseDepTag(Earth,On,case)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Mountain')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'elevation'), SparqlVar('elevation'))]
ResourceType(Mountain,Class)
1.0 PriorMatchScore(Mountain,Mountain)
ResourceType(Dbo_Elevation,Relation)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Mountain . ?uri dbo:elevation ?elevation . } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(All,3,3)
PhraseIndex(Professional,4,4)
PhraseIndex(Skateboarders,5,5)
PhraseIndex(From,6,6)
PhraseIndex(Sweden,7,7)

//[u'Give', u'Me', u'All', u'Professional', u'Skateboarders', u'From', u'Sweden']
//Give me all professional skateboarders from Sweden.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(All,DT)
PhrasePosTag(Professional,JJ)
PhrasePosTag(Skateboarders,NNS)
PhrasePosTag(From,IN)
PhrasePosTag(Sweden,NNP)
phraseDepTag(Sweden,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,Skateboarders,dobj)
phraseDepTag(Skateboarders,All,det)
phraseDepTag(Skateboarders,Professional,amod)
phraseDepTag(Skateboarders,Sweden,nmod:from)
phraseDepTag(Sweden,From,case)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Skateboarding')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Skateboarding'))]
ResourceType(Dbo_Occupation,Relation)
ResourceType(Dbr_Skateboarding,Entity)
0.76 PriorMatchScore(Skateboarding,Skateboarders)
ResourceType(Dbo_Occupation,Relation)
ResourceType(Dbr_Skateboarding,Entity)
0.76 PriorMatchScore(Skateboarding,Skateboarders)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Skateboarding . { ?uri dbo:birthPlace res:Sweden . } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country res:Sweden . } }


//When was Alberta admitted as province? 
//[u'When', u'was', u'Alberta', u'admitted', u'as', u'province', u'?']
PhraseIndex(When,1,1)
PhraseIndex(was,2,2)
PhraseIndex(Alberta,3,3)
PhraseIndex(admitted,4,4)
PhraseIndex(as,5,5)
PhraseIndex(province,6,6)
PhrasePosTag(When,WRB)
PhrasePosTag(Was,VBD)
PhrasePosTag(Alberta,NNP)
PhrasePosTag(Admitted,VBD)
PhrasePosTag(As,IN)
PhrasePosTag(Province,NN)
PhraseDepTag(Province,Was,root)
PhraseDepTag(Was,When,advmod)
PhraseDepTag(Was,Alberta,nsubj)
PhraseDepTag(Alberta,Admitted,acl:relcl)
PhraseDepTag(Admitted,Province,nmod:as)
PhraseDepTag(Province,As,case)
//[(('http://dbpedia.org/resource/', 'Alberta'), ('http://dbpedia.org/property/', 'admittancedate'), SparqlVar('date'))]
ResourceType(Dbr_Alberta,Entity)
1.0 PriorMatchScore(Alberta,Alberta)
ResourceType(Admittancedate,Class)
0.63 PriorMatchScore(admittancedate,Admitted)
//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?date WHERE { res:Alberta dbp:admittancedate ?date . }


PhraseIndex(To,1,1)
PhraseIndex(Which,2,2)
PhraseIndex(Countries,3,3)
PhraseIndex(Does,4,4)
PhraseIndex(The,5,5)
PhraseIndex(Himalayan,6,6)
PhraseIndex(Mountain,7,7)
PhraseIndex(System,8,8)
PhraseIndex(Extend,9,9)

//[u'To', u'Which', u'Countries', u'Does', u'The', u'Himalayan', u'Mountain', u'System', u'Extend']
//To which countries does the Himalayan mountain system extend?

//La ligne est isolée 
PhrasePosTag(To,TO)
PhrasePosTag(Which,WDT)
PhrasePosTag(Countries,NNS)
PhrasePosTag(Does,VBZ)
PhrasePosTag(The,DT)
PhrasePosTag(Himalayan,JJ)
PhrasePosTag(Mountain,NN)
PhrasePosTag(System,NN)
PhrasePosTag(Extend,VB)
phraseDepTag(Extend,Extend,root)
phraseDepTag(Countries,To,case)
phraseDepTag(Countries,Which,det)
phraseDepTag(System,The,det)
phraseDepTag(System,Himalayan,amod)
phraseDepTag(System,Mountain,compound)
phraseDepTag(Extend,Countries,nmod:to)
phraseDepTag(Extend,Does,aux)
phraseDepTag(Extend,System,nsubj)
//[(('http://dbpedia.org/resource/', 'Himalayas'), ('http://dbpedia.org/property/', 'country'), SparqlVar('uri'))]
ResourceType(Dbr_Himalayas,Entity)
0.88 PriorMatchScore(Himalayas,Himalayan)
ResourceType(Country,Class)
0.62 PriorMatchScore(country,Countries)
0.53 PriorMatchScore(country,Mountain)
//PREFIX dbp: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Himalayas dbp:country ?uri . }


PhraseIndex(Give,1,1)
PhraseIndex(Me,2,2)
PhraseIndex(A,3,3)
PhraseIndex(List,4,4)
PhraseIndex(Of,5,5)
PhraseIndex(All,6,6)
PhraseIndex(Bandleaders,7,7)
PhraseIndex(That,8,8)
PhraseIndex(Play,9,9)
PhraseIndex(Trumpet,10,10)

//[u'Give', u'Me', u'A', u'List', u'Of', u'All', u'Bandleaders', u'That', u'Play', u'Trumpet']
//Give me a list of all bandleaders that play trumpet.

//La ligne est isolée 
PhrasePosTag(Give,VB)
PhrasePosTag(Me,PRP)
PhrasePosTag(A,DT)
PhrasePosTag(List,NN)
PhrasePosTag(Of,IN)
PhrasePosTag(All,DT)
PhrasePosTag(Bandleaders,NNS)
PhrasePosTag(That,WDT)
PhrasePosTag(Play,VBP)
PhrasePosTag(Trumpet,NN)
phraseDepTag(Trumpet,Give,root)
phraseDepTag(Give,Me,iobj)
phraseDepTag(Give,List,dobj)
phraseDepTag(List,A,det)
phraseDepTag(List,Bandleaders,nmod:of)
phraseDepTag(Bandleaders,Of,case)
phraseDepTag(Bandleaders,All,det)
phraseDepTag(Bandleaders,Play,acl:relcl)
phraseDepTag(Play,That,nsubj)
phraseDepTag(Play,Trumpet,dobj)
//[(SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'occupation'), ('http://dbpedia.org/resource/', 'Bandleader')), (SparqlVar('uri'), ('http://dbpedia.org/ontology/', 'instrument'), ('http://dbpedia.org/resource/', 'Trumpet'))]
ResourceType(Dbo_Occupation,Relation)
ResourceType(Dbr_Bandleader,Entity)
0.95 PriorMatchScore(Bandleader,Bandleaders)
ResourceType(Dbo_Instrument,Relation)
0.58 PriorMatchScore(instrument,Trumpet)
ResourceType(Dbr_Trumpet,Entity)
1.0 PriorMatchScore(Trumpet,Trumpet)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader . ?uri dbo:instrument res:Trumpet . }


//Which countries have more than ten caves? 
//[u'Which', u'countries', u'have', u'more', u'than', u'ten', u'caves', u'?']
PhraseIndex(Which,1,1)
PhraseIndex(countries,2,2)
PhraseIndex(have,3,3)
PhraseIndex(more,4,4)
PhraseIndex(than,5,5)
PhraseIndex(ten,6,6)
PhraseIndex(caves,7,7)
PhrasePosTag(Which,WDT)
PhrasePosTag(Countries,NNS)
PhrasePosTag(Have,VBP)
PhrasePosTag(More,JJR)
PhrasePosTag(Than,IN)
PhrasePosTag(Ten,CD)
PhrasePosTag(Caves,NNS)
PhraseDepTag(Caves,Have,root)
PhraseDepTag(Countries,Which,det)
PhraseDepTag(Have,Countries,nsubj)
PhraseDepTag(Have,Caves,dobj)
PhraseDepTag(More,Than,mwe)
PhraseDepTag(Ten,More,advmod)
PhraseDepTag(Caves,Ten,nummod)
//[(SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('cave'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave')), (SparqlVar('uri'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Country')), (SparqlVar('cave'), ('http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'type'), ('http://dbpedia.org/ontology/', 'Cave'))]
ResourceType(Country,Class)
0.75 PriorMatchScore(Country,Countries)
ResourceType(Cave,Class)
0.75 PriorMatchScore(Cave,Have)
0.88 PriorMatchScore(Cave,Caves)
ResourceType(Country,Class)
0.75 PriorMatchScore(Country,Countries)
ResourceType(Cave,Class)
0.75 PriorMatchScore(Cave,Have)
0.88 PriorMatchScore(Cave,Caves)
//PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Country . ?cave rdf:type dbo:Cave . { ?cave dbo:location ?uri . } UNION { ?cave dbo:location ?loc . ?loc dbo:country ?uri . } } GROUP BY ?uri HAVING(COUNT(?cave) > 10)
