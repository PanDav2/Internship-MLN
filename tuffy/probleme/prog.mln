// Hard Constraints

//h++

//h1
hasPhrase(p) => hasResource(p,x).
//h2
hasRessource(p,x) =>hasPhrase(p).
//h3
hasResource(p,v18) AND  hasResource(p,v19)  => v18 = v19
//h4
!hasPhrase(p) =>!hasResource(p,r).
//h5
hasRessource(x,r) => hasRelation(r,v1,v2)vhasrelation(v3,r,v4).
//h6
hasRelation(r1,r2,v20) AND hasRelation(r1,r2,v21)  => v20=v21
//h7
hasRelation(r1,r2,v5) => hasResource(v6,r1) AND hasResource(v7,r2).
//h8
phraseIndex(p1,s1,e1,) AND phraseIndex(p2,s2,e2) AND overlap(s1,e1,s2,e2) AND hasPhrase(p1) =>!hasPhrase(p2).
//h9
resourceType(r,Entity) => !hasRelation(r,v8,"2_1") AND !hasRelation(r,v9,"2_2").
//h10
resourceType(r,Entity) => !hasRelation(,r,"2_1") AND !hasRelation(r,v10,"2_2").
//h11
resourceType(r,Class) => !hasRelation(r,v11,"2_1") AND !hasRelation(r,v12,"2_2").
//h12
resourceType(r,Class) => !hasRelation(v13,r,"2_1") AND !hasRelation(r,v14,"2_2").
//h13
!isTypeCompatible(r1,r2,rr) => !hasRelation(r1,r2,rr).

//SOFT CONSTRAINTS FORMULAS

priorMatchScore(p,r,s) => hasPhrase(p)
priorMatchScore(p,r,s) => hasResource(p)
phrasePosTag(p,pt) AND resourceType(r,rt)  => hasResource(p,r)
phraseDepTag(p1,p2,dp) AND hasResource(p1,r1) AND hasResource(p2,r2)  => hasRelation(r1,r2,rr)
phraseDepTag(p1,p2,dp) AND hasResource(p1,r1) AND hasResource(p2,r2) AND !hasMeanWord(p1,p2) => hasRelation(r4,r2,rr)
hasRelatedness(r1,r2,s) AND hasResource(v15,r1) AND hasResource(v16,r2)  => hasRelation(r1,r2,v17)
hasQueryResult(r1,r2,r3,rr1,rr2) => hasRelation(r1,r2,rr1) AND hasrelation(r2,r3,rr2)
